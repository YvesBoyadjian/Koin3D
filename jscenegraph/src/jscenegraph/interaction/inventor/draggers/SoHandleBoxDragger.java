/*
 *
 *  Copyright (C) 2000 Silicon Graphics, Inc.  All Rights Reserved. 
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  Further, this software is distributed without any warranty that it is
 *  free of the rightful claim of any third person regarding infringement
 *  or the like.  Any license provided herein, whether implied or
 *  otherwise, applies only to this software file.  Patent licenses, if
 *  any, provided herein do not apply to combinations of this program with
 *  other software, or any other product whatsoever.
 * 
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 *  Contact information: Silicon Graphics, Inc., 1600 Amphitheatre Pkwy,
 *  Mountain View, CA  94043, or:
 * 
 *  http://www.sgi.com 
 * 
 *  For further information regarding this notice, see: 
 * 
 *  http://oss.sgi.com/projects/GenInfo/NoticeExplan/
 *
 */


/*
 * Copyright (C) 1990,91   Silicon Graphics, Inc.
 *
 _______________________________________________________________________
 ______________  S I L I C O N   G R A P H I C S   I N C .  ____________
 |
 |   $Revision: 1.1.1.1 $
 |
 |   Description:
 |      This file defines the handle box dragger class.
 |
 | NOTE TO DEVELOPERS:
 |     For info about the structure of SoHandleBoxDragger:
 |     [1] compile: /usr/share/src/Inventor/samples/ivNodeKitStructure
 |     [2] type:    ivNodeKitStructure SoHandleBoxDragger.
 |     [3] The program prints a diagram of the scene graph and a table with 
 |         information about each part.
 |
 |  The following parts in this dragger are created at construction time.
 |  'ResourceName' corresponds to the name of the default geometry for the
 |  part. The dragger's constructor gets the scene graph for 'ResourceName'
 |  by querying the global dictionary ( SoDB::getByName("ResourceName"); ).  
 |
 |  Resource Name:                           Part Name:
 |
 |  NOTE: for the translators and extruders, 
 |        numbering refers to a cube-face:
 |        1=top,2=bot,3=lft,4=rit,5=fnt,6=bak
 |
 |      handleBoxTranslator1               - translator1
 |      handleBoxTranslator1Active         - translator1Active
 |      (ditto for translator2-translator6)
 |
 |      handleBoxExtruder1                 - extruder1
 |      handleBoxExtruder1Active           - extruder1Active
 |      (ditto for extruder2-extruder6)
 |
 |  
 |  NOTE: for the uniform scalers, 
 |        numbers refer to a corner: 
 |        1=+x+y+z,  2=+x+y-z, 3=+x-y+z, 
 |        4=+x-y-z,  5=-x+y+z,  6=-x+y-z, 
 |        7=-x-y+z, 8=-x-y-z
 |      handleBoxUniform1                  - uniform1
 |      handleBoxUniform1Active            - uniform1Active
 |      (ditto for uniform2-uniform8)
 |
 |  NOTE: for the arrows, numbering refers
 |        to cube-face they point out from:
 |        1=top,2=bot,3=lft,4=rit,5=fnt,6=bak
 |  
 |      handleBoxArrow1                    - arrow1
 |      (ditto for arrow2-arrow6)
 |
 |   Author(s): Paul Isaacs, David Mott
 |
 ______________  S I L I C O N   G R A P H I C S   I N C .  ____________
 _______________________________________________________________________
 */

package jscenegraph.interaction.inventor.draggers;

import jscenegraph.database.inventor.SbLine;
import jscenegraph.database.inventor.SbMatrix;
import jscenegraph.database.inventor.SbPlane;
import jscenegraph.database.inventor.SbRotation;
import jscenegraph.database.inventor.SbVec3f;
import jscenegraph.database.inventor.SbVec3fSingle;
import jscenegraph.database.inventor.SoPath;
import jscenegraph.database.inventor.SoType;
import jscenegraph.database.inventor.actions.SoHandleEventAction;
import jscenegraph.database.inventor.events.SoEvent;
import jscenegraph.database.inventor.events.SoKeyboardEvent;
import jscenegraph.database.inventor.fields.SoFieldData;
import jscenegraph.database.inventor.fields.SoSFNode;
import jscenegraph.database.inventor.fields.SoSFVec3f;
import jscenegraph.database.inventor.nodes.SoDrawStyle;
import jscenegraph.database.inventor.nodes.SoSeparator;
import jscenegraph.database.inventor.nodes.SoSubNode;
import jscenegraph.database.inventor.nodes.SoSwitch;
import jscenegraph.database.inventor.nodes.SoTranslation;
import jscenegraph.database.inventor.projectors.SbLineProjector;
import jscenegraph.database.inventor.projectors.SbPlaneProjector;
import jscenegraph.database.inventor.sensors.SoFieldSensor;
import jscenegraph.database.inventor.sensors.SoSensor;
import jscenegraph.interaction.inventor.nodes.SoSurroundScale;
import jscenegraph.nodekits.inventor.nodekits.SoNodekitCatalog;
import jscenegraph.nodekits.inventor.nodekits.SoSubKit;

/**
 * @author Yves Boyadjian
 *
 */


////////////////////////////////////////////////////////////////////////////////
//! Box you can scale, stretch and translate by dragging with the mouse.
/*!
\class SoHandleBoxDragger
\ingroup Draggers
SoHandleBoxDragger 
is a dragger shaped like a wireframe box with small <em>corner cubes</em>
mounted on each corner.  
Click and drag any of these cubes to scale the box uniformly.
Six other <em>center cubes</em> are centered on the sides of the box; white 
lines connect them to the center of the dragger.
Drag one of the center cubes along its line to stretch the box 
in that direction.
Dragging a face of the box translates the dragger within that plane.


While you drag a face of the box, purple <em>feedback arrows</em> display the
possible directions of motion.  Press the <tt>&lt;Shift&gt;</tt> key to
<em>constrain</em> the motion to one of the two major directions in the
plane. The constraint direction is chosen based on the next user
gesture.  Press the <tt>&lt;Control&gt;</tt> key and the dragger will translate
<em>perpendicular</em> to that plane.  The \b translation  field is modified
as the face is dragged.


By default, dragging any of the small cubes scales  about the center of
the object.  Pressing the <tt>&lt;Control&gt;</tt> key changes this:  A corner cube
will scale about its opposite corner.  A center cube will scale about
the center of its opposite face.  Dragging one of the small cubes will
usually result in changes to both the \b scaleFactor  and
\b translation  fields. This is because any scale about a point other
than the origin has a translation element.


As with all draggers, if you change the fields the dragger will
move to match the new settings.


<em>Remember:</em> This is <em>not</em> an SoTransform!. 
If you want to move other objects with this dragger, you can either: 


[a] Use an SoHandleBoxManip, which is subclassed from SoTransform. 
It creates one of
these draggers and uses it as the interface to change its fields.
(see the SoHandleBoxManip reference page).  


[b] Use field-to-field connections to connect the fields of this dragger to
those of any SoTransformation node.


You can change the parts in any instance of this dragger using
setPart().
The default part geometries are defined as resources for this 
SoHandleBoxDragger class.  They are detailed in the 
Dragger Resources section of the online reference page for this class.
You can make your program use different default resources for the parts
by copying the file
\b /usr/share/data/draggerDefaults/handleBoxDragger.iv 
into your own directory, editing the file, and then
setting the environment variable \b SO_DRAGGER_DIR  to be a path to that directory.

\par File Format/Default
\par
\code
HandleBoxDragger {
  renderCaching AUTO
  boundingBoxCaching AUTO
  renderCulling AUTO
  pickCulling AUTO
  isActive false
  translation 0 0 0
  scaleFactor 1 1 1
}
\endcode
\par
NOTE
  Unlike most multi-function draggers,  SoHandleBoxDragger is
not a compound dragger made up of other draggers that
perform its smaller tasks.  This is 
not because it was inappropriate, but because
was written before implementation of the methods that
synchronize multiple child draggers. The younger 
SoTransformBoxDragger has similarities to the handle box dragger, but
the transform box dragger <em>is</em> a compound dragger. 
\par See Also
\par
SoInteractionKit, SoDragger, SoCenterballDragger, SoDirectionalLightDragger, SoDragPointDragger, SoJackDragger, SoPointLightDragger, SoRotateCylindricalDragger, SoRotateDiscDragger, SoRotateSphericalDragger, SoScale1Dragger, SoScale2Dragger, SoScale2UniformDragger, SoScaleUniformDragger, SoSpotLightDragger, SoTabBoxDragger, SoTabPlaneDragger, SoTrackballDragger, SoTransformBoxDragger, SoTransformerDragger, SoTranslate1Dragger, SoTranslate2Dragger
*/
////////////////////////////////////////////////////////////////////////////////

public class SoHandleBoxDragger extends SoDragger {

    //SO_KIT_HEADER(SoHandleBoxDragger);
	private final SoSubKit kitHeader = SoSubKit.SO_KIT_HEADER(SoHandleBoxDragger.class,this);
	
	public                                                                     
    static SoType       getClassTypeId()        /* Returns class type id */   
                                    { return SoSubNode.getClassTypeId(SoHandleBoxDragger.class); }                   
    public SoType      getTypeId()       /* Returns type id      */
    {
		return kitHeader == null ? super.getTypeId() : kitHeader.getClassTypeId();		    	
    }
  public                                                                  
    SoFieldData   getFieldData() {
	  return kitHeader == null ? super.getFieldData() : kitHeader.getFieldData(); 
  }
  public  static SoFieldData[] getFieldDataPtr()                              
        { return SoSubNode.getFieldDataPtr(SoHandleBoxDragger.class); }              

	
    /* Returns an SoNodekitCatalog for the node */                            
    public SoNodekitCatalog getNodekitCatalog() {
    	if(kitHeader == null) {
    		return super.getNodekitCatalog();
    	}
    	return kitHeader.getNodekitCatalog();
    }


    protected final SoSFNode drawStyle = new SoSFNode();

    //! For making the dragger surround what lies above it.
    protected final SoSFNode surroundScale = new SoSFNode();

    protected final SoSFNode translator1Switch = new SoSFNode();
    protected final SoSFNode translator1 = new SoSFNode();
    protected final SoSFNode translator1Active = new SoSFNode();
    protected final SoSFNode translator2Switch = new SoSFNode();
    protected final SoSFNode translator2 = new SoSFNode();
    protected final SoSFNode translator2Active = new SoSFNode();
    protected final SoSFNode translator3Switch = new SoSFNode();
    protected final SoSFNode translator3 = new SoSFNode();
    protected final SoSFNode translator3Active = new SoSFNode();
    protected final SoSFNode translator4Switch = new SoSFNode();
    protected final SoSFNode translator4 = new SoSFNode();
    protected final SoSFNode translator4Active = new SoSFNode();
    protected final SoSFNode translator5Switch = new SoSFNode();
    protected final SoSFNode translator5 = new SoSFNode();
    protected final SoSFNode translator5Active = new SoSFNode();
    protected final SoSFNode translator6Switch = new SoSFNode();
    protected final SoSFNode translator6 = new SoSFNode();
    protected final SoSFNode translator6Active = new SoSFNode();


    protected final SoSFNode extruder1Switch = new SoSFNode();
    protected final SoSFNode extruder1 = new SoSFNode();
    protected final SoSFNode extruder1Active = new SoSFNode();
    protected final SoSFNode extruder2Switch = new SoSFNode();
    protected final SoSFNode extruder2 = new SoSFNode();
    protected final SoSFNode extruder2Active = new SoSFNode();
    protected final SoSFNode extruder3Switch = new SoSFNode();
    protected final SoSFNode extruder3 = new SoSFNode();
    protected final SoSFNode extruder3Active = new SoSFNode();
    protected final SoSFNode extruder4Switch = new SoSFNode();
    protected final SoSFNode extruder4 = new SoSFNode();
    protected final SoSFNode extruder4Active = new SoSFNode();
    protected final SoSFNode extruder5Switch = new SoSFNode();
    protected final SoSFNode extruder5 = new SoSFNode();
    protected final SoSFNode extruder5Active = new SoSFNode();
    protected final SoSFNode extruder6Switch = new SoSFNode();
    protected final SoSFNode extruder6 = new SoSFNode();
    protected final SoSFNode extruder6Active = new SoSFNode();

    protected final SoSFNode uniform1Switch = new SoSFNode();
    protected final SoSFNode uniform1 = new SoSFNode();
    protected final SoSFNode uniform1Active = new SoSFNode();
    protected final SoSFNode uniform2Switch = new SoSFNode();
    protected final SoSFNode uniform2 = new SoSFNode();
    protected final SoSFNode uniform2Active = new SoSFNode();
    protected final SoSFNode uniform3Switch = new SoSFNode();
    protected final SoSFNode uniform3 = new SoSFNode();
    protected final SoSFNode uniform3Active = new SoSFNode();
    protected final SoSFNode uniform4Switch = new SoSFNode();
    protected final SoSFNode uniform4 = new SoSFNode();
    protected final SoSFNode uniform4Active = new SoSFNode();
    protected final SoSFNode uniform5Switch = new SoSFNode();
    protected final SoSFNode uniform5 = new SoSFNode();
    protected final SoSFNode uniform5Active = new SoSFNode();
    protected final SoSFNode uniform6Switch = new SoSFNode();
    protected final SoSFNode uniform6 = new SoSFNode();
    protected final SoSFNode uniform6Active = new SoSFNode();
    protected final SoSFNode uniform7Switch = new SoSFNode();
    protected final SoSFNode uniform7 = new SoSFNode();
    protected final SoSFNode uniform7Active = new SoSFNode();
    protected final SoSFNode uniform8Switch = new SoSFNode();
    protected final SoSFNode uniform8 = new SoSFNode();
    protected final SoSFNode uniform8Active = new SoSFNode();

    protected final SoSFNode arrowTranslation = new SoSFNode();

    protected final SoSFNode arrow1Switch = new SoSFNode();
    protected final SoSFNode arrow1 = new SoSFNode();
    protected final SoSFNode arrow2Switch = new SoSFNode();
    protected final SoSFNode arrow2 = new SoSFNode();
    protected final SoSFNode arrow3Switch = new SoSFNode();
    protected final SoSFNode arrow3 = new SoSFNode();
    protected final SoSFNode arrow4Switch = new SoSFNode();
    protected final SoSFNode arrow4 = new SoSFNode();
    protected final SoSFNode arrow5Switch = new SoSFNode();
    protected final SoSFNode arrow5 = new SoSFNode();
    protected final SoSFNode arrow6Switch = new SoSFNode();
    protected final SoSFNode arrow6 = new SoSFNode();
	
	
	
    public final SoSFVec3f    translation = new SoSFVec3f();
    public final SoSFVec3f    scaleFactor = new SoSFVec3f();
    
    protected SoFieldSensor translFieldSensor;
    protected SoFieldSensor scaleFieldSensor;
    

    private enum WhichAxis 
        { POSX, POSY, POSZ, NEGX, NEGY, NEGZ };
        
    private enum State
        { INACTIVE, 
          SCALE_GEOM_ONLY,
           RIT_X_SCALE,  TOP_Y_SCALE,  FNT_Z_SCALE, 
           LFT_X_SCALE,  BOT_Y_SCALE,  BAK_Z_SCALE, 

          PX_PY_PZ_3D_SCALE, PX_PY_NZ_3D_SCALE, PX_NY_PZ_3D_SCALE, 
          PX_NY_NZ_3D_SCALE, NX_PY_PZ_3D_SCALE, NX_PY_NZ_3D_SCALE, 
          NX_NY_PZ_3D_SCALE, NX_NY_NZ_3D_SCALE, 

          RIT_TRANSLATE,  TOP_TRANSLATE,  FNT_TRANSLATE,
          LFT_TRANSLATE,  BOT_TRANSLATE,  BAK_TRANSLATE };
	

    private State               currentState;     
    private int                 translateDir;   //!< Used for 1-D translation,
                                        //! this variable records the current
                                        //! axis being used.

    private SbPlaneProjector    motionPlaneProj;
    private SbLineProjector     motionLineProj;

    private State           restartState;     //!< used by meta callback. 
    private final SbVec3f         worldRestartPt = new SbVec3f(); //!< used during interaction

    private boolean            altDown, ctlDown, shftDown;  //!< used to keep track of
                                                 //! which meta keys were down.

    //! character strings from which the shared geometry is read
    private static short[] geomBuffer;
    
    static {
    	int[] geom1 = getGeom1();
    	int length1 = geom1.length;
    	int[] geom2 = getGeom2();
    	int length = length1+geom2.length;
    	geomBuffer = new short[length];
    	for(int i=0; i<length; i++) {
    		if(i<length1)
    			geomBuffer[i] = (short)geom1[i];
    		else
    			geomBuffer[i] = (short)geom2[i-length1];
    			
    	}    	
    }
    
    private static int[] getGeom1() {
    	int[] geom1 = {
        		0x23,0x49,0x6e,0x76,0x65,0x6e,0x74,0x6f,0x72,0x20,0x56,0x32,0x2e,0x31,0x20,0x62,0x69,0x6e,0x61,0x72,0x79,0x20,0x20,0xa,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x42,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x25,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x54,0x52,0x41,0x4e,0x53,0x4c,0x41,0x54,0x4f,0x52,0x5f,0x53,0x54,0x59,0x4c,0x45,0x2b,0x30,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x47,0x72,0x6f,0x75,0x70,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x0,0x0,0x0,0x8,0x4d,0x61,0x74,0x65,0x72,0x69,0x61,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0xc,0x64,0x69,0x66,0x66,0x75,0x73,0x65,0x43,0x6f,0x6c,0x6f,0x72,0x0,0x0,0x0,0x1,0x3f,0x0,0x0,0x0,0x3f,0x0,0x0,0x0,0x3f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xd,0x65,0x6d,0x69,0x73,0x73,0x69,0x76,0x65,0x43,0x6f,0x6c,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x3f,0x0,0x0,0x0,0x3f,0x0,0x0,0x0,0x3f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x9,0x44,0x72,0x61,0x77,0x53,0x74,0x79,0x6c,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x5,0x73,0x74,0x79,0x6c,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x4c,0x49,0x4e,0x45,0x53,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x9,0x6c,0x69,0x6e,0x65,0x57,0x69,0x64,0x74,0x68,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x4c,0x69,0x67,0x68,0x74,0x4d,0x6f,0x64,0x65,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x6d,0x6f,0x64,0x65,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x50,0x48,0x4f,0x4e,0x47,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x53,0x68,0x61,0x70,0x65,0x48,0x69,0x6e,0x74,0x73,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xe,0x76,0x65,0x72,0x74,0x65,0x78,0x4f,0x72,0x64,0x65,0x72,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x10,0x43,0x4f,0x55,0x4e,0x54,0x45,0x52,0x43,0x4c,0x4f,0x43,0x4b,0x57,0x49,0x53,0x45,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x43,0x6f,0x6d,0x70,0x6c,0x65,0x78,0x69,0x74,0x79,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x3c,0x23,0xd7,0xa,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x14,0x68,0x61,0x6e,0x64,0x6c,0x65,0x42,0x6f,0x78,0x54,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x6f,0x72,0x31,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xd,0x72,0x65,0x6e,0x64,0x65,0x72,0x43,0x61,0x63,0x68,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x4f,0x4e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x25,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x54,0x52,0x41,0x4e,0x53,0x4c,0x41,0x54,0x4f,0x52,0x5f,0x53,0x54,0x59,0x4c,0x45,0x2b,0x30,0x0,0x0,0x0,0x0,0x0,0x0,0xd,0x4e,0x6f,0x72,0x6d,0x61,0x6c,0x42,0x69,0x6e,0x64,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x4f,0x56,0x45,0x52,0x41,0x4c,0x4c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf,0x4d,0x61,0x74,0x65,0x72,0x69,0x61,0x6c,0x42,0x69,0x6e,0x64,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x4f,0x56,0x45,0x52,0x41,0x4c,0x4c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x4e,0x6f,0x72,0x6d,0x61,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x6,0x76,0x65,0x63,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x3f,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb,0x43,0x6f,0x6f,0x72,0x64,0x69,0x6e,0x61,0x74,0x65,0x33,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x70,0x6f,0x69,0x6e,0x74,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x3f,0x80,0x0,0x0,0x3f,0x80,0x0,0x0,0x3f,0x80,0x0,0x0,0x3f,0x80,0x0,0x0,0x3f,0x80,0x0,0x0,0xbf,0x80,0x0,0x0,0xbf,0x80,0x0,0x0,0x3f,0x80,0x0,0x0,0xbf,0x80,0x0,0x0,0xbf,0x80,0x0,0x0,0x3f,0x80,0x0,0x0,0x3f,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x46,0x61,0x63,0x65,0x53,0x65,0x74,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x14,0x68,0x61,0x6e,0x64,0x6c,0x65,0x42,0x6f,0x78,0x54,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x6f,0x72,0x32,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xd,0x72,0x65,0x6e,0x64,0x65,0x72,0x43,0x61,0x63,0x68,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x4f,0x4e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x25,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x54,0x52,0x41,0x4e,0x53,0x4c,0x41,0x54,0x4f,0x52,0x5f,0x53,0x54,0x59,0x4c,0x45,0x2b,0x30,0x0,0x0,0x0,0x0,0x0,0x0,0xd,0x4e,0x6f,0x72,0x6d,0x61,0x6c,0x42,0x69,0x6e,0x64,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x4f,0x56,0x45,0x52,0x41,0x4c,0x4c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf,0x4d,0x61,0x74,0x65,0x72,0x69,0x61,0x6c,0x42,0x69,0x6e,0x64,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x4f,0x56,0x45,0x52,0x41,0x4c,0x4c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x4e,0x6f,0x72,0x6d,0x61,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x6,0x76,0x65,0x63,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0xbf,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb,0x43,0x6f,0x6f,0x72,0x64,0x69,0x6e,0x61,0x74,0x65,0x33,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x70,0x6f,0x69,0x6e,0x74,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x3f,0x80,0x0,0x0,0xbf,0x80,0x0,0x0,0x3f,0x80,0x0,0x0,0x3f,0x80,0x0,0x0,0xbf,0x80,0x0,0x0,0xbf,0x80,0x0,0x0,0xbf,0x80,0x0,0x0,0xbf,0x80,0x0,0x0,0xbf,0x80,0x0,0x0,0xbf,0x80,0x0,0x0,0xbf,0x80,0x0,0x0,0x3f,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x46,0x61,0x63,0x65,0x53,0x65,0x74,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x14,0x68,0x61,0x6e,0x64,0x6c,0x65,0x42,0x6f,0x78,0x54,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x6f,0x72,0x33,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xd,0x72,0x65,0x6e,0x64,0x65,0x72,0x43,0x61,0x63,0x68,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x4f,0x4e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x25,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x54,0x52,0x41,0x4e,0x53,0x4c,0x41,0x54,0x4f,0x52,0x5f,0x53,0x54,0x59,0x4c,0x45,0x2b,0x30,0x0,0x0,0x0,0x0,0x0,0x0,0xd,0x4e,0x6f,0x72,0x6d,0x61,0x6c,0x42,0x69,0x6e,0x64,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x4f,0x56,0x45,0x52,0x41,0x4c,0x4c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf,0x4d,0x61,0x74,0x65,0x72,0x69,0x61,0x6c,0x42,0x69,0x6e,0x64,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x4f,0x56,0x45,0x52,0x41,0x4c,0x4c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x4e,0x6f,0x72,0x6d,0x61,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x6,0x76,0x65,0x63,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x1,0xbf,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb,0x43,0x6f,0x6f,0x72,0x64,0x69,0x6e,0x61,0x74,0x65,0x33,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x70,0x6f,0x69,0x6e,0x74,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0xbf,0x80,0x0,0x0,0x3f,0x80,0x0,0x0,0x3f,0x80,0x0,0x0,0xbf,0x80,0x0,0x0,0x3f,0x80,0x0,0x0,0xbf,0x80,0x0,0x0,0xbf,0x80,0x0,0x0,0xbf,0x80,0x0,0x0,0xbf,0x80,0x0,0x0,0xbf,0x80,0x0,0x0,0xbf,0x80,0x0,0x0,0x3f,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x46,0x61,0x63,0x65,0x53,0x65,0x74,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x14,0x68,0x61,0x6e,0x64,0x6c,0x65,0x42,0x6f,0x78,0x54,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x6f,0x72,0x34,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xd,0x72,0x65,0x6e,0x64,0x65,0x72,0x43,0x61,0x63,0x68,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x4f,0x4e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x25,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x54,0x52,0x41,0x4e,0x53,0x4c,0x41,0x54,0x4f,0x52,0x5f,0x53,0x54,0x59,0x4c,0x45,0x2b,0x30,0x0,0x0,0x0,0x0,0x0,0x0,0xd,0x4e,0x6f,0x72,0x6d,0x61,0x6c,0x42,0x69,0x6e,0x64,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x4f,0x56,0x45,0x52,0x41,0x4c,0x4c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf,0x4d,0x61,0x74,0x65,0x72,0x69,0x61,0x6c,0x42,0x69,0x6e,0x64,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x4f,0x56,0x45,0x52,0x41,0x4c,0x4c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x4e,0x6f,0x72,0x6d,0x61,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x6,0x76,0x65,0x63,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x1,0x3f,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb,0x43,0x6f,0x6f,0x72,0x64,0x69,0x6e,0x61,0x74,0x65,0x33,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x70,0x6f,0x69,0x6e,0x74,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x3f,0x80,0x0,0x0,0x3f,0x80,0x0,0x0,0x3f,0x80,0x0,0x0,0x3f,0x80,0x0,0x0,0x3f,0x80,0x0,0x0,0xbf,0x80,0x0,0x0,0x3f,0x80,0x0,0x0,0xbf,0x80,0x0,0x0,0xbf,0x80,0x0,0x0,0x3f,0x80,0x0,0x0,0xbf,0x80,0x0,0x0,0x3f,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x46,0x61,0x63,0x65,0x53,0x65,0x74,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x14,0x68,0x61,0x6e,0x64,0x6c,0x65,0x42,0x6f,0x78,0x54,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x6f,0x72,0x35,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xd,0x72,0x65,0x6e,0x64,0x65,0x72,0x43,0x61,0x63,0x68,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x4f,0x4e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x25,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x54,0x52,0x41,0x4e,0x53,0x4c,0x41,0x54,0x4f,0x52,0x5f,0x53,0x54,0x59,0x4c,0x45,0x2b,0x30,0x0,0x0,0x0,0x0,0x0,0x0,0xd,0x4e,0x6f,0x72,0x6d,0x61,0x6c,0x42,0x69,0x6e,0x64,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x4f,0x56,0x45,0x52,0x41,0x4c,0x4c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf,0x4d,0x61,0x74,0x65,0x72,0x69,0x61,0x6c,0x42,0x69,0x6e,0x64,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x4f,0x56,0x45,0x52,0x41,0x4c,0x4c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x4e,0x6f,0x72,0x6d,0x61,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x6,0x76,0x65,0x63,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3f,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb,0x43,0x6f,0x6f,0x72,0x64,0x69,0x6e,0x61,0x74,0x65,0x33,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x70,0x6f,0x69,0x6e,0x74,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x3f,0x80,0x0,0x0,0x3f,0x80,0x0,0x0,0x3f,0x80,0x0,0x0,0x3f,0x80,0x0,0x0,0xbf,0x80,0x0,0x0,0x3f,0x80,0x0,0x0,0xbf,0x80,0x0,0x0,0xbf,0x80,0x0,0x0,0x3f,0x80,0x0,0x0,0xbf,0x80,0x0,0x0,0x3f,0x80,0x0,0x0,0x3f,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x46,0x61,0x63,0x65,0x53,0x65,0x74,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x14,0x68,0x61,0x6e,0x64,0x6c,0x65,0x42,0x6f,0x78,0x54,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x6f,0x72,0x36,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xd,0x72,0x65,0x6e,0x64,0x65,0x72,0x43,0x61,0x63,0x68,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x4f,0x4e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x25,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x54,0x52,0x41,0x4e,0x53,0x4c,0x41,0x54,0x4f,0x52,0x5f,0x53,0x54,0x59,0x4c,0x45,0x2b,0x30,0x0,0x0,0x0,0x0,0x0,0x0,0xd,0x4e,0x6f,0x72,0x6d,0x61,0x6c,0x42,0x69,0x6e,0x64,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x4f,0x56,0x45,0x52,0x41,0x4c,0x4c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf,0x4d,0x61,0x74,0x65,0x72,0x69,0x61,0x6c,0x42,0x69,0x6e,0x64,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x4f,0x56,0x45,0x52,0x41,0x4c,0x4c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x4e,0x6f,0x72,0x6d,0x61,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x6,0x76,0x65,0x63,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xbf,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb,0x43,0x6f,0x6f,0x72,0x64,0x69,0x6e,0x61,0x74,0x65,0x33,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x70,0x6f,0x69,0x6e,0x74,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x3f,0x80,0x0,0x0,0x3f,0x80,0x0,0x0,0xbf,0x80,0x0,0x0,0x3f,0x80,0x0,0x0,0xbf,0x80,0x0,0x0,0xbf,0x80,0x0,0x0,0xbf,0x80,0x0,0x0,0xbf,0x80,0x0,0x0,0xbf,0x80,0x0,0x0,0xbf,0x80,0x0,0x0,0x3f,0x80,0x0,0x0,0xbf,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x46,0x61,0x63,0x65,0x53,0x65,0x74,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x2c,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x54,0x52,0x41,0x4e,0x53,0x4c,0x41,0x54,0x4f,0x52,0x5f,0x53,0x54,0x59,0x4c,0x45,0x5f,0x41,0x43,0x54,0x49,0x56,0x45,0x2b,0x31,0x0,0x0,0x0,0x5,0x47,0x72,0x6f,0x75,0x70,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x0,0x0,0x0,0x8,0x4d,0x61,0x74,0x65,0x72,0x69,0x61,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0xc,0x64,0x69,0x66,0x66,0x75,0x73,0x65,0x43,0x6f,0x6c,0x6f,0x72,0x0,0x0,0x0,0x1,0x3f,0x0,0x0,0x0,0x3f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xd,0x65,0x6d,0x69,0x73,0x73,0x69,0x76,0x65,0x43,0x6f,0x6c,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x3f,0x0,0x0,0x0,0x3f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x9,0x44,0x72,0x61,0x77,0x53,0x74,0x79,0x6c,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x5,0x73,0x74,0x79,0x6c,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x4c,0x49,0x4e,0x45,0x53,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x9,0x6c,0x69,0x6e,0x65,0x57,0x69,0x64,0x74,0x68,0x0,0x0,0x0,0x40,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x4c,0x69,0x67,0x68,0x74,0x4d,0x6f,0x64,0x65,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x6d,0x6f,0x64,0x65,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x50,0x48,0x4f,0x4e,0x47,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x53,0x68,0x61,0x70,0x65,0x48,0x69,0x6e,0x74,0x73,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xe,0x76,0x65,0x72,0x74,0x65,0x78,0x4f,0x72,0x64,0x65,0x72,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x10,0x43,0x4f,0x55,0x4e,0x54,0x45,0x52,0x43,0x4c,0x4f,0x43,0x4b,0x57,0x49,0x53,0x45,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x43,0x6f,0x6d,0x70,0x6c,0x65,0x78,0x69,0x74,0x79,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x3c,0x23,0xd7,0xa,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x1a,0x68,0x61,0x6e,0x64,0x6c,0x65,0x42,0x6f,0x78,0x54,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x6f,0x72,0x31,0x41,0x63,0x74,0x69,0x76,0x65,0x0,0x0,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xd,0x72,0x65,0x6e,0x64,0x65,0x72,0x43,0x61,0x63,0x68,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x4f,0x4e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x2c,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x54,0x52,0x41,0x4e,0x53,0x4c,0x41,0x54,0x4f,0x52,0x5f,0x53,0x54,0x59,0x4c,0x45,0x5f,0x41,0x43,0x54,0x49,0x56,0x45,0x2b,0x31,0x0,0x0,0x0,0xd,0x4e,0x6f,0x72,0x6d,0x61,0x6c,0x42,0x69,0x6e,0x64,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x4f,0x56,0x45,0x52,0x41,0x4c,0x4c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf,0x4d,0x61,0x74,0x65,0x72,0x69,0x61,0x6c,0x42,0x69,0x6e,0x64,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x4f,0x56,0x45,0x52,0x41,0x4c,0x4c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x4e,0x6f,0x72,0x6d,0x61,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x6,0x76,0x65,0x63,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x3f,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb,0x43,0x6f,0x6f,0x72,0x64,0x69,0x6e,0x61,0x74,0x65,0x33,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x70,0x6f,0x69,0x6e,0x74,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x3f,0x80,0x0,0x0,0x3f,0x80,0x0,0x0,0x3f,0x80,0x0,0x0,0x3f,0x80,0x0,0x0,0x3f,0x80,0x0,0x0,0xbf,0x80,0x0,0x0,0xbf,0x80,0x0,0x0,0x3f,0x80,0x0,0x0,0xbf,0x80,0x0,0x0,0xbf,0x80,0x0,0x0,0x3f,0x80,0x0,0x0,0x3f,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x46,0x61,0x63,0x65,0x53,0x65,0x74,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x1a,0x68,0x61,0x6e,0x64,0x6c,0x65,0x42,0x6f,0x78,0x54,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x6f,0x72,0x32,0x41,0x63,0x74,0x69,0x76,0x65,0x0,0x0,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xd,0x72,0x65,0x6e,0x64,0x65,0x72,0x43,0x61,0x63,0x68,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x4f,0x4e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x2c,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x54,0x52,0x41,0x4e,0x53,0x4c,0x41,0x54,0x4f,0x52,0x5f,0x53,0x54,0x59,0x4c,0x45,0x5f,0x41,0x43,0x54,0x49,0x56,0x45,0x2b,0x31,0x0,0x0,0x0,0xd,0x4e,0x6f,0x72,0x6d,0x61,0x6c,0x42,0x69,0x6e,0x64,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x4f,0x56,0x45,0x52,0x41,0x4c,0x4c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf,0x4d,0x61,0x74,0x65,0x72,0x69,0x61,0x6c,0x42,0x69,0x6e,0x64,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x4f,0x56,0x45,0x52,0x41,0x4c,0x4c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x4e,0x6f,0x72,0x6d,0x61,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x6,0x76,0x65,0x63,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0xbf,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb,0x43,0x6f,0x6f,0x72,0x64,0x69,0x6e,0x61,0x74,0x65,0x33,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x70,0x6f,0x69,0x6e,0x74,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x3f,0x80,0x0,0x0,0xbf,0x80,0x0,0x0,0x3f,0x80,0x0,0x0,0x3f,0x80,0x0,0x0,0xbf,0x80,0x0,0x0,0xbf,0x80,0x0,0x0,0xbf,0x80,0x0,0x0,0xbf,0x80,0x0,0x0,0xbf,0x80,0x0,0x0,0xbf,0x80,0x0,0x0,0xbf,0x80,0x0,0x0,0x3f,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x46,0x61,0x63,0x65,0x53,0x65,0x74,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x1a,0x68,0x61,0x6e,0x64,0x6c,0x65,0x42,0x6f,0x78,0x54,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x6f,0x72,0x33,0x41,0x63,0x74,0x69,0x76,0x65,0x0,0x0,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xd,0x72,0x65,0x6e,0x64,0x65,0x72,0x43,0x61,0x63,0x68,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x4f,0x4e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x2c,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x54,0x52,0x41,0x4e,0x53,0x4c,0x41,0x54,0x4f,0x52,0x5f,0x53,0x54,0x59,0x4c,0x45,0x5f,0x41,0x43,0x54,0x49,0x56,0x45,0x2b,0x31,0x0,0x0,0x0,0xd,0x4e,0x6f,0x72,0x6d,0x61,0x6c,0x42,0x69,0x6e,0x64,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x4f,0x56,0x45,0x52,0x41,0x4c,0x4c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf,0x4d,0x61,0x74,0x65,0x72,0x69,0x61,0x6c,0x42,0x69,0x6e,0x64,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x4f,0x56,0x45,0x52,0x41,0x4c,0x4c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x4e,0x6f,0x72,0x6d,0x61,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x6,0x76,0x65,0x63,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x1,0xbf,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb,0x43,0x6f,0x6f,0x72,0x64,0x69,0x6e,0x61,0x74,0x65,0x33,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x70,0x6f,0x69,0x6e,0x74,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0xbf,0x80,0x0,0x0,0x3f,0x80,0x0,0x0,0x3f,0x80,0x0,0x0,0xbf,0x80,0x0,0x0,0x3f,0x80,0x0,0x0,0xbf,0x80,0x0,0x0,0xbf,0x80,0x0,0x0,0xbf,0x80,0x0,0x0,0xbf,0x80,0x0,0x0,0xbf,0x80,0x0,0x0,0xbf,0x80,0x0,0x0,0x3f,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x46,0x61,0x63,0x65,0x53,0x65,0x74,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x1a,0x68,0x61,0x6e,0x64,0x6c,0x65,0x42,0x6f,0x78,0x54,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x6f,0x72,0x34,0x41,0x63,0x74,0x69,0x76,0x65,0x0,0x0,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xd,0x72,0x65,0x6e,0x64,0x65,0x72,0x43,0x61,0x63,0x68,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x4f,0x4e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x2c,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x54,0x52,0x41,0x4e,0x53,0x4c,0x41,0x54,0x4f,0x52,0x5f,0x53,0x54,0x59,0x4c,0x45,0x5f,0x41,0x43,0x54,0x49,0x56,0x45,0x2b,0x31,0x0,0x0,0x0,0xd,0x4e,0x6f,0x72,0x6d,0x61,0x6c,0x42,0x69,0x6e,0x64,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x4f,0x56,0x45,0x52,0x41,0x4c,0x4c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf,0x4d,0x61,0x74,0x65,0x72,0x69,0x61,0x6c,0x42,0x69,0x6e,0x64,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x4f,0x56,0x45,0x52,0x41,0x4c,0x4c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x4e,0x6f,0x72,0x6d,0x61,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x6,0x76,0x65,0x63,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x1,0x3f,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb,0x43,0x6f,0x6f,0x72,0x64,0x69,0x6e,0x61,0x74,0x65,0x33,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x70,0x6f,0x69,0x6e,0x74,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x3f,0x80,0x0,0x0,0x3f,0x80,0x0,0x0,0x3f,0x80,0x0,0x0,0x3f,0x80,0x0,0x0,0x3f,0x80,0x0,0x0,0xbf,0x80,0x0,0x0,0x3f,0x80,0x0,0x0,0xbf,0x80,0x0,0x0,0xbf,0x80,0x0,0x0,0x3f,0x80,0x0,0x0,0xbf,0x80,0x0,0x0,0x3f,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x46,0x61,0x63,0x65,0x53,0x65,0x74,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x1a,0x68,0x61,0x6e,0x64,0x6c,0x65,0x42,0x6f,0x78,0x54,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x6f,0x72,0x35,0x41,0x63,0x74,0x69,0x76,0x65,0x0,0x0,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xd,0x72,0x65,0x6e,0x64,0x65,0x72,0x43,0x61,0x63,0x68,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x4f,0x4e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x2c,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x54,0x52,0x41,0x4e,0x53,0x4c,0x41,0x54,0x4f,0x52,0x5f,0x53,0x54,0x59,0x4c,0x45,0x5f,0x41,0x43,0x54,0x49,0x56,0x45,0x2b,0x31,0x0,0x0,0x0,0xd,0x4e,0x6f,0x72,0x6d,0x61,0x6c,0x42,0x69,0x6e,0x64,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x4f,0x56,0x45,0x52,0x41,0x4c,0x4c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf,0x4d,0x61,0x74,0x65,0x72,0x69,0x61,0x6c,0x42,0x69,0x6e,0x64,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x4f,0x56,0x45,0x52,0x41,0x4c,0x4c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x4e,0x6f,0x72,0x6d,0x61,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x6,0x76,0x65,0x63,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3f,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb,0x43,0x6f,0x6f,0x72,0x64,0x69,0x6e,0x61,0x74,0x65,0x33,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x70,0x6f,0x69,0x6e,0x74,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x3f,0x80,0x0,0x0,0x3f,0x80,0x0,0x0,0x3f,0x80,0x0,0x0,0x3f,0x80,0x0,0x0,0xbf,0x80,0x0,0x0,0x3f,0x80,0x0,0x0,0xbf,0x80,0x0,0x0,0xbf,0x80,0x0,0x0,0x3f,0x80,0x0,0x0,0xbf,0x80,0x0,0x0,0x3f,0x80,0x0,0x0,0x3f,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x46,0x61,0x63,0x65,0x53,0x65,0x74,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x1a,0x68,0x61,0x6e,0x64,0x6c,0x65,0x42,0x6f,0x78,0x54,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x6f,0x72,0x36,0x41,0x63,0x74,0x69,0x76,0x65,0x0,0x0,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xd,0x72,0x65,0x6e,0x64,0x65,0x72,0x43,0x61,0x63,0x68,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x4f,0x4e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x2c,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x54,0x52,0x41,0x4e,0x53,0x4c,0x41,0x54,0x4f,0x52,0x5f,0x53,0x54,0x59,0x4c,0x45,0x5f,0x41,0x43,0x54,0x49,0x56,0x45,0x2b,0x31,0x0,0x0,0x0,0xd,0x4e,0x6f,0x72,0x6d,0x61,0x6c,0x42,0x69,0x6e,0x64,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x4f,0x56,0x45,0x52,0x41,0x4c,0x4c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf,0x4d,0x61,0x74,0x65,0x72,0x69,0x61,0x6c,0x42,0x69,0x6e,0x64,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x4f,0x56,0x45,0x52,0x41,0x4c,0x4c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x4e,0x6f,0x72,0x6d,0x61,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x6,0x76,0x65,0x63,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xbf,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb,0x43,0x6f,0x6f,0x72,0x64,0x69,0x6e,0x61,0x74,0x65,0x33,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x70,0x6f,0x69,0x6e,0x74,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x3f,0x80,0x0,0x0,0x3f,0x80,0x0,0x0,0xbf,0x80,0x0,0x0,0x3f,0x80,0x0,0x0,0xbf,0x80,0x0,0x0,0xbf,0x80,0x0,0x0,0xbf,0x80,0x0,0x0,0xbf,0x80,0x0,0x0,0xbf,0x80,0x0,0x0,0xbf,0x80,0x0,0x0,0x3f,0x80,0x0,0x0,0xbf,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x46,0x61,0x63,0x65,0x53,0x65,0x74,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x22,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x53,0x43,0x41,0x4c,0x49,0x4e,0x47,0x5f,0x53,0x54,0x59,0x4c,0x45,0x2b,0x32,0x0,0x0,0x0,0x0,0x0,0x5,0x47,0x72,0x6f,0x75,0x70,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x0,0x0,0x0,0x8,0x4d,0x61,0x74,0x65,0x72,0x69,0x61,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0xc,0x64,0x69,0x66,0x66,0x75,0x73,0x65,0x43,0x6f,0x6c,0x6f,0x72,0x0,0x0,0x0,0x1,0x3f,0x0,0x0,0x0,0x3f,0x0,0x0,0x0,0x3f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xd,0x65,0x6d,0x69,0x73,0x73,0x69,0x76,0x65,0x43,0x6f,0x6c,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x3f,0x0,0x0,0x0,0x3f,0x0,0x0,0x0,0x3f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x9,0x44,0x72,0x61,0x77,0x53,0x74,0x79,0x6c,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x9,0x6c,0x69,0x6e,0x65,0x57,0x69,0x64,0x74,0x68,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x4c,0x69,0x67,0x68,0x74,0x4d,0x6f,0x64,0x65,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x6d,0x6f,0x64,0x65,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x50,0x48,0x4f,0x4e,0x47,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x43,0x6f,0x6d,0x70,0x6c,0x65,0x78,0x69,0x74,0x79,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x3c,0x23,0xd7,0xa,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf,0x4d,0x61,0x74,0x65,0x72,0x69,0x61,0x6c,0x42,0x69,0x6e,0x64,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x4f,0x56,0x45,0x52,0x41,0x4c,0x4c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x29,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x53,0x43,0x41,0x4c,0x49,0x4e,0x47,0x5f,0x53,0x54,0x59,0x4c,0x45,0x5f,0x41,0x43,0x54,0x49,0x56,0x45,0x2b,0x33,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x47,0x72,0x6f,0x75,0x70,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x0,0x0,0x0,0x8,0x4d,0x61,0x74,0x65,0x72,0x69,0x61,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0xc,0x64,0x69,0x66,0x66,0x75,0x73,0x65,0x43,0x6f,0x6c,0x6f,0x72,0x0,0x0,0x0,0x1,0x3f,0x0,0x0,0x0,0x3f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xd,0x65,0x6d,0x69,0x73,0x73,0x69,0x76,0x65,0x43,0x6f,0x6c,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x3f,0x0,0x0,0x0,0x3f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x9,0x44,0x72,0x61,0x77,0x53,0x74,0x79,0x6c,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x9,0x6c,0x69,0x6e,0x65,0x57,0x69,0x64,0x74,0x68,0x0,0x0,0x0,0x40,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x4c,0x69,0x67,0x68,0x74,0x4d,0x6f,0x64,0x65,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x6d,0x6f,0x64,0x65,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x50,0x48,0x4f,0x4e,0x47,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x43,0x6f,0x6d,0x70,0x6c,0x65,0x78,0x69,0x74,0x79,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x3c,0x23,0xd7,0xa,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf,0x4d,0x61,0x74,0x65,0x72,0x69,0x61,0x6c,0x42,0x69,0x6e,0x64,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x4f,0x56,0x45,0x52,0x41,0x4c,0x4c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x1f,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x45,0x58,0x54,0x52,0x55,0x44,0x45,0x52,0x5f,0x31,0x2b,0x34,0x0,0x0,0x0,0x0,0x5,0x47,0x72,0x6f,0x75,0x70,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x0,0x0,0x0,0xd,0x4e,0x6f,0x72,0x6d,0x61,0x6c,0x42,0x69,0x6e,0x64,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x12,0x50,0x45,0x52,0x5f,0x56,0x45,0x52,0x54,0x45,0x58,0x5f,0x49,0x4e,0x44,0x45,0x58,0x45,0x44,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb,0x43,0x6f,0x6f,0x72,0x64,0x69,0x6e,0x61,0x74,0x65,0x33,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x70,0x6f,0x69,0x6e,0x74,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3f,0xa0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x4c,0x69,0x6e,0x65,0x53,0x65,0x74,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb,0x54,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x69,0x6f,0x6e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xb,0x74,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x69,0x6f,0x6e,0x0,0x0,0x0,0x0,0x0,0x3f,0xa0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x43,0x6f,0x6d,0x70,0x6c,0x65,0x78,0x69,0x74,0x79,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x3c,0x23,0xd7,0xa,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x43,0x75,0x62,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x5,0x77,0x69,0x64,0x74,0x68,0x0,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x68,0x65,0x69,0x67,0x68,0x74,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x64,0x65,0x70,0x74,0x68,0x0,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x1f,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x45,0x58,0x54,0x52,0x55,0x44,0x45,0x52,0x5f,0x32,0x2b,0x35,0x0,0x0,0x0,0x0,0x5,0x47,0x72,0x6f,0x75,0x70,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x0,0x0,0x0,0xd,0x4e,0x6f,0x72,0x6d,0x61,0x6c,0x42,0x69,0x6e,0x64,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x12,0x50,0x45,0x52,0x5f,0x56,0x45,0x52,0x54,0x45,0x58,0x5f,0x49,0x4e,0x44,0x45,0x58,0x45,0x44,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb,0x43,0x6f,0x6f,0x72,0x64,0x69,0x6e,0x61,0x74,0x65,0x33,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x70,0x6f,0x69,0x6e,0x74,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xbf,0xa0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x4c,0x69,0x6e,0x65,0x53,0x65,0x74,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb,0x54,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x69,0x6f,0x6e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xb,0x74,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x69,0x6f,0x6e,0x0,0x0,0x0,0x0,0x0,0xbf,0xa0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x43,0x6f,0x6d,0x70,0x6c,0x65,0x78,0x69,0x74,0x79,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x3c,0x23,0xd7,0xa,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x43,0x75,0x62,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x5,0x77,0x69,0x64,0x74,0x68,0x0,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x68,0x65,0x69,0x67,0x68,0x74,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x64,0x65,0x70,0x74,0x68,0x0,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x1f,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x45,0x58,0x54,0x52,0x55,0x44,0x45,0x52,0x5f,0x33,0x2b,0x36,0x0,0x0,0x0,0x0,0x5,0x47,0x72,0x6f,0x75,0x70,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x0,0x0,0x0,0xd,0x4e,0x6f,0x72,0x6d,0x61,0x6c,0x42,0x69,0x6e,0x64,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x12,0x50,0x45,0x52,0x5f,0x56,0x45,0x52,0x54,0x45,0x58,0x5f,0x49,0x4e,0x44,0x45,0x58,0x45,0x44,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb,0x43,0x6f,0x6f,0x72,0x64,0x69,0x6e,0x61,0x74,0x65,0x33,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x70,0x6f,0x69,0x6e,0x74,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xbf,0xa0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x4c,0x69,0x6e,0x65,0x53,0x65,0x74,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb,0x54,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x69,0x6f,0x6e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xb,0x74,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x69,0x6f,0x6e,0x0,0xbf,0xa0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x43,0x6f,0x6d,0x70,0x6c,0x65,0x78,0x69,0x74,0x79,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x3c,0x23,0xd7,0xa,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x43,0x75,0x62,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x5,0x77,0x69,0x64,0x74,0x68,0x0,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x68,0x65,0x69,0x67,0x68,0x74,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x64,0x65,0x70,0x74,0x68,0x0,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x1f,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x45,0x58,0x54,0x52,0x55,0x44,0x45,0x52,0x5f,0x34,0x2b,0x37,0x0,0x0,0x0,0x0,0x5,0x47,0x72,0x6f,0x75,0x70,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x0,0x0,0x0,0xd,0x4e,0x6f,0x72,0x6d,0x61,0x6c,0x42,0x69,0x6e,0x64,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x12,0x50,0x45,0x52,0x5f,0x56,0x45,0x52,0x54,0x45,0x58,0x5f,0x49,0x4e,0x44,0x45,0x58,0x45,0x44,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb,0x43,0x6f,0x6f,0x72,0x64,0x69,0x6e,0x61,0x74,0x65,0x33,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x70,0x6f,0x69,0x6e,0x74,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3f,0xa0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x4c,0x69,0x6e,0x65,0x53,0x65,0x74,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb,0x54,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x69,0x6f,0x6e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xb,0x74,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x69,0x6f,0x6e,0x0,0x3f,0xa0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x43,0x6f,0x6d,0x70,0x6c,0x65,0x78,0x69,0x74,0x79,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x3c,0x23,0xd7,0xa,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x43,0x75,0x62,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x5,0x77,0x69,0x64,0x74,0x68,0x0,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x68,0x65,0x69,0x67,0x68,0x74,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x64,0x65,0x70,0x74,0x68,0x0,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x1f,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x45,0x58,0x54,0x52,0x55,0x44,0x45,0x52,0x5f,0x35,0x2b,0x38,0x0,0x0,0x0,0x0,0x5,0x47,0x72,0x6f,0x75,0x70,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x0,0x0,0x0,0xd,0x4e,0x6f,0x72,0x6d,0x61,0x6c,0x42,0x69,0x6e,0x64,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x12,0x50,0x45,0x52,0x5f,0x56,0x45,0x52,0x54,0x45,0x58,0x5f,0x49,0x4e,0x44,0x45,0x58,0x45,0x44,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb,0x43,0x6f,0x6f,0x72,0x64,0x69,0x6e,0x61,0x74,0x65,0x33,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x70,0x6f,0x69,0x6e,0x74,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3f,0xa0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x4c,0x69,0x6e,0x65,0x53,0x65,0x74,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb,0x54,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x69,0x6f,0x6e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xb,0x74,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x69,0x6f,0x6e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3f,0xa0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x43,0x6f,0x6d,0x70,0x6c,0x65,0x78,0x69,0x74,0x79,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x3c,0x23,0xd7,0xa,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x43,0x75,0x62,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x5,0x77,0x69,0x64,0x74,0x68,0x0,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x68,0x65,0x69,0x67,0x68,0x74,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x64,0x65,0x70,0x74,0x68,0x0,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x1f,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x45,0x58,0x54,0x52,0x55,0x44,0x45,0x52,0x5f,0x36,0x2b,0x39,0x0,0x0,0x0,0x0,0x5,0x47,0x72,0x6f,0x75,0x70,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x0,0x0,0x0,0xd,0x4e,0x6f,0x72,0x6d,0x61,0x6c,0x42,0x69,0x6e,0x64,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x12,0x50,0x45,0x52,0x5f,0x56,0x45,0x52,0x54,0x45,0x58,0x5f,0x49,0x4e,0x44,0x45,0x58,0x45,0x44,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb,0x43,0x6f,0x6f,0x72,0x64,0x69,0x6e,0x61,0x74,0x65,0x33,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x70,0x6f,0x69,0x6e,0x74,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xbf,0xa0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x4c,0x69,0x6e,0x65,0x53,0x65,0x74,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb,0x54,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x69,0x6f,0x6e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xb,0x74,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x69,0x6f,0x6e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xbf,0xa0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x43,0x6f,0x6d,0x70,0x6c,0x65,0x78,0x69,0x74,0x79,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x3c,0x23,0xd7,0xa,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x43,0x75,0x62,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x5,0x77,0x69,0x64,0x74,0x68,0x0,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x68,0x65,0x69,0x67,0x68,0x74,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x64,0x65,0x70,0x74,0x68,0x0,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x12,0x68,0x61,0x6e,0x64,0x6c,0x65,0x42,0x6f,0x78,0x45,0x78,0x74,0x72,0x75,0x64,0x65,0x72,0x31,0x0,0x0,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xd,0x72,0x65,0x6e,0x64,0x65,0x72,0x43,0x61,0x63,0x68,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x4f,0x4e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x22,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x53,0x43,0x41,0x4c,0x49,0x4e,0x47,0x5f,0x53,0x54,0x59,0x4c,0x45,0x2b,0x32,0x0,0x0,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x1f,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x45,0x58,0x54,0x52,0x55,0x44,0x45,0x52,0x5f,0x31,0x2b,0x34,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x12,0x68,0x61,0x6e,0x64,0x6c,0x65,0x42,0x6f,0x78,0x45,0x78,0x74,0x72,0x75,0x64,0x65,0x72,0x32,0x0,0x0,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xd,0x72,0x65,0x6e,0x64,0x65,0x72,0x43,0x61,0x63,0x68,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x4f,0x4e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x22,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44    	
    	};
    	return geom1;
    }
    
    private static int[] getGeom2() {
    	int[] geom2 = {
        		0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x53,0x43,0x41,0x4c,0x49,0x4e,0x47,0x5f,0x53,0x54,0x59,0x4c,0x45,0x2b,0x32,0x0,0x0,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x1f,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x45,0x58,0x54,0x52,0x55,0x44,0x45,0x52,0x5f,0x32,0x2b,0x35,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x12,0x68,0x61,0x6e,0x64,0x6c,0x65,0x42,0x6f,0x78,0x45,0x78,0x74,0x72,0x75,0x64,0x65,0x72,0x33,0x0,0x0,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xd,0x72,0x65,0x6e,0x64,0x65,0x72,0x43,0x61,0x63,0x68,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x4f,0x4e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x22,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x53,0x43,0x41,0x4c,0x49,0x4e,0x47,0x5f,0x53,0x54,0x59,0x4c,0x45,0x2b,0x32,0x0,0x0,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x1f,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x45,0x58,0x54,0x52,0x55,0x44,0x45,0x52,0x5f,0x33,0x2b,0x36,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x12,0x68,0x61,0x6e,0x64,0x6c,0x65,0x42,0x6f,0x78,0x45,0x78,0x74,0x72,0x75,0x64,0x65,0x72,0x34,0x0,0x0,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xd,0x72,0x65,0x6e,0x64,0x65,0x72,0x43,0x61,0x63,0x68,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x4f,0x4e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x22,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x53,0x43,0x41,0x4c,0x49,0x4e,0x47,0x5f,0x53,0x54,0x59,0x4c,0x45,0x2b,0x32,0x0,0x0,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x1f,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x45,0x58,0x54,0x52,0x55,0x44,0x45,0x52,0x5f,0x34,0x2b,0x37,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x12,0x68,0x61,0x6e,0x64,0x6c,0x65,0x42,0x6f,0x78,0x45,0x78,0x74,0x72,0x75,0x64,0x65,0x72,0x35,0x0,0x0,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xd,0x72,0x65,0x6e,0x64,0x65,0x72,0x43,0x61,0x63,0x68,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x4f,0x4e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x22,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x53,0x43,0x41,0x4c,0x49,0x4e,0x47,0x5f,0x53,0x54,0x59,0x4c,0x45,0x2b,0x32,0x0,0x0,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x1f,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x45,0x58,0x54,0x52,0x55,0x44,0x45,0x52,0x5f,0x35,0x2b,0x38,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x12,0x68,0x61,0x6e,0x64,0x6c,0x65,0x42,0x6f,0x78,0x45,0x78,0x74,0x72,0x75,0x64,0x65,0x72,0x36,0x0,0x0,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xd,0x72,0x65,0x6e,0x64,0x65,0x72,0x43,0x61,0x63,0x68,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x4f,0x4e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x22,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x53,0x43,0x41,0x4c,0x49,0x4e,0x47,0x5f,0x53,0x54,0x59,0x4c,0x45,0x2b,0x32,0x0,0x0,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x1f,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x45,0x58,0x54,0x52,0x55,0x44,0x45,0x52,0x5f,0x36,0x2b,0x39,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x18,0x68,0x61,0x6e,0x64,0x6c,0x65,0x42,0x6f,0x78,0x45,0x78,0x74,0x72,0x75,0x64,0x65,0x72,0x31,0x41,0x63,0x74,0x69,0x76,0x65,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xd,0x72,0x65,0x6e,0x64,0x65,0x72,0x43,0x61,0x63,0x68,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x4f,0x4e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x29,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x53,0x43,0x41,0x4c,0x49,0x4e,0x47,0x5f,0x53,0x54,0x59,0x4c,0x45,0x5f,0x41,0x43,0x54,0x49,0x56,0x45,0x2b,0x33,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x1f,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x45,0x58,0x54,0x52,0x55,0x44,0x45,0x52,0x5f,0x31,0x2b,0x34,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x18,0x68,0x61,0x6e,0x64,0x6c,0x65,0x42,0x6f,0x78,0x45,0x78,0x74,0x72,0x75,0x64,0x65,0x72,0x32,0x41,0x63,0x74,0x69,0x76,0x65,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xd,0x72,0x65,0x6e,0x64,0x65,0x72,0x43,0x61,0x63,0x68,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x4f,0x4e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x29,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x53,0x43,0x41,0x4c,0x49,0x4e,0x47,0x5f,0x53,0x54,0x59,0x4c,0x45,0x5f,0x41,0x43,0x54,0x49,0x56,0x45,0x2b,0x33,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x1f,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x45,0x58,0x54,0x52,0x55,0x44,0x45,0x52,0x5f,0x32,0x2b,0x35,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x18,0x68,0x61,0x6e,0x64,0x6c,0x65,0x42,0x6f,0x78,0x45,0x78,0x74,0x72,0x75,0x64,0x65,0x72,0x33,0x41,0x63,0x74,0x69,0x76,0x65,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xd,0x72,0x65,0x6e,0x64,0x65,0x72,0x43,0x61,0x63,0x68,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x4f,0x4e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x29,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x53,0x43,0x41,0x4c,0x49,0x4e,0x47,0x5f,0x53,0x54,0x59,0x4c,0x45,0x5f,0x41,0x43,0x54,0x49,0x56,0x45,0x2b,0x33,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x1f,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x45,0x58,0x54,0x52,0x55,0x44,0x45,0x52,0x5f,0x33,0x2b,0x36,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x18,0x68,0x61,0x6e,0x64,0x6c,0x65,0x42,0x6f,0x78,0x45,0x78,0x74,0x72,0x75,0x64,0x65,0x72,0x34,0x41,0x63,0x74,0x69,0x76,0x65,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xd,0x72,0x65,0x6e,0x64,0x65,0x72,0x43,0x61,0x63,0x68,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x4f,0x4e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x29,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x53,0x43,0x41,0x4c,0x49,0x4e,0x47,0x5f,0x53,0x54,0x59,0x4c,0x45,0x5f,0x41,0x43,0x54,0x49,0x56,0x45,0x2b,0x33,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x1f,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x45,0x58,0x54,0x52,0x55,0x44,0x45,0x52,0x5f,0x34,0x2b,0x37,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x18,0x68,0x61,0x6e,0x64,0x6c,0x65,0x42,0x6f,0x78,0x45,0x78,0x74,0x72,0x75,0x64,0x65,0x72,0x35,0x41,0x63,0x74,0x69,0x76,0x65,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xd,0x72,0x65,0x6e,0x64,0x65,0x72,0x43,0x61,0x63,0x68,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x4f,0x4e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x29,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x53,0x43,0x41,0x4c,0x49,0x4e,0x47,0x5f,0x53,0x54,0x59,0x4c,0x45,0x5f,0x41,0x43,0x54,0x49,0x56,0x45,0x2b,0x33,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x1f,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x45,0x58,0x54,0x52,0x55,0x44,0x45,0x52,0x5f,0x35,0x2b,0x38,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x18,0x68,0x61,0x6e,0x64,0x6c,0x65,0x42,0x6f,0x78,0x45,0x78,0x74,0x72,0x75,0x64,0x65,0x72,0x36,0x41,0x63,0x74,0x69,0x76,0x65,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xd,0x72,0x65,0x6e,0x64,0x65,0x72,0x43,0x61,0x63,0x68,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x4f,0x4e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x29,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x53,0x43,0x41,0x4c,0x49,0x4e,0x47,0x5f,0x53,0x54,0x59,0x4c,0x45,0x5f,0x41,0x43,0x54,0x49,0x56,0x45,0x2b,0x33,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x1f,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x45,0x58,0x54,0x52,0x55,0x44,0x45,0x52,0x5f,0x36,0x2b,0x39,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x1f,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x55,0x4e,0x49,0x46,0x4f,0x52,0x4d,0x5f,0x31,0x2b,0x31,0x30,0x0,0x0,0x0,0x0,0x5,0x47,0x72,0x6f,0x75,0x70,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0xb,0x54,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x69,0x6f,0x6e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xb,0x74,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x69,0x6f,0x6e,0x0,0x3f,0x80,0x0,0x0,0x3f,0x80,0x0,0x0,0x3f,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x43,0x6f,0x6d,0x70,0x6c,0x65,0x78,0x69,0x74,0x79,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x3c,0x23,0xd7,0xa,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x43,0x75,0x62,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x5,0x77,0x69,0x64,0x74,0x68,0x0,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x68,0x65,0x69,0x67,0x68,0x74,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x64,0x65,0x70,0x74,0x68,0x0,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x1f,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x55,0x4e,0x49,0x46,0x4f,0x52,0x4d,0x5f,0x32,0x2b,0x31,0x31,0x0,0x0,0x0,0x0,0x5,0x47,0x72,0x6f,0x75,0x70,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0xb,0x54,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x69,0x6f,0x6e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xb,0x74,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x69,0x6f,0x6e,0x0,0x3f,0x80,0x0,0x0,0x3f,0x80,0x0,0x0,0xbf,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x43,0x6f,0x6d,0x70,0x6c,0x65,0x78,0x69,0x74,0x79,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x3c,0x23,0xd7,0xa,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x43,0x75,0x62,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x5,0x77,0x69,0x64,0x74,0x68,0x0,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x68,0x65,0x69,0x67,0x68,0x74,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x64,0x65,0x70,0x74,0x68,0x0,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x1f,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x55,0x4e,0x49,0x46,0x4f,0x52,0x4d,0x5f,0x33,0x2b,0x31,0x32,0x0,0x0,0x0,0x0,0x5,0x47,0x72,0x6f,0x75,0x70,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0xb,0x54,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x69,0x6f,0x6e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xb,0x74,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x69,0x6f,0x6e,0x0,0x3f,0x80,0x0,0x0,0xbf,0x80,0x0,0x0,0x3f,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x43,0x6f,0x6d,0x70,0x6c,0x65,0x78,0x69,0x74,0x79,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x3c,0x23,0xd7,0xa,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x43,0x75,0x62,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x5,0x77,0x69,0x64,0x74,0x68,0x0,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x68,0x65,0x69,0x67,0x68,0x74,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x64,0x65,0x70,0x74,0x68,0x0,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x1f,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x55,0x4e,0x49,0x46,0x4f,0x52,0x4d,0x5f,0x34,0x2b,0x31,0x33,0x0,0x0,0x0,0x0,0x5,0x47,0x72,0x6f,0x75,0x70,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0xb,0x54,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x69,0x6f,0x6e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xb,0x74,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x69,0x6f,0x6e,0x0,0x3f,0x80,0x0,0x0,0xbf,0x80,0x0,0x0,0xbf,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x43,0x6f,0x6d,0x70,0x6c,0x65,0x78,0x69,0x74,0x79,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x3c,0x23,0xd7,0xa,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x43,0x75,0x62,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x5,0x77,0x69,0x64,0x74,0x68,0x0,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x68,0x65,0x69,0x67,0x68,0x74,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x64,0x65,0x70,0x74,0x68,0x0,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x1f,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x55,0x4e,0x49,0x46,0x4f,0x52,0x4d,0x5f,0x35,0x2b,0x31,0x34,0x0,0x0,0x0,0x0,0x5,0x47,0x72,0x6f,0x75,0x70,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0xb,0x54,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x69,0x6f,0x6e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xb,0x74,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x69,0x6f,0x6e,0x0,0xbf,0x80,0x0,0x0,0x3f,0x80,0x0,0x0,0x3f,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x43,0x6f,0x6d,0x70,0x6c,0x65,0x78,0x69,0x74,0x79,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x3c,0x23,0xd7,0xa,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x43,0x75,0x62,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x5,0x77,0x69,0x64,0x74,0x68,0x0,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x68,0x65,0x69,0x67,0x68,0x74,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x64,0x65,0x70,0x74,0x68,0x0,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x1f,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x55,0x4e,0x49,0x46,0x4f,0x52,0x4d,0x5f,0x36,0x2b,0x31,0x35,0x0,0x0,0x0,0x0,0x5,0x47,0x72,0x6f,0x75,0x70,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0xb,0x54,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x69,0x6f,0x6e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xb,0x74,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x69,0x6f,0x6e,0x0,0xbf,0x80,0x0,0x0,0x3f,0x80,0x0,0x0,0xbf,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x43,0x6f,0x6d,0x70,0x6c,0x65,0x78,0x69,0x74,0x79,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x3c,0x23,0xd7,0xa,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x43,0x75,0x62,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x5,0x77,0x69,0x64,0x74,0x68,0x0,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x68,0x65,0x69,0x67,0x68,0x74,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x64,0x65,0x70,0x74,0x68,0x0,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x1f,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x55,0x4e,0x49,0x46,0x4f,0x52,0x4d,0x5f,0x37,0x2b,0x31,0x36,0x0,0x0,0x0,0x0,0x5,0x47,0x72,0x6f,0x75,0x70,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0xb,0x54,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x69,0x6f,0x6e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xb,0x74,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x69,0x6f,0x6e,0x0,0xbf,0x80,0x0,0x0,0xbf,0x80,0x0,0x0,0x3f,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x43,0x6f,0x6d,0x70,0x6c,0x65,0x78,0x69,0x74,0x79,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x3c,0x23,0xd7,0xa,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x43,0x75,0x62,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x5,0x77,0x69,0x64,0x74,0x68,0x0,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x68,0x65,0x69,0x67,0x68,0x74,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x64,0x65,0x70,0x74,0x68,0x0,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x1f,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x55,0x4e,0x49,0x46,0x4f,0x52,0x4d,0x5f,0x38,0x2b,0x31,0x37,0x0,0x0,0x0,0x0,0x5,0x47,0x72,0x6f,0x75,0x70,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0xb,0x54,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x69,0x6f,0x6e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xb,0x74,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x69,0x6f,0x6e,0x0,0xbf,0x80,0x0,0x0,0xbf,0x80,0x0,0x0,0xbf,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x43,0x6f,0x6d,0x70,0x6c,0x65,0x78,0x69,0x74,0x79,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x3c,0x23,0xd7,0xa,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x43,0x75,0x62,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x5,0x77,0x69,0x64,0x74,0x68,0x0,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x68,0x65,0x69,0x67,0x68,0x74,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x64,0x65,0x70,0x74,0x68,0x0,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x11,0x68,0x61,0x6e,0x64,0x6c,0x65,0x42,0x6f,0x78,0x55,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x31,0x0,0x0,0x0,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xd,0x72,0x65,0x6e,0x64,0x65,0x72,0x43,0x61,0x63,0x68,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x4f,0x4e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x22,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x53,0x43,0x41,0x4c,0x49,0x4e,0x47,0x5f,0x53,0x54,0x59,0x4c,0x45,0x2b,0x32,0x0,0x0,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x1f,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x55,0x4e,0x49,0x46,0x4f,0x52,0x4d,0x5f,0x31,0x2b,0x31,0x30,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x11,0x68,0x61,0x6e,0x64,0x6c,0x65,0x42,0x6f,0x78,0x55,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x32,0x0,0x0,0x0,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xd,0x72,0x65,0x6e,0x64,0x65,0x72,0x43,0x61,0x63,0x68,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x4f,0x4e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x22,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x53,0x43,0x41,0x4c,0x49,0x4e,0x47,0x5f,0x53,0x54,0x59,0x4c,0x45,0x2b,0x32,0x0,0x0,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x1f,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x55,0x4e,0x49,0x46,0x4f,0x52,0x4d,0x5f,0x32,0x2b,0x31,0x31,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x11,0x68,0x61,0x6e,0x64,0x6c,0x65,0x42,0x6f,0x78,0x55,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x33,0x0,0x0,0x0,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xd,0x72,0x65,0x6e,0x64,0x65,0x72,0x43,0x61,0x63,0x68,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x4f,0x4e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x22,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x53,0x43,0x41,0x4c,0x49,0x4e,0x47,0x5f,0x53,0x54,0x59,0x4c,0x45,0x2b,0x32,0x0,0x0,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x1f,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x55,0x4e,0x49,0x46,0x4f,0x52,0x4d,0x5f,0x33,0x2b,0x31,0x32,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x11,0x68,0x61,0x6e,0x64,0x6c,0x65,0x42,0x6f,0x78,0x55,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x34,0x0,0x0,0x0,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xd,0x72,0x65,0x6e,0x64,0x65,0x72,0x43,0x61,0x63,0x68,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x4f,0x4e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x22,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x53,0x43,0x41,0x4c,0x49,0x4e,0x47,0x5f,0x53,0x54,0x59,0x4c,0x45,0x2b,0x32,0x0,0x0,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x1f,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x55,0x4e,0x49,0x46,0x4f,0x52,0x4d,0x5f,0x34,0x2b,0x31,0x33,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x11,0x68,0x61,0x6e,0x64,0x6c,0x65,0x42,0x6f,0x78,0x55,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x35,0x0,0x0,0x0,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xd,0x72,0x65,0x6e,0x64,0x65,0x72,0x43,0x61,0x63,0x68,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x4f,0x4e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x22,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x53,0x43,0x41,0x4c,0x49,0x4e,0x47,0x5f,0x53,0x54,0x59,0x4c,0x45,0x2b,0x32,0x0,0x0,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x1f,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x55,0x4e,0x49,0x46,0x4f,0x52,0x4d,0x5f,0x35,0x2b,0x31,0x34,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x11,0x68,0x61,0x6e,0x64,0x6c,0x65,0x42,0x6f,0x78,0x55,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x36,0x0,0x0,0x0,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xd,0x72,0x65,0x6e,0x64,0x65,0x72,0x43,0x61,0x63,0x68,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x4f,0x4e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x22,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x53,0x43,0x41,0x4c,0x49,0x4e,0x47,0x5f,0x53,0x54,0x59,0x4c,0x45,0x2b,0x32,0x0,0x0,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x1f,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x55,0x4e,0x49,0x46,0x4f,0x52,0x4d,0x5f,0x36,0x2b,0x31,0x35,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x11,0x68,0x61,0x6e,0x64,0x6c,0x65,0x42,0x6f,0x78,0x55,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x37,0x0,0x0,0x0,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xd,0x72,0x65,0x6e,0x64,0x65,0x72,0x43,0x61,0x63,0x68,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x4f,0x4e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x22,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x53,0x43,0x41,0x4c,0x49,0x4e,0x47,0x5f,0x53,0x54,0x59,0x4c,0x45,0x2b,0x32,0x0,0x0,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x1f,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x55,0x4e,0x49,0x46,0x4f,0x52,0x4d,0x5f,0x37,0x2b,0x31,0x36,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x11,0x68,0x61,0x6e,0x64,0x6c,0x65,0x42,0x6f,0x78,0x55,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x38,0x0,0x0,0x0,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xd,0x72,0x65,0x6e,0x64,0x65,0x72,0x43,0x61,0x63,0x68,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x4f,0x4e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x22,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x53,0x43,0x41,0x4c,0x49,0x4e,0x47,0x5f,0x53,0x54,0x59,0x4c,0x45,0x2b,0x32,0x0,0x0,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x1f,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x55,0x4e,0x49,0x46,0x4f,0x52,0x4d,0x5f,0x38,0x2b,0x31,0x37,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x17,0x68,0x61,0x6e,0x64,0x6c,0x65,0x42,0x6f,0x78,0x55,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x31,0x41,0x63,0x74,0x69,0x76,0x65,0x0,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xd,0x72,0x65,0x6e,0x64,0x65,0x72,0x43,0x61,0x63,0x68,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x4f,0x4e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x29,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x53,0x43,0x41,0x4c,0x49,0x4e,0x47,0x5f,0x53,0x54,0x59,0x4c,0x45,0x5f,0x41,0x43,0x54,0x49,0x56,0x45,0x2b,0x33,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x1f,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x55,0x4e,0x49,0x46,0x4f,0x52,0x4d,0x5f,0x31,0x2b,0x31,0x30,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x17,0x68,0x61,0x6e,0x64,0x6c,0x65,0x42,0x6f,0x78,0x55,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x32,0x41,0x63,0x74,0x69,0x76,0x65,0x0,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xd,0x72,0x65,0x6e,0x64,0x65,0x72,0x43,0x61,0x63,0x68,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x4f,0x4e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x29,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x53,0x43,0x41,0x4c,0x49,0x4e,0x47,0x5f,0x53,0x54,0x59,0x4c,0x45,0x5f,0x41,0x43,0x54,0x49,0x56,0x45,0x2b,0x33,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x1f,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x55,0x4e,0x49,0x46,0x4f,0x52,0x4d,0x5f,0x32,0x2b,0x31,0x31,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x17,0x68,0x61,0x6e,0x64,0x6c,0x65,0x42,0x6f,0x78,0x55,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x33,0x41,0x63,0x74,0x69,0x76,0x65,0x0,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xd,0x72,0x65,0x6e,0x64,0x65,0x72,0x43,0x61,0x63,0x68,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x4f,0x4e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x29,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x53,0x43,0x41,0x4c,0x49,0x4e,0x47,0x5f,0x53,0x54,0x59,0x4c,0x45,0x5f,0x41,0x43,0x54,0x49,0x56,0x45,0x2b,0x33,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x1f,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x55,0x4e,0x49,0x46,0x4f,0x52,0x4d,0x5f,0x33,0x2b,0x31,0x32,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x17,0x68,0x61,0x6e,0x64,0x6c,0x65,0x42,0x6f,0x78,0x55,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x34,0x41,0x63,0x74,0x69,0x76,0x65,0x0,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xd,0x72,0x65,0x6e,0x64,0x65,0x72,0x43,0x61,0x63,0x68,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x4f,0x4e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x29,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x53,0x43,0x41,0x4c,0x49,0x4e,0x47,0x5f,0x53,0x54,0x59,0x4c,0x45,0x5f,0x41,0x43,0x54,0x49,0x56,0x45,0x2b,0x33,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x1f,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x55,0x4e,0x49,0x46,0x4f,0x52,0x4d,0x5f,0x34,0x2b,0x31,0x33,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x17,0x68,0x61,0x6e,0x64,0x6c,0x65,0x42,0x6f,0x78,0x55,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x35,0x41,0x63,0x74,0x69,0x76,0x65,0x0,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xd,0x72,0x65,0x6e,0x64,0x65,0x72,0x43,0x61,0x63,0x68,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x4f,0x4e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x29,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x53,0x43,0x41,0x4c,0x49,0x4e,0x47,0x5f,0x53,0x54,0x59,0x4c,0x45,0x5f,0x41,0x43,0x54,0x49,0x56,0x45,0x2b,0x33,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x1f,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x55,0x4e,0x49,0x46,0x4f,0x52,0x4d,0x5f,0x35,0x2b,0x31,0x34,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x17,0x68,0x61,0x6e,0x64,0x6c,0x65,0x42,0x6f,0x78,0x55,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x36,0x41,0x63,0x74,0x69,0x76,0x65,0x0,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xd,0x72,0x65,0x6e,0x64,0x65,0x72,0x43,0x61,0x63,0x68,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x4f,0x4e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x29,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x53,0x43,0x41,0x4c,0x49,0x4e,0x47,0x5f,0x53,0x54,0x59,0x4c,0x45,0x5f,0x41,0x43,0x54,0x49,0x56,0x45,0x2b,0x33,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x1f,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x55,0x4e,0x49,0x46,0x4f,0x52,0x4d,0x5f,0x36,0x2b,0x31,0x35,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x17,0x68,0x61,0x6e,0x64,0x6c,0x65,0x42,0x6f,0x78,0x55,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x37,0x41,0x63,0x74,0x69,0x76,0x65,0x0,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xd,0x72,0x65,0x6e,0x64,0x65,0x72,0x43,0x61,0x63,0x68,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x4f,0x4e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x29,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x53,0x43,0x41,0x4c,0x49,0x4e,0x47,0x5f,0x53,0x54,0x59,0x4c,0x45,0x5f,0x41,0x43,0x54,0x49,0x56,0x45,0x2b,0x33,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x1f,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x55,0x4e,0x49,0x46,0x4f,0x52,0x4d,0x5f,0x37,0x2b,0x31,0x36,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x17,0x68,0x61,0x6e,0x64,0x6c,0x65,0x42,0x6f,0x78,0x55,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x38,0x41,0x63,0x74,0x69,0x76,0x65,0x0,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xd,0x72,0x65,0x6e,0x64,0x65,0x72,0x43,0x61,0x63,0x68,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x4f,0x4e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x29,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x53,0x43,0x41,0x4c,0x49,0x4e,0x47,0x5f,0x53,0x54,0x59,0x4c,0x45,0x5f,0x41,0x43,0x54,0x49,0x56,0x45,0x2b,0x33,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x1f,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x55,0x4e,0x49,0x46,0x4f,0x52,0x4d,0x5f,0x38,0x2b,0x31,0x37,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x21,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x41,0x52,0x52,0x4f,0x57,0x5f,0x53,0x54,0x59,0x4c,0x45,0x2b,0x31,0x38,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x47,0x72,0x6f,0x75,0x70,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x0,0x0,0x0,0x9,0x50,0x69,0x63,0x6b,0x53,0x74,0x79,0x6c,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x73,0x74,0x79,0x6c,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x55,0x4e,0x50,0x49,0x43,0x4b,0x41,0x42,0x4c,0x45,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x4d,0x61,0x74,0x65,0x72,0x69,0x61,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0xc,0x64,0x69,0x66,0x66,0x75,0x73,0x65,0x43,0x6f,0x6c,0x6f,0x72,0x0,0x0,0x0,0x1,0x3e,0xb8,0x51,0xec,0x3d,0x4c,0xcc,0xcd,0x3e,0xe1,0x47,0xae,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xd,0x65,0x6d,0x69,0x73,0x73,0x69,0x76,0x65,0x43,0x6f,0x6c,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x3e,0xb8,0x51,0xec,0x3d,0x4c,0xcc,0xcd,0x3e,0xe1,0x47,0xae,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x9,0x44,0x72,0x61,0x77,0x53,0x74,0x79,0x6c,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x9,0x6c,0x69,0x6e,0x65,0x57,0x69,0x64,0x74,0x68,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x4c,0x69,0x67,0x68,0x74,0x4d,0x6f,0x64,0x65,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x6d,0x6f,0x64,0x65,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x50,0x48,0x4f,0x4e,0x47,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x43,0x6f,0x6d,0x70,0x6c,0x65,0x78,0x69,0x74,0x79,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x3c,0x23,0xd7,0xa,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf,0x4d,0x61,0x74,0x65,0x72,0x69,0x61,0x6c,0x42,0x69,0x6e,0x64,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x4f,0x56,0x45,0x52,0x41,0x4c,0x4c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x1b,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x41,0x52,0x52,0x4f,0x57,0x2b,0x31,0x39,0x0,0x0,0x0,0x0,0x5,0x47,0x72,0x6f,0x75,0x70,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x0,0x0,0xd,0x4e,0x6f,0x72,0x6d,0x61,0x6c,0x42,0x69,0x6e,0x64,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x12,0x50,0x45,0x52,0x5f,0x56,0x45,0x52,0x54,0x45,0x58,0x5f,0x49,0x4e,0x44,0x45,0x58,0x45,0x44,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf,0x4d,0x61,0x74,0x65,0x72,0x69,0x61,0x6c,0x42,0x69,0x6e,0x64,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x4f,0x56,0x45,0x52,0x41,0x4c,0x4c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb,0x43,0x6f,0x6f,0x72,0x64,0x69,0x6e,0x61,0x74,0x65,0x33,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x70,0x6f,0x69,0x6e,0x74,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x4c,0x69,0x6e,0x65,0x53,0x65,0x74,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x43,0x6f,0x6d,0x70,0x6c,0x65,0x78,0x69,0x74,0x79,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x3e,0x99,0x99,0x9a,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb,0x54,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x69,0x6f,0x6e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xb,0x74,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x69,0x6f,0x6e,0x0,0x0,0x0,0x0,0x0,0x3f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x53,0x63,0x61,0x6c,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xb,0x73,0x63,0x61,0x6c,0x65,0x46,0x61,0x63,0x74,0x6f,0x72,0x0,0x3f,0x40,0x0,0x0,0x3f,0x40,0x0,0x0,0x3f,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x43,0x6f,0x6e,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0xc,0x62,0x6f,0x74,0x74,0x6f,0x6d,0x52,0x61,0x64,0x69,0x75,0x73,0x3d,0x4c,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x68,0x65,0x69,0x67,0x68,0x74,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0xf,0x68,0x61,0x6e,0x64,0x6c,0x65,0x42,0x6f,0x78,0x41,0x72,0x72,0x6f,0x77,0x31,0x0,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xd,0x72,0x65,0x6e,0x64,0x65,0x72,0x43,0x61,0x63,0x68,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x4f,0x4e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x21,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x41,0x52,0x52,0x4f,0x57,0x5f,0x53,0x54,0x59,0x4c,0x45,0x2b,0x31,0x38,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x1b,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x41,0x52,0x52,0x4f,0x57,0x2b,0x31,0x39,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0xf,0x68,0x61,0x6e,0x64,0x6c,0x65,0x42,0x6f,0x78,0x41,0x72,0x72,0x6f,0x77,0x32,0x0,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xd,0x72,0x65,0x6e,0x64,0x65,0x72,0x43,0x61,0x63,0x68,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x4f,0x4e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0xb,0x52,0x6f,0x74,0x61,0x74,0x69,0x6f,0x6e,0x58,0x59,0x5a,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x4,0x61,0x78,0x69,0x73,0x0,0x0,0x0,0x1,0x58,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x61,0x6e,0x67,0x6c,0x65,0x0,0x0,0x0,0x40,0x49,0xf,0xd0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x21,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x41,0x52,0x52,0x4f,0x57,0x5f,0x53,0x54,0x59,0x4c,0x45,0x2b,0x31,0x38,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x1b,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x41,0x52,0x52,0x4f,0x57,0x2b,0x31,0x39,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0xf,0x68,0x61,0x6e,0x64,0x6c,0x65,0x42,0x6f,0x78,0x41,0x72,0x72,0x6f,0x77,0x33,0x0,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xd,0x72,0x65,0x6e,0x64,0x65,0x72,0x43,0x61,0x63,0x68,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x4f,0x4e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0xb,0x52,0x6f,0x74,0x61,0x74,0x69,0x6f,0x6e,0x58,0x59,0x5a,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x4,0x61,0x78,0x69,0x73,0x0,0x0,0x0,0x1,0x5a,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x61,0x6e,0x67,0x6c,0x65,0x0,0x0,0x0,0x3f,0xc9,0xf,0xa6,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x21,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x41,0x52,0x52,0x4f,0x57,0x5f,0x53,0x54,0x59,0x4c,0x45,0x2b,0x31,0x38,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x1b,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x41,0x52,0x52,0x4f,0x57,0x2b,0x31,0x39,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0xf,0x68,0x61,0x6e,0x64,0x6c,0x65,0x42,0x6f,0x78,0x41,0x72,0x72,0x6f,0x77,0x34,0x0,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xd,0x72,0x65,0x6e,0x64,0x65,0x72,0x43,0x61,0x63,0x68,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x4f,0x4e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0xb,0x52,0x6f,0x74,0x61,0x74,0x69,0x6f,0x6e,0x58,0x59,0x5a,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x4,0x61,0x78,0x69,0x73,0x0,0x0,0x0,0x1,0x5a,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x61,0x6e,0x67,0x6c,0x65,0x0,0x0,0x0,0xbf,0xc9,0xf,0xa6,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x21,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x41,0x52,0x52,0x4f,0x57,0x5f,0x53,0x54,0x59,0x4c,0x45,0x2b,0x31,0x38,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x1b,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x41,0x52,0x52,0x4f,0x57,0x2b,0x31,0x39,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0xf,0x68,0x61,0x6e,0x64,0x6c,0x65,0x42,0x6f,0x78,0x41,0x72,0x72,0x6f,0x77,0x35,0x0,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xd,0x72,0x65,0x6e,0x64,0x65,0x72,0x43,0x61,0x63,0x68,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x4f,0x4e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0xb,0x52,0x6f,0x74,0x61,0x74,0x69,0x6f,0x6e,0x58,0x59,0x5a,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x4,0x61,0x78,0x69,0x73,0x0,0x0,0x0,0x1,0x58,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x61,0x6e,0x67,0x6c,0x65,0x0,0x0,0x0,0x3f,0xc9,0xf,0xa6,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x21,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x41,0x52,0x52,0x4f,0x57,0x5f,0x53,0x54,0x59,0x4c,0x45,0x2b,0x31,0x38,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x1b,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x41,0x52,0x52,0x4f,0x57,0x2b,0x31,0x39,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0xf,0x68,0x61,0x6e,0x64,0x6c,0x65,0x42,0x6f,0x78,0x41,0x72,0x72,0x6f,0x77,0x36,0x0,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xd,0x72,0x65,0x6e,0x64,0x65,0x72,0x43,0x61,0x63,0x68,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x4f,0x4e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0xb,0x52,0x6f,0x74,0x61,0x74,0x69,0x6f,0x6e,0x58,0x59,0x5a,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x4,0x61,0x78,0x69,0x73,0x0,0x0,0x0,0x1,0x58,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x61,0x6e,0x67,0x6c,0x65,0x0,0x0,0x0,0xbf,0xc9,0xf,0xa6,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x21,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x41,0x52,0x52,0x4f,0x57,0x5f,0x53,0x54,0x59,0x4c,0x45,0x2b,0x31,0x38,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x1b,0x48,0x41,0x4e,0x44,0x4c,0x45,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x41,0x52,0x52,0x4f,0x57,0x2b,0x31,0x39,0x0
    	};
    	return geom2;
    }
	
////////////////////////////////////////////////////////////////////////
//
// Description:
//    Constructor
//
public SoHandleBoxDragger()
//
////////////////////////////////////////////////////////////////////////
{
	kitHeader.SO_KIT_CONSTRUCTOR(SoHandleBoxDragger.class);

    isBuiltIn = true;

    // Don't create this by default. It's only really put into use
    // if this dragger is put inside a manipulator.
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(surroundScale,"surroundScale", SoSurroundScale.class, 
                                true, "topSeparator", "geomSeparator",true);

    // These parts will all go under the geomSeparator, for efficient 
    // rendering
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(drawStyle,"drawStyle", SoDrawStyle.class, true,
                                "geomSeparator","",false);

    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(translator1Switch,"translator1Switch", SoSwitch.class, true,
                                "geomSeparator","",false);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(translator1,"translator1", SoSeparator.class, true,
                                "translator1Switch","",true);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(translator1Active,"translator1Active", SoSeparator.class, true,
                                "translator1Switch","",true);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(translator2Switch,"translator2Switch", SoSwitch.class, true,
                                "geomSeparator","",false);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(translator2,"translator2", SoSeparator.class, true,
                                "translator2Switch","",true);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(translator2Active,"translator2Active", SoSeparator.class, true,
                                "translator2Switch","",true);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(translator3Switch,"translator3Switch", SoSwitch.class, true,
                                "geomSeparator","",false);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(translator3,"translator3", SoSeparator.class, true,
                                "translator3Switch","",true);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(translator3Active,"translator3Active", SoSeparator.class, true,
                                "translator3Switch","",true);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(translator4Switch,"translator4Switch", SoSwitch.class, true,
                                "geomSeparator","",false);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(translator4,"translator4", SoSeparator.class, true,
                                "translator4Switch","",true);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(translator4Active,"translator4Active", SoSeparator.class, true,
                                "translator4Switch","",true);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(translator5Switch,"translator5Switch", SoSwitch.class, true,
                                "geomSeparator","",false);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(translator5,"translator5", SoSeparator.class, true,
                                "translator5Switch","",true);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(translator5Active,"translator5Active", SoSeparator.class, true,
                                "translator5Switch","",true);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(translator6Switch,"translator6Switch", SoSwitch.class, true,
                                "geomSeparator","",false);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(translator6,"translator6", SoSeparator.class, true,
                                "translator6Switch","",true);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(translator6Active,"translator6Active", SoSeparator.class, true,
                                "translator6Switch","",true);

    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(extruder1Switch,"extruder1Switch", SoSwitch.class, true,
                                "geomSeparator","",false);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(extruder1,"extruder1", SoSeparator.class, true,
                                "extruder1Switch","",true);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(extruder1Active,"extruder1Active", SoSeparator.class, true,
                                "extruder1Switch","",true);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(extruder2Switch,"extruder2Switch", SoSwitch.class, true,
                                "geomSeparator","",false);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(extruder2,"extruder2", SoSeparator.class, true,
                                "extruder2Switch","",true);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(extruder2Active,"extruder2Active", SoSeparator.class, true,
                                "extruder2Switch","",true);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(extruder3Switch,"extruder3Switch", SoSwitch.class, true,
                                "geomSeparator","",false);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(extruder3,"extruder3", SoSeparator.class, true,
                                "extruder3Switch","",true);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(extruder3Active,"extruder3Active", SoSeparator.class, true,
                                "extruder3Switch","",true);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(extruder4Switch,"extruder4Switch", SoSwitch.class, true,
                                "geomSeparator","",false);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(extruder4,"extruder4", SoSeparator.class, true,
                                "extruder4Switch","",true);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(extruder4Active,"extruder4Active", SoSeparator.class, true,
                                "extruder4Switch","",true);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(extruder5Switch,"extruder5Switch", SoSwitch.class, true,
                                "geomSeparator","",false);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(extruder5,"extruder5", SoSeparator.class, true,
                                "extruder5Switch","",true);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(extruder5Active,"extruder5Active", SoSeparator.class, true,
                                "extruder5Switch","",true);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(extruder6Switch,"extruder6Switch", SoSwitch.class, true,
                                "geomSeparator","",false);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(extruder6,"extruder6", SoSeparator.class, true,
                                "extruder6Switch","",true);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(extruder6Active,"extruder6Active", SoSeparator.class, true,
                                "extruder6Switch","",true);

    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(uniform1Switch,"uniform1Switch", SoSwitch.class, true,
                                "geomSeparator","",false);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(uniform1,"uniform1", SoSeparator.class, true,
                                "uniform1Switch","",true);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(uniform1Active,"uniform1Active", SoSeparator.class, true,
                                "uniform1Switch","",true);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(uniform2Switch,"uniform2Switch", SoSwitch.class, true,
                                "geomSeparator","",false);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(uniform2,"uniform2", SoSeparator.class, true,
                                "uniform2Switch","",true);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(uniform2Active,"uniform2Active", SoSeparator.class, true,
                                "uniform2Switch","",true);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(uniform3Switch,"uniform3Switch", SoSwitch.class, true,
                                "geomSeparator","",false);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(uniform3,"uniform3", SoSeparator.class, true,
                                "uniform3Switch","",true);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(uniform3Active,"uniform3Active", SoSeparator.class, true,
                                "uniform3Switch","",true);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(uniform4Switch,"uniform4Switch", SoSwitch.class, true,
                                "geomSeparator","",false);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(uniform4,"uniform4", SoSeparator.class, true,
                                "uniform4Switch","",true);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(uniform4Active,"uniform4Active", SoSeparator.class, true,
                                "uniform4Switch","",true);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(uniform5Switch,"uniform5Switch", SoSwitch.class, true,
                                "geomSeparator","",false);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(uniform5,"uniform5", SoSeparator.class, true,
                                "uniform5Switch","",true);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(uniform5Active,"uniform5Active", SoSeparator.class, true,
                                "uniform5Switch","",true);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(uniform6Switch,"uniform6Switch", SoSwitch.class, true,
                                "geomSeparator","",false);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(uniform6,"uniform6", SoSeparator.class, true,
                                "uniform6Switch","",true);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(uniform6Active,"uniform6Active", SoSeparator.class, true,
                                "uniform6Switch","",true);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(uniform7Switch,"uniform7Switch", SoSwitch.class, true,
                                "geomSeparator","",false);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(uniform7,"uniform7", SoSeparator.class, true,
                                "uniform7Switch","",true);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(uniform7Active,"uniform7Active", SoSeparator.class, true,
                                "uniform7Switch","",true);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(uniform8Switch,"uniform8Switch", SoSwitch.class, true,
                                "geomSeparator","",false);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(uniform8,"uniform8", SoSeparator.class, true,
                                "uniform8Switch","",true);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(uniform8Active,"uniform8Active", SoSeparator.class, true,
                                "uniform8Switch","",true);

    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(arrowTranslation,"arrowTranslation", SoTranslation.class, 
                                true, "geomSeparator","",false);

    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(arrow1Switch,"arrow1Switch", SoSwitch.class, true,
                                "geomSeparator","",false);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(arrow1,"arrow1", SoSeparator.class, true,
                                "arrow1Switch","",true);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(arrow2Switch,"arrow2Switch", SoSwitch.class, true,
                                "geomSeparator","",false);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(arrow2,"arrow2", SoSeparator.class, true,
                                "arrow2Switch","",true);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(arrow3Switch,"arrow3Switch", SoSwitch.class, true,
                                "geomSeparator","",false);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(arrow3,"arrow3", SoSeparator.class, true,
                                "arrow3Switch","",true);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(arrow4Switch,"arrow4Switch", SoSwitch.class, true,
                                "geomSeparator","",false);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(arrow4,"arrow4", SoSeparator.class, true,
                                "arrow4Switch","",true);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(arrow5Switch,"arrow5Switch", SoSwitch.class, true,
                                "geomSeparator","",false);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(arrow5,"arrow5", SoSeparator.class, true,
                                "arrow5Switch","",true);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(arrow6Switch,"arrow6Switch", SoSwitch.class, true,
                                "geomSeparator","",false);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(arrow6,"arrow6", SoSeparator.class, true,
                                "arrow6Switch","",true);

    // read geometry for shared parts
    if (kitHeader.SO_KIT_IS_FIRST_INSTANCE())
        readDefaultParts("handleBoxDragger.iv", geomBuffer, geomBuffer.length);

    kitHeader.SO_KIT_ADD_FIELD(translation,"translation", new SbVec3f(0.0f, 0.0f, 0.0f));
    kitHeader.SO_KIT_ADD_FIELD(scaleFactor,"scaleFactor", new SbVec3f(1.0f, 1.0f, 1.0f));

    SO_KIT_INIT_INSTANCE();

    // Set up the drawStyle node
    SoDrawStyle ds = (SoDrawStyle ) getAnyPart( "drawStyle", true );
    ds.style.setValue(SoDrawStyle.Style.LINES);

    // translation box pieces.
  setPartAsDefault("translator1",     "handleBoxTranslator1");
  setPartAsDefault("translator1Active","handleBoxTranslator1Active");
  setPartAsDefault("translator2",     "handleBoxTranslator2");
  setPartAsDefault("translator2Active","handleBoxTranslator2Active");
  setPartAsDefault("translator3",     "handleBoxTranslator3");
  setPartAsDefault("translator3Active","handleBoxTranslator3Active");
  setPartAsDefault("translator4",     "handleBoxTranslator4");
  setPartAsDefault("translator4Active","handleBoxTranslator4Active");
  setPartAsDefault("translator5",     "handleBoxTranslator5");
  setPartAsDefault("translator5Active","handleBoxTranslator5Active");
  setPartAsDefault("translator6",     "handleBoxTranslator6");
  setPartAsDefault("translator6Active","handleBoxTranslator6Active");

    // face scale pieces.
    setPartAsDefault("extruder1",      "handleBoxExtruder1");
    setPartAsDefault("extruder1Active","handleBoxExtruder1Active");
    setPartAsDefault("extruder2",      "handleBoxExtruder2");
    setPartAsDefault("extruder2Active","handleBoxExtruder2Active");
    setPartAsDefault("extruder3",      "handleBoxExtruder3");
    setPartAsDefault("extruder3Active","handleBoxExtruder3Active");
    setPartAsDefault("extruder4",      "handleBoxExtruder4");
    setPartAsDefault("extruder4Active","handleBoxExtruder4Active");
    setPartAsDefault("extruder5",      "handleBoxExtruder5");
    setPartAsDefault("extruder5Active","handleBoxExtruder5Active");
    setPartAsDefault("extruder6",      "handleBoxExtruder6");
    setPartAsDefault("extruder6Active","handleBoxExtruder6Active");

    // uniform scale pieces.
    setPartAsDefault("uniform1",      "handleBoxUniform1");
    setPartAsDefault("uniform1Active","handleBoxUniform1Active");
    setPartAsDefault("uniform2",      "handleBoxUniform2");
    setPartAsDefault("uniform2Active","handleBoxUniform2Active");
    setPartAsDefault("uniform3",      "handleBoxUniform3");
    setPartAsDefault("uniform3Active","handleBoxUniform3Active");
    setPartAsDefault("uniform4",      "handleBoxUniform4");
    setPartAsDefault("uniform4Active","handleBoxUniform4Active");
    setPartAsDefault("uniform5",      "handleBoxUniform5");
    setPartAsDefault("uniform5Active","handleBoxUniform5Active");
    setPartAsDefault("uniform6",      "handleBoxUniform6");
    setPartAsDefault("uniform6Active","handleBoxUniform6Active");
    setPartAsDefault("uniform7",      "handleBoxUniform7");
    setPartAsDefault("uniform7Active","handleBoxUniform7Active");
    setPartAsDefault("uniform8",      "handleBoxUniform8");
    setPartAsDefault("uniform8Active","handleBoxUniform8Active");

    setAllPartsActive(false);

    // Arrow Feedback for translation.
    setAnyPart("arrowTranslation", new SoTranslation() );

    setPartAsDefault("arrow1",      "handleBoxArrow1");
    setPartAsDefault("arrow2",      "handleBoxArrow2");
    setPartAsDefault("arrow3",      "handleBoxArrow3");
    setPartAsDefault("arrow4",      "handleBoxArrow4");
    setPartAsDefault("arrow5",      "handleBoxArrow5");
    setPartAsDefault("arrow6",      "handleBoxArrow6");

    setSwitchValue( arrow1Switch.getValue(), SoSwitch.SO_SWITCH_NONE );
    setSwitchValue( arrow2Switch.getValue(), SoSwitch.SO_SWITCH_NONE );
    setSwitchValue( arrow3Switch.getValue(), SoSwitch.SO_SWITCH_NONE );
    setSwitchValue( arrow4Switch.getValue(), SoSwitch.SO_SWITCH_NONE );
    setSwitchValue( arrow5Switch.getValue(), SoSwitch.SO_SWITCH_NONE );
    setSwitchValue( arrow6Switch.getValue(), SoSwitch.SO_SWITCH_NONE );

    motionPlaneProj = new SbPlaneProjector();
    motionLineProj = new SbLineProjector();

    // by default, handlebox is a bit bigger than the bounding box
//OBSOLETE    setDraggerScale( SbVec3f( 1.2, 1.2, 1.2 ) );

    currentState = State.INACTIVE;
    restartState = State.INACTIVE;


    // add the callbacks to perform the dragging.
    addStartCallback(  SoHandleBoxDragger::startCB );
    addMotionCallback( SoHandleBoxDragger::motionCB );
    addFinishCallback(   SoHandleBoxDragger::finishCB );

    // add the callback to update things each time a meta key changes.
    addOtherEventCallback(   SoHandleBoxDragger::metaKeyChangeCB );

    // Update the rotation and scale fields when the motionMatrix is set.
    addValueChangedCallback( SoHandleBoxDragger::valueChangedCB );

    // Updates the motionMatrix when the translationFactor field is set.
    translFieldSensor 
        = new SoFieldSensor( SoHandleBoxDragger::fieldSensorCB, this);
    translFieldSensor.setPriority( 0 );

    // Updates the motionMatrix when the scaleFactor field is set.
    scaleFieldSensor 
        = new SoFieldSensor( SoHandleBoxDragger::fieldSensorCB, this);
    scaleFieldSensor.setPriority( 0 );

    setUpConnections( true, true );
}

////////////////////////////////////////////////////////////////////////
//
// Description:
//    Destructor
//
public void destructor()
//
////////////////////////////////////////////////////////////////////////
{
    motionPlaneProj.destructor();
    motionLineProj.destructor();
    if (translFieldSensor != null)
        translFieldSensor.destructor(); 
    if (scaleFieldSensor != null)
        scaleFieldSensor.destructor();
    super.destructor();
}

//    detach/attach any sensors, callbacks, and/or field connections.
//    Called by:            start/end of SoBaseKit::readInstance
//    and on new copy by:   start/end of SoBaseKit::copy.
//    Classes that redefine must call setUpConnections(true,true) 
//    at end of constructor.
//    Returns the state of the node when this was called.
public boolean
setUpConnections( boolean onOff, boolean doItAlways )
{
	if(kitHeader == null) {// java port
		return super.setUpConnections(onOff, doItAlways);
	}
	
    if ( !doItAlways && connectionsSetUp == onOff)
        return onOff;

    if ( onOff ) {

        // We connect AFTER base class.
        super.setUpConnections( onOff, false );

        // Call the sensor CBs to make things are up-to-date.
        fieldSensorCB( this, null );

        // Connect the field sensors
        if (translFieldSensor.getAttachedField() != translation)
            translFieldSensor.attach( translation );
        if (scaleFieldSensor.getAttachedField() != scaleFactor)
            scaleFieldSensor.attach( scaleFactor );
    }
    else {

        // We disconnect BEFORE base class.

        // Disconnect the field sensors.
        if (translFieldSensor.getAttachedField()!=null)
            translFieldSensor.detach();
        if (scaleFieldSensor.getAttachedField()!=null)
            scaleFieldSensor.detach();

        super.setUpConnections( onOff, false );
    }

    return !(connectionsSetUp = onOff);
}


////////////////////////////////////////////////////////////////////////
//
// Description:
//    Get set to begin dragging.
//
// Use: private
//
private void
dragStart()
//
////////////////////////////////////////////////////////////////////////
{

    final SoPath pickPath = getPickPath();

    // Invalidate surroundScale if it exists.
    SoSurroundScale ss = (SoSurroundScale)SO_CHECK_PART(this, "surroundScale", SoSurroundScale.class);
    if (ss != null)
        ss.invalidate();

    // This gives us an opportunity for a part to start a new gesture
    // after releasing and re-grabbing in the metaKey callback.
    currentState = restartState;

    translateDir = -1;

    // Make a note of which modifier keys are down.
    altDown  = getEvent().wasAltDown();
    ctlDown  = getEvent().wasCtrlDown();
    shftDown = getEvent().wasShiftDown();

    // See which subGraph of the handle box was hit to determine operation

    if ( false ) {
        // Are we scaling geometry only?
        currentState = State.SCALE_GEOM_ONLY;
    }

    // Note: we won't even bother if the restartState was not INACTIVE.
    if ( currentState == State.INACTIVE && pickPath != null ) {

        // Try finding a part that was picked.

        // TRANSLATIONS
        if (      pickPath.containsNode( translator1Switch.getValue() ))
            currentState = State.TOP_TRANSLATE;
        else if ( pickPath.containsNode( translator2Switch.getValue() ))
            currentState = State.BOT_TRANSLATE;
        else if ( pickPath.containsNode( translator3Switch.getValue() ))
            currentState = State.LFT_TRANSLATE;
        else if ( pickPath.containsNode( translator4Switch.getValue() ))
            currentState = State.RIT_TRANSLATE;
        else if ( pickPath.containsNode( translator5Switch.getValue() ))
            currentState = State.FNT_TRANSLATE;
        else if ( pickPath.containsNode( translator6Switch.getValue() ))
            currentState = State.BAK_TRANSLATE;

        // 1-d SCALING
        else if ( pickPath.containsNode( extruder1Switch.getValue() ))
            currentState = State.TOP_Y_SCALE;
        else if ( pickPath.containsNode( extruder2Switch.getValue() ))
            currentState = State.BOT_Y_SCALE;
        else if ( pickPath.containsNode( extruder3Switch.getValue() ))
            currentState = State.LFT_X_SCALE;
        else if ( pickPath.containsNode( extruder4Switch.getValue() ))
            currentState = State.RIT_X_SCALE;
        else if ( pickPath.containsNode( extruder5Switch.getValue() ))
            currentState = State.FNT_Z_SCALE;
        else if ( pickPath.containsNode( extruder6Switch.getValue() ))
            currentState = State.BAK_Z_SCALE;

        // 3-d SCALING
        else if ( pickPath.containsNode( uniform1Switch.getValue() ))
            currentState = State.PX_PY_PZ_3D_SCALE;
        else if ( pickPath.containsNode( uniform2Switch.getValue() ))
            currentState = State.PX_PY_NZ_3D_SCALE;
        else if ( pickPath.containsNode( uniform3Switch.getValue() ))
            currentState = State.PX_NY_PZ_3D_SCALE;
        else if ( pickPath.containsNode( uniform4Switch.getValue() ))
            currentState = State.PX_NY_NZ_3D_SCALE;
        else if ( pickPath.containsNode( uniform5Switch.getValue() ))
            currentState = State.NX_PY_PZ_3D_SCALE;
        else if ( pickPath.containsNode( uniform6Switch.getValue() ))
            currentState = State.NX_PY_NZ_3D_SCALE;
        else if ( pickPath.containsNode( uniform7Switch.getValue() ))
            currentState = State.NX_NY_PZ_3D_SCALE;
        else if ( pickPath.containsNode( uniform8Switch.getValue() ))
            currentState = State.NX_NY_NZ_3D_SCALE;
    }

    if (currentState == State.INACTIVE ) {

        // Try looking at the surrogate part paths...

        // Surrogate part paths...
        if ( getSurrogatePartPickedName().operator_equal_equal("translator1") )
            currentState = State.TOP_TRANSLATE;
        else if ( getSurrogatePartPickedName().operator_equal_equal("translator2") )
            currentState = State.BOT_TRANSLATE;
        else if ( getSurrogatePartPickedName().operator_equal_equal("translator3") )
            currentState = State.LFT_TRANSLATE;
        else if ( getSurrogatePartPickedName().operator_equal_equal("translator4") )
            currentState = State.RIT_TRANSLATE;
        else if ( getSurrogatePartPickedName().operator_equal_equal("translator5") )
            currentState = State.FNT_TRANSLATE;
        else if ( getSurrogatePartPickedName().operator_equal_equal("translator6") )
            currentState = State.BAK_TRANSLATE;
        else if ( getSurrogatePartPickedName().operator_equal_equal("extruder1") )
            currentState = State.TOP_Y_SCALE;
        else if ( getSurrogatePartPickedName().operator_equal_equal("extruder2") )
            currentState = State.BOT_Y_SCALE;
        else if ( getSurrogatePartPickedName().operator_equal_equal("extruder3") )
            currentState = State.LFT_X_SCALE;
        else if ( getSurrogatePartPickedName().operator_equal_equal("extruder4") )
            currentState = State.RIT_X_SCALE;
        else if ( getSurrogatePartPickedName().operator_equal_equal("extruder5") )
            currentState = State.FNT_Z_SCALE;
        else if ( getSurrogatePartPickedName().operator_equal_equal("extruder6") )
            currentState = State.BAK_Z_SCALE;
        else if ( getSurrogatePartPickedName().operator_equal_equal("uniform1") )
            currentState = State.PX_PY_PZ_3D_SCALE;
        else if ( getSurrogatePartPickedName().operator_equal_equal("uniform2") )
            currentState = State.PX_PY_NZ_3D_SCALE;
        else if ( getSurrogatePartPickedName().operator_equal_equal("uniform3") )
            currentState = State.PX_NY_PZ_3D_SCALE;
        else if ( getSurrogatePartPickedName().operator_equal_equal("uniform4") )
            currentState = State.PX_NY_NZ_3D_SCALE;
        else if ( getSurrogatePartPickedName().operator_equal_equal("uniform5") )
            currentState = State.NX_PY_PZ_3D_SCALE;
        else if ( getSurrogatePartPickedName().operator_equal_equal("uniform6") )
            currentState = State.NX_PY_NZ_3D_SCALE;
        else if ( getSurrogatePartPickedName().operator_equal_equal("uniform7") )
            currentState = State.NX_NY_PZ_3D_SCALE;
        else if ( getSurrogatePartPickedName().operator_equal_equal("uniform8") )
            currentState = State.NX_NY_NZ_3D_SCALE;
    }

    setHighlights();

    switch( currentState ) {
        case RIT_TRANSLATE:
        case LFT_TRANSLATE:
        case TOP_TRANSLATE:
        case BOT_TRANSLATE:
        case FNT_TRANSLATE:
        case BAK_TRANSLATE:
            translateInit();
            break;
        case PX_PY_PZ_3D_SCALE:
        case PX_PY_NZ_3D_SCALE:
        case PX_NY_PZ_3D_SCALE:
        case PX_NY_NZ_3D_SCALE:
        case NX_PY_PZ_3D_SCALE:
        case NX_PY_NZ_3D_SCALE:
        case NX_NY_PZ_3D_SCALE:
        case NX_NY_NZ_3D_SCALE:
            uniformScaleInit();
            break;
        case RIT_X_SCALE:
        case LFT_X_SCALE:
        case TOP_Y_SCALE:
        case BOT_Y_SCALE:
        case FNT_Z_SCALE:
        case BAK_Z_SCALE:
            faceScaleInit();
            break;
        case SCALE_GEOM_ONLY:
            scaleGeomSizeOnlyInit(); 
            break;
        case INACTIVE:
        default:
            break;
    }
}


////////////////////////////////////////////////////////////////////////
//
// Description:
//    Get set to begin translating.
//
// Use: private
//
private boolean
translateInit()
//
////////////////////////////////////////////////////////////////////////
{
    // This is the point we'll use if a metaKey callback makes us re-start.
        worldRestartPt.copyFrom(getWorldStartingPoint());

    // Establish the projector line in working space.
    // Working space is space after "surroundScale"

        final SbMatrix workSpaceToLocal = new SbMatrix(), localToWorkSpace = new SbMatrix();
        getPartToLocalMatrix("surroundScale",workSpaceToLocal,localToWorkSpace);
        SbMatrix worldSpaceToWork = getWorldToLocalMatrix();
        worldSpaceToWork.multRight( localToWorkSpace );
        final SbVec3f startWorkHit = new SbVec3f();
        worldSpaceToWork.multVecMatrix(getWorldStartingPoint(), startWorkHit);

        // do different things depending on what you hit...
        final SbVec3f workSpaceNormal = new SbVec3f();

        switch( currentState ) {
            case RIT_TRANSLATE:
            case LFT_TRANSLATE:
                workSpaceNormal.setValue(  1,  0,  0);
                break;
            case TOP_TRANSLATE:
            case BOT_TRANSLATE:
                workSpaceNormal.setValue(  0,  1,  0);
                break;
            case FNT_TRANSLATE:
            case BAK_TRANSLATE:
                workSpaceNormal.setValue(  0,  0,  1);
                break;
            default:
                return false;
        }

    // At this point, the translation direction (used for 1-D translating)
    // is undefined.
        translateDir = -1;

    // For calculating motion within the plane.
    motionPlaneProj.setPlane(new SbPlane(workSpaceNormal,startWorkHit));

    // If alt key is down, we also need a projector perpendicular to plane.
    if ( ctlDown )
        motionLineProj.setLine(
            new SbLine(startWorkHit, startWorkHit.operator_add( workSpaceNormal)));

    return true;
}

////////////////////////////////////////////////////////////////////////
//
// Description:
//    Get set to begin scaling, based on input from a knob placed on a 
//    face of the handleBox.
//    This implies a one dimensional scaling.
//
// Use: private
//
private boolean
faceScaleInit()
//
////////////////////////////////////////////////////////////////////////
{
    // This is the point we'll use if a metaKey callback makes us re-start.
        worldRestartPt.copyFrom( getWorldStartingPoint());

    // Establish the projector line in working space.
    // Working space is space after "surroundScale"

        final SbMatrix workSpaceToLocal = new SbMatrix(), localToWorkSpace = new SbMatrix();
        getPartToLocalMatrix("surroundScale",workSpaceToLocal,localToWorkSpace);
        SbMatrix worldSpaceToWork = getWorldToLocalMatrix();
        worldSpaceToWork.multRight( localToWorkSpace );
        final SbVec3f startWorkHit = new SbVec3f();
        worldSpaceToWork.multVecMatrix(getWorldStartingPoint(), startWorkHit);

        // do different things depending on what you hit...
        SbVec3f axisPt2;

        switch( currentState ) {
            case RIT_X_SCALE:
            case LFT_X_SCALE:
                axisPt2 = startWorkHit.operator_add(new SbVec3f(  1,  0,  0));
                break;
            case TOP_Y_SCALE:
            case BOT_Y_SCALE:
                axisPt2 = startWorkHit.operator_add(new SbVec3f(  0,  1,  0));
                break;
            case FNT_Z_SCALE:
            case BAK_Z_SCALE:
                axisPt2 = startWorkHit.operator_add(new SbVec3f(  0,  0,  1));
                break;
            default:
                return false;
        }

        motionLineProj.setLine( new SbLine( startWorkHit, axisPt2 ) );

    return true;
}

////////////////////////////////////////////////////////////////////////
//
// Description:
//    Get set to begin scaling, based on input from a knob placed on a 
//    vertex of the handleBox.
//    This implies a one dimensional scaling.
//
// Use: private
//
private boolean
uniformScaleInit()
//
////////////////////////////////////////////////////////////////////////
{
    // This is the point we'll use if a metaKey callback makes us re-start.
        worldRestartPt.copyFrom(getWorldStartingPoint());

    // Establish the projector line in working space.
    // Working space is space after "surroundScale"

        final SbMatrix workSpaceToLocal = new SbMatrix(), localToWorkSpace = new SbMatrix();
        getPartToLocalMatrix("surroundScale",workSpaceToLocal,localToWorkSpace);
        SbMatrix worldSpaceToWork = getWorldToLocalMatrix();
        worldSpaceToWork.multRight( localToWorkSpace );
        final SbVec3f startWorkHit = new SbVec3f();
        worldSpaceToWork.multVecMatrix(getWorldStartingPoint(), startWorkHit);

    // create a line between the box center and the point that was hit
        motionLineProj.setLine( new SbLine( new SbVec3f(0,0,0),startWorkHit ) );

    return true;
}

////////////////////////////////////////////////////////////////////////
//
// Description:
//    Get set to begin scaling only the Geometry, based on
//    scaling along a line connecting (0,0,0) to the point originally hit.
//
//
// Use: private
//
private boolean
scaleGeomSizeOnlyInit()
//
////////////////////////////////////////////////////////////////////////
{
    // This is the point we'll use if a metaKey callback makes us re-start.
        worldRestartPt.copyFrom( getWorldStartingPoint());

    // Establish the projector line in working space.
    // Working space is space after "surroundScale"

        final SbMatrix workSpaceToLocal = new SbMatrix(), localToWorkSpace = new SbMatrix();
        getPartToLocalMatrix("surroundScale",workSpaceToLocal,localToWorkSpace);
        SbMatrix worldSpaceToWork = getWorldToLocalMatrix();
        worldSpaceToWork.multRight( localToWorkSpace );
        final SbVec3f startWorkHit = new SbVec3f();
        worldSpaceToWork.multVecMatrix(getWorldStartingPoint(), startWorkHit);

    // the motion line connects the origin with the point that was hit
        motionLineProj.setLine( new SbLine( new SbVec3f(0,0,0),startWorkHit));

    return true;
}

////////////////////////////////////////////////////////////////////////
//
// Description:
//    Drag the handlebox based on locater motion.
//    This routine just ships the work to translateDrag or 
//    scaleDrag.
//
// Use: private
//
private void
drag()
//
////////////////////////////////////////////////////////////////////////
{
    switch( currentState ) {
        case RIT_TRANSLATE:
        case LFT_TRANSLATE:
        case TOP_TRANSLATE:
        case BOT_TRANSLATE:
        case FNT_TRANSLATE:
        case BAK_TRANSLATE:
            translateDrag();
            break;
        case PX_PY_PZ_3D_SCALE:
        case PX_PY_NZ_3D_SCALE:
        case PX_NY_PZ_3D_SCALE:
        case PX_NY_NZ_3D_SCALE:
        case NX_PY_PZ_3D_SCALE:
        case NX_PY_NZ_3D_SCALE:
        case NX_NY_PZ_3D_SCALE:
        case NX_NY_NZ_3D_SCALE:

        case RIT_X_SCALE:
        case LFT_X_SCALE:
        case TOP_Y_SCALE:
        case BOT_Y_SCALE:
        case FNT_Z_SCALE:
        case BAK_Z_SCALE:
            scaleDrag();
            break;
        case SCALE_GEOM_ONLY:
            scaleGeomSizeOnlyDrag(); 
            break;
        case INACTIVE:
        default:
            break;
    }
}

////////////////////////////////////////////////////////////////////////
//
// Description:
//    Translate the handlebox and object based on locater motion.
//
// Use: private
//
private boolean
translateDrag()
//
////////////////////////////////////////////////////////////////////////
{
    final SbMatrix workSpaceToLocal = new SbMatrix(), localToWorkSpace = new SbMatrix();
    getPartToLocalMatrix("surroundScale", workSpaceToLocal, localToWorkSpace);
    SbMatrix workSpaceToWorld = new SbMatrix(getLocalToWorldMatrix());
    workSpaceToWorld.multLeft( workSpaceToLocal );
    SbMatrix worldSpaceToWork = new SbMatrix(getWorldToLocalMatrix());
    worldSpaceToWork.multRight( localToWorkSpace );

    // Get startHitPt in workspace.
        final SbVec3f startHitPt = new SbVec3f();
        worldSpaceToWork.multVecMatrix(getWorldStartingPoint(), startHitPt);

    // Calculate intersection with plane projector.
    // Find mouse hit on plane currently in use...
        motionPlaneProj.setViewVolume( getViewVolume() );
        motionPlaneProj.setWorkingSpace( workSpaceToWorld );
        SbVec3f workSpacePlanePt
            = new SbVec3f(motionPlaneProj.project(getNormalizedLocaterPosition()));

    // If we need to start a new gesture, we'll carry on from this pt.
        workSpaceToWorld.multVecMatrix( workSpacePlanePt, worldRestartPt);

    // Get newHitPt in workSpace.
        final SbVec3f  newHitPt = new SbVec3f();

    // If CONTROL key down, our 'newHitPt' must be taken from the
    // line projector instead.
    if ( !ctlDown ) {
        newHitPt.copyFrom(workSpacePlanePt);
    }
    else { 
        // If modify key is down, then we are moving PERPENDICULAR to the 
        // motion plane.  
        motionLineProj.setViewVolume( getViewVolume() );
        motionLineProj.setWorkingSpace( workSpaceToWorld );
        newHitPt.copyFrom(
             motionLineProj.project( getNormalizedLocaterPosition()));
    }

    // find the difference between current and beginning intersections.
    final SbVec3f  workSpaceMotion = new SbVec3f();
    workSpaceMotion.copyFrom( newHitPt.operator_minus( startHitPt));

    if ( !shftDown || ctlDown )
                                        // constrainKey not down, or we are 
                                        // doing perpendicular (CONTROL) motion.
                                        // Clear the 1-D translation dir.
        translateDir = -1;
    else {
        // the constrain key is pressed. This means 1-D translation.
        if ( translateDir == -1 ) {
            // The 1-D direction is not defined.  Calculate it
            // based on which direction got the maximum locater motion.
            if ( isAdequateConstraintMotion() ) {
                if (    Math.abs( workSpaceMotion.getValueRead()[0]) > Math.abs( workSpaceMotion.getValueRead()[1]) 
                     && Math.abs( workSpaceMotion.getValueRead()[0]) > Math.abs( workSpaceMotion.getValueRead()[2]) )
                    translateDir = 0;
                else if (Math.abs( workSpaceMotion.getValueRead()[1]) > Math.abs( workSpaceMotion.getValueRead()[2]) )
                    translateDir = 1;
                else 
                    translateDir = 2;
                // We'll need to display different translation arrows.
                setFeedbackArrows();
            }
            else {
                // Not ready to pick a direction yet. Don't move.
                return false;
            }
        }
        // get the projection of 'workSpaceMotion' onto the preferred axis.
        final SbVec3f constrainedMotion = new SbVec3f(0,0,0);
        constrainedMotion.getValueRead()[translateDir] = workSpaceMotion.getValueRead()[translateDir];
        workSpaceMotion.copyFrom( constrainedMotion);
    }

    // Append this to the startMotionMatrix, which we saved at the beginning
    // of the drag, to find the current motion matrix.
    // We need to send our matrix that converts from workSpace to localSpace.
        setMotionMatrix( appendTranslation( getStartMotionMatrix(), workSpaceMotion,
                             workSpaceToLocal ) );

    return true;
}

////////////////////////////////////////////////////////////////////////
//
// Description:
//    Scale the handlebox and object based on locater motion.
//
// Use: private
//
private boolean
scaleDrag()
//
////////////////////////////////////////////////////////////////////////
{
    // Get your spaces straight...
        final SbMatrix workSpaceToLocal = new SbMatrix(), localToWorkSpace = new SbMatrix();
        getPartToLocalMatrix("surroundScale",workSpaceToLocal,localToWorkSpace);
        SbMatrix workSpaceToWorld = getLocalToWorldMatrix();
        workSpaceToWorld.multLeft( workSpaceToLocal );
        SbMatrix worldSpaceToWork = getWorldToLocalMatrix();
        worldSpaceToWork.multRight( localToWorkSpace );

    // Get startHitPt in workspace.
        final SbVec3f startHitPt = new SbVec3f();
        worldSpaceToWork.multVecMatrix(getWorldStartingPoint(), startHitPt);

    // determine the center for scaling...
        final SbVec3f  scaleCenter = new SbVec3f();
        if ( !ctlDown ) {
            // In this case, always want to scale towards center.
            switch( currentState ) {
                case PX_PY_PZ_3D_SCALE:
                case PX_PY_NZ_3D_SCALE:
                case PX_NY_PZ_3D_SCALE:
                case PX_NY_NZ_3D_SCALE:
                case NX_PY_PZ_3D_SCALE:
                case NX_PY_NZ_3D_SCALE:
                case NX_NY_PZ_3D_SCALE:
                case NX_NY_NZ_3D_SCALE:
                case SCALE_GEOM_ONLY:
                    scaleCenter.setValue(0, 0, 0);
                    break;

                case RIT_X_SCALE:
                case LFT_X_SCALE:
                    scaleCenter.setValue(  0,  startHitPt.getValueRead()[1], startHitPt.getValueRead()[2]);
                    break;
                case TOP_Y_SCALE:
                case BOT_Y_SCALE:
                    scaleCenter.setValue(  startHitPt.getValueRead()[0],  0, startHitPt.getValueRead()[2]);
                    break;
                case FNT_Z_SCALE:
                case BAK_Z_SCALE:
                    scaleCenter.setValue(  startHitPt.getValueRead()[0], startHitPt.getValueRead()[1],  0);
                    break;
            }
        }
        else {  // With alt key down, edge being pulled should move and 
                // leave the opposite edge standing still.

            switch( currentState ) {
                case PX_PY_PZ_3D_SCALE:
                    scaleCenter.setValue( -1, -1, -1 );
                    break;
                case PX_PY_NZ_3D_SCALE:
                    scaleCenter.setValue( -1, -1,  1 );
                    break;
                case PX_NY_PZ_3D_SCALE:
                    scaleCenter.setValue( -1,  1, -1 );
                    break;
                case PX_NY_NZ_3D_SCALE:
                    scaleCenter.setValue( -1,  1,  1 );
                    break;
                case NX_PY_PZ_3D_SCALE:
                    scaleCenter.setValue(  1, -1, -1 );
                    break;
                case NX_PY_NZ_3D_SCALE:
                    scaleCenter.setValue(  1, -1,  1 );
                    break;
                case NX_NY_PZ_3D_SCALE:
                    scaleCenter.setValue(  1,  1, -1 );
                    break;
                case NX_NY_NZ_3D_SCALE:
                    scaleCenter.setValue(  1,  1,  1 );
                    break;

                case RIT_X_SCALE:
                    scaleCenter.setValue( -1,  startHitPt.getValueRead()[1], startHitPt.getValueRead()[2]);
                    break;
                case LFT_X_SCALE:
                    scaleCenter.setValue(  1,  startHitPt.getValueRead()[1], startHitPt.getValueRead()[2]);
                    break;
                case TOP_Y_SCALE:
                    scaleCenter.setValue(  startHitPt.getValueRead()[0], -1, startHitPt.getValueRead()[2]);
                    break;
                case BOT_Y_SCALE:
                    scaleCenter.setValue(  startHitPt.getValueRead()[0],  1, startHitPt.getValueRead()[2]);
                    break;
                case FNT_Z_SCALE:
                    scaleCenter.setValue(  startHitPt.getValueRead()[0], startHitPt.getValueRead()[1], -1);
                    break;
                case BAK_Z_SCALE:
                    scaleCenter.setValue(  startHitPt.getValueRead()[0], startHitPt.getValueRead()[1],  1);
                    break;
                case SCALE_GEOM_ONLY:
                    // This mode always scales about origin.
                    scaleCenter.setValue( 0, 0, 0);
                    break;
            }
        }

    // Set up projector. 
        motionLineProj.setViewVolume( getViewVolume() );
        motionLineProj.setWorkingSpace( workSpaceToWorld  );
    // We need to re-establish the motion line, because the line should always
    // pass through the scale center.
        motionLineProj.setLine( new SbLine( scaleCenter, startHitPt ) );

    // Get newHitPt in workSpace.
        final SbVec3f  newHitPt = new SbVec3f();
        newHitPt.copyFrom( 
             motionLineProj.project(getNormalizedLocaterPosition()));

    // Save the final point in world space.
    // We'll need it if we hit a meta-key to start off the next gesture.
        workSpaceToWorld.multVecMatrix( newHitPt, worldRestartPt);


        final float TINY = 0.00001f;

    // set delta to be the proportionate change in distance from 
    // the scaleCenter in each direction.
    final SbVec3f oldDiff = startHitPt.operator_minus( scaleCenter);
    final SbVec3f newDiff = newHitPt.operator_minus(scaleCenter);
    // If either vector is close to zero, then leave delta at 1.0
    final SbVec3fSingle delta = new SbVec3fSingle( 1.0f, 1.0f, 1.0f );
    int ind;
    for ( ind = 0; ind < 3; ind++ ) {
        if ((Math.abs(newDiff.getValueRead()[ind]) > TINY) && (Math.abs(oldDiff.getValueRead()[ind]) > TINY))
            delta.getValue()[ind] = newDiff.getValueRead()[ind] / oldDiff.getValueRead()[ind];
    }
//#undef TINY

    // Make sure the scale doesn't go below getMinScale()
        for (ind = 0; ind < 3; ind++ )
            if ( delta.getValueRead()[ind] < getMinScale() )
                delta.getValue()[ind] = getMinScale();

    // Append this to the startMotionMatrix, which we saved at the beginning
    // of the drag, to find the current motion matrix.
    // We need to send our matrix that converts from workSpace to localSpace.
        setMotionMatrix( appendScale( getStartMotionMatrix(), 
                            delta, scaleCenter, workSpaceToLocal ) );
    return true;
}

////////////////////////////////////////////////////////////////////////
//
// Description:
//    Scale up only the geometry of the handlebox, by intersecting
//    an imaginary sphere around the center of the handlebox
//
// Use: private
//
private boolean
scaleGeomSizeOnlyDrag()
//
////////////////////////////////////////////////////////////////////////
{
    final SbMatrix workSpaceToLocal = new SbMatrix(), localToWorkSpace = new SbMatrix();
    getPartToLocalMatrix( "surroundScale", workSpaceToLocal, localToWorkSpace);
    SbMatrix workSpaceToWorld = getLocalToWorldMatrix();
    workSpaceToWorld.multLeft( workSpaceToLocal );
    SbMatrix worldSpaceToWork = getWorldToLocalMatrix();
    worldSpaceToWork.multRight( localToWorkSpace );

    // Get startHitPt in workspace.
        final SbVec3f startHitPt = new SbVec3f();
        worldSpaceToWork.multVecMatrix(getWorldStartingPoint(), startHitPt);

    // Get newHitPt in workSpace.
        SbVec3f  newHitPt;
        motionLineProj.setViewVolume( getViewVolume() );
        motionLineProj.setWorkingSpace( workSpaceToWorld  );
        newHitPt 
            = motionLineProj.project(getNormalizedLocaterPosition());

    // Save the final point in world space.
    // We'll need it if we hit a meta-key to start off the next gesture.
        workSpaceToWorld.multVecMatrix( newHitPt, worldRestartPt);

    // Find the oldRadius and the new radius
        final SbVec3f  origin = new SbVec3f(0,0,0);
        float oldRadius, newRadius;
        oldRadius = (startHitPt.operator_minus(origin)).length();
        newRadius = (newHitPt.operator_minus(origin)).length();

    // Find the change in scale.
        float delta = 1.0f;
        if ( newRadius != 0.0 && oldRadius != 0.0 ) {
            delta = newRadius / oldRadius;
        }

//OBSOLETE        SbVec3f relScale = getDraggerScale();
//OBSOLETE        relScale *= delta;
//OBSOLETE        setDraggerScale( relScale );

    return true;
}

//
////////////////////////////////////////////////////////////////////////
// keypress/release callback functions
//
// These assure that the proper changes to the highlights, 
// currentState, and projectors are made
//
////////////////////////////////////////////////////////////////////////
//

public static void
metaKeyChangeCB( Object object, SoDragger inDragger)
{
    SoHandleBoxDragger  hb = (SoHandleBoxDragger ) inDragger;
    SoHandleEventAction ha = hb.getHandleEventAction();

    //[1] Only do this if we are grabbing events
    if ( ha.getGrabber() != hb )
        return;

    //[2] We only want key press or release events.
    final SoEvent event = hb.getEvent();
    if ( !SoKeyboardEvent.SO_KEY_PRESS_EVENT(event, SoKeyboardEvent.Key.ANY) && !SoKeyboardEvent.SO_KEY_RELEASE_EVENT(event, SoKeyboardEvent.Key.ANY))
        return;

    //[3] Is the key constrain, modify, or control?
    final SoKeyboardEvent ke = ( SoKeyboardEvent ) event;
    SoKeyboardEvent.Key key = ke.getKey();

    if ( key == SoKeyboardEvent.Key.LEFT_CONTROL  ||
              key == SoKeyboardEvent.Key.RIGHT_CONTROL || 
              ( ( key == SoKeyboardEvent.Key.LEFT_SHIFT ||
                  key == SoKeyboardEvent.Key.RIGHT_SHIFT ) &&
                ( hb.currentState == State.RIT_TRANSLATE ||
                  hb.currentState == State.LFT_TRANSLATE ||
                  hb.currentState == State.TOP_TRANSLATE ||
                  hb.currentState == State.BOT_TRANSLATE ||
                  hb.currentState == State.FNT_TRANSLATE ||
                  hb.currentState == State.BAK_TRANSLATE ))) {

        // We want to end the old gesture and start a new one.

        // [A] Release the grabber. This ends the gesture and calls all 
        //     finishCallbacks (on parent dragger, too, if we're registered)
        //     Remember the state so you can restart with it after releasing.
            State savedState = hb.currentState;
            ha.releaseGrabber();

        // [B] Set the starting point to be our saved worldRestartPoint
            hb.restartState = savedState;
            hb.setStartingPoint( hb.worldRestartPt );

        // [C] Become the grabber again. This begins a new gesture and calls all
        //     startCallbacks (parent dragger, too).  Info like viewVolume, 
        //     viewportRegion, handleEventAction, and tempPathToThis 
        //     is still valid.
            ha.setGrabber(hb);

        // [D] set handled
            ha.setHandled();
    }
}

////////////////////////////////////////////////////////////////////////
//
// Description:
//    Finish dragging.
//
// Use: private
//
private void
dragFinish()
//
////////////////////////////////////////////////////////////////////////
{
    currentState = State.INACTIVE;
    restartState = State.INACTIVE;
    setHighlights();

    // Invalidate surroundScale if it exists.
    SoSurroundScale ss = (SoSurroundScale)SO_CHECK_PART(this, "surroundScale", SoSurroundScale.class);
    if (ss != null)
        ss.invalidate();
}; 


////////////////////////////////////////////////////////////////////////
//
// Use: private
//
private void
highlightAxisForScale( SoHandleBoxDragger.WhichAxis axis )
//
////////////////////////////////////////////////////////////////////////
{
    switch ( axis ) {
        case POSY:
            setSwitchValue( extruder1Switch.getValue(), 1 );
            if ( !ctlDown )
                setSwitchValue( extruder2Switch.getValue(), 1 );
            break;
        case NEGY:
            setSwitchValue( extruder2Switch.getValue(), 1 );
            if ( !ctlDown )
                setSwitchValue( extruder1Switch.getValue(), 1 );
            break;
        case NEGX:
            setSwitchValue( extruder3Switch.getValue(), 1 );
            if ( !ctlDown )
                setSwitchValue( extruder4Switch.getValue(), 1 );
            break;
        case POSX:
            setSwitchValue( extruder4Switch.getValue(), 1 );
            if ( !ctlDown )
                setSwitchValue( extruder3Switch.getValue(), 1 );
            break;
        case POSZ:
            setSwitchValue( extruder5Switch.getValue(), 1 );
            if ( !ctlDown )
                setSwitchValue( extruder6Switch.getValue(), 1 );
            break;
        case NEGZ:
            setSwitchValue( extruder6Switch.getValue(), 1 );
            if ( !ctlDown )
                setSwitchValue( extruder5Switch.getValue(), 1 );
            break;
    }
}

////////////////////////////////////////////////////////////////////////
//
// Use: protected
//
protected void
setAllPartsActive( boolean onOrOff )
//
////////////////////////////////////////////////////////////////////////
{
    int sVal = (onOrOff == true) ? 1 : 0;

    setSwitchValue(translator1Switch.getValue(), sVal );
    setSwitchValue(translator2Switch.getValue(), sVal );
    setSwitchValue(translator3Switch.getValue(), sVal );
    setSwitchValue(translator4Switch.getValue(), sVal );
    setSwitchValue(translator5Switch.getValue(), sVal );
    setSwitchValue(translator6Switch.getValue(), sVal );

    setSwitchValue(extruder1Switch.getValue(), sVal );
    setSwitchValue(extruder2Switch.getValue(), sVal );
    setSwitchValue(extruder3Switch.getValue(), sVal );
    setSwitchValue(extruder4Switch.getValue(), sVal );
    setSwitchValue(extruder5Switch.getValue(), sVal );
    setSwitchValue(extruder6Switch.getValue(), sVal );

    setSwitchValue(uniform1Switch.getValue(), sVal );
    setSwitchValue(uniform2Switch.getValue(), sVal );
    setSwitchValue(uniform3Switch.getValue(), sVal );
    setSwitchValue(uniform4Switch.getValue(), sVal );
    setSwitchValue(uniform5Switch.getValue(), sVal );
    setSwitchValue(uniform6Switch.getValue(), sVal );
    setSwitchValue(uniform7Switch.getValue(), sVal );
    setSwitchValue(uniform8Switch.getValue(), sVal );

}

////////////////////////////////////////////////////////////////////////
//
// Description:
//    Sets the various switch nodes to highlight the correct parts
//    of the handleBox, depending on the state.
//
// Use: private
//
private void
setHighlights()
//
////////////////////////////////////////////////////////////////////////
{
    // Turn notification off temporarily so that
    // all these switches switching dont cause a zillion
    // notifies.
    enableNotify(false);
    
    setFeedbackArrows();

    // Set up the drawStyle node
    SoDrawStyle ds = (SoDrawStyle ) drawStyle.getValue();
    if ( ds == null ) {
        ds = (SoDrawStyle ) getAnyPart( "drawStyle", true );
        ds.style.setValue(SoDrawStyle.Style.LINES);
    }

    ds.lineWidth.setValue(1);
    ds.linePattern.setValue((short)0xffff);
    ds.setOverride(false);

    // if switching everything on, just do it and return.
    switch ( currentState ) {
        case SCALE_GEOM_ONLY:
            setAllPartsActive( true );
            ds.lineWidth.setValue(2);
            ds.linePattern.setValue((short)0xf0f0);
            ds.setOverride(true);
            enableNotify(true);
            touch();
            return;

        case RIT_TRANSLATE:
        case LFT_TRANSLATE:
        case TOP_TRANSLATE:
        case BOT_TRANSLATE:
        case FNT_TRANSLATE:
        case BAK_TRANSLATE:
            setAllPartsActive( true );
            enableNotify(true);
            touch();
            return;
    }

    // The other states require some things on, some things off.
    // Start by turning everything off, then turn on what's needed.
    setAllPartsActive( false );

    switch ( currentState ) {

        case PX_PY_PZ_3D_SCALE:
            setSwitchValue( uniform1Switch.getValue(), 1 );
            highlightAxisForScale( WhichAxis.POSX );
            highlightAxisForScale( WhichAxis.POSY );
            highlightAxisForScale( WhichAxis.POSZ );
            break;
        case PX_PY_NZ_3D_SCALE:
            setSwitchValue( uniform2Switch.getValue(), 1 );
            highlightAxisForScale( WhichAxis.POSX );
            highlightAxisForScale( WhichAxis.POSY );
            highlightAxisForScale( WhichAxis.NEGZ );
            break;
        case PX_NY_PZ_3D_SCALE:
            setSwitchValue( uniform3Switch.getValue(), 1 );
            highlightAxisForScale( WhichAxis.POSX );
            highlightAxisForScale( WhichAxis.NEGY );
            highlightAxisForScale( WhichAxis.POSZ );
            break;
        case PX_NY_NZ_3D_SCALE:
            setSwitchValue( uniform4Switch.getValue(), 1 );
            highlightAxisForScale( WhichAxis.POSX );
            highlightAxisForScale( WhichAxis.NEGY );
            highlightAxisForScale( WhichAxis.NEGZ );
            break;
        case NX_PY_PZ_3D_SCALE:
            setSwitchValue( uniform5Switch.getValue(), 1 );
            highlightAxisForScale( WhichAxis.NEGX );
            highlightAxisForScale( WhichAxis.POSY );
            highlightAxisForScale( WhichAxis.POSZ );
            break;
        case NX_PY_NZ_3D_SCALE:
            setSwitchValue( uniform6Switch.getValue(), 1 );
            highlightAxisForScale( WhichAxis.NEGX );
            highlightAxisForScale( WhichAxis.POSY );
            highlightAxisForScale( WhichAxis.NEGZ );
            break;
        case NX_NY_PZ_3D_SCALE:
            setSwitchValue( uniform7Switch.getValue(), 1 );
            highlightAxisForScale( WhichAxis.NEGX );
            highlightAxisForScale( WhichAxis.NEGY );
            highlightAxisForScale( WhichAxis.POSZ );
            break;
        case NX_NY_NZ_3D_SCALE:
            setSwitchValue( uniform8Switch.getValue(), 1 );
            highlightAxisForScale( WhichAxis.NEGX );
            highlightAxisForScale( WhichAxis.NEGY );
            highlightAxisForScale( WhichAxis.NEGZ );
            break;

        case RIT_X_SCALE:
            highlightAxisForScale( WhichAxis.POSX );
            break;
        case LFT_X_SCALE:
            highlightAxisForScale( WhichAxis.NEGX );
            break;
        case TOP_Y_SCALE:
            highlightAxisForScale( WhichAxis.POSY );
            break;
        case BOT_Y_SCALE:
            highlightAxisForScale( WhichAxis.NEGY );
            break;
        case FNT_Z_SCALE:
            highlightAxisForScale( WhichAxis.POSZ );
            break;
        case BAK_Z_SCALE:
            highlightAxisForScale( WhichAxis.NEGZ );
            break;

        case INACTIVE:
        default:
            break;
    }

    // Turn notification back on and cause one notify
    // to eminate from the dragger
    enableNotify(true);
    touch();
}

////////////////////////////////////////////////////////////////////////
//
// Description:
//    Sets the various switch nodes to highlight the correct parts
//    of the handleBox, depending on the state.
//
// Use: private
//
private void
setFeedbackArrows()
//
////////////////////////////////////////////////////////////////////////
{
    setSwitchValue( arrow1Switch.getValue(), SoSwitch.SO_SWITCH_NONE  );
    setSwitchValue( arrow2Switch.getValue(), SoSwitch.SO_SWITCH_NONE  );
    setSwitchValue( arrow3Switch.getValue(), SoSwitch.SO_SWITCH_NONE  );
    setSwitchValue( arrow4Switch.getValue(), SoSwitch.SO_SWITCH_NONE  );
    setSwitchValue( arrow5Switch.getValue(), SoSwitch.SO_SWITCH_NONE  );
    setSwitchValue( arrow6Switch.getValue(), SoSwitch.SO_SWITCH_NONE  );

    SoTranslation arrowTrans = (SoTranslation ) arrowTranslation.getValue();
    if (arrowTrans==null) {
        setAnyPart("arrowTranslation", new SoTranslation() );
        arrowTrans = (SoTranslation ) arrowTranslation.getValue();
    }

    // if switching everything on, just do it and return.
    if ( !ctlDown ) {
        switch ( currentState ) {
            case RIT_TRANSLATE:
                if ( translateDir == -1 || translateDir == 1 ) {
                    setSwitchValue( arrow1Switch.getValue(), 0  );
                    setSwitchValue( arrow2Switch.getValue(), 0  );
                }
                if ( translateDir == -1 || translateDir == 2 ) {
                    setSwitchValue( arrow5Switch.getValue(), 0  );
                    setSwitchValue( arrow6Switch.getValue(), 0  );
                }
                arrowTrans.translation.setValue(new SbVec3f(1,0,0));
                break;
            case LFT_TRANSLATE:
                if ( translateDir == -1 || translateDir == 1 ) {
                    setSwitchValue( arrow1Switch.getValue(), 0  );
                    setSwitchValue( arrow2Switch.getValue(), 0  );
                }
                if ( translateDir == -1 || translateDir == 2 ) {
                    setSwitchValue( arrow5Switch.getValue(), 0  );
                    setSwitchValue( arrow6Switch.getValue(), 0  );
                }
                arrowTrans.translation.setValue(new SbVec3f(-1,0,0));
                break;
            case TOP_TRANSLATE:
                if ( translateDir == -1 || translateDir == 0 ) {
                    setSwitchValue( arrow4Switch.getValue(), 0  );
                    setSwitchValue( arrow3Switch.getValue(), 0  );
                }
                if ( translateDir == -1 || translateDir == 2 ) {
                    setSwitchValue( arrow5Switch.getValue(), 0  );
                    setSwitchValue( arrow6Switch.getValue(), 0  );
                }
                arrowTrans.translation.setValue(new SbVec3f(0,1,0));
                break;
            case BOT_TRANSLATE:
                if ( translateDir == -1 || translateDir == 0 ) {
                    setSwitchValue( arrow4Switch.getValue(), 0  );
                    setSwitchValue( arrow3Switch.getValue(), 0  );
                }
                if ( translateDir == -1 || translateDir == 2 ) {
                    setSwitchValue( arrow5Switch.getValue(), 0  );
                    setSwitchValue( arrow6Switch.getValue(), 0  );
                }
                arrowTrans.translation.setValue(new SbVec3f(0,-1,0));
                break;
            case FNT_TRANSLATE:
                if ( translateDir == -1 || translateDir == 0 ) {
                    setSwitchValue( arrow4Switch.getValue(), 0  );
                    setSwitchValue( arrow3Switch.getValue(), 0  );
                }
                if ( translateDir == -1 || translateDir == 1 ) {
                    setSwitchValue( arrow1Switch.getValue(), 0  );
                    setSwitchValue( arrow2Switch.getValue(), 0  );
                }
                arrowTrans.translation.setValue(new SbVec3f(0,0,1));
                break;
            case BAK_TRANSLATE:
                if ( translateDir == -1 || translateDir == 0 ) {
                    setSwitchValue( arrow4Switch.getValue(), 0  );
                    setSwitchValue( arrow3Switch.getValue(), 0  );
                }
                if ( translateDir == -1 || translateDir == 1 ) {
                    setSwitchValue( arrow1Switch.getValue(), 0  );
                    setSwitchValue( arrow2Switch.getValue(), 0  );
                }
                arrowTrans.translation.setValue(new SbVec3f(0,0,-1));
                break;
        }
    }
    else {
        switch ( currentState ) {
            case RIT_TRANSLATE:
                setSwitchValue( arrow4Switch.getValue(), 0  );
                setSwitchValue( arrow3Switch.getValue(), 0  );
                arrowTrans.translation.setValue(new SbVec3f(1,0,0));
                break;
            case LFT_TRANSLATE:
                setSwitchValue( arrow4Switch.getValue(), 0  );
                setSwitchValue( arrow3Switch.getValue(), 0  );
                arrowTrans.translation.setValue(new SbVec3f(-1,0,0));
                break;
            case TOP_TRANSLATE:
                setSwitchValue( arrow1Switch.getValue(), 0  );
                setSwitchValue( arrow2Switch.getValue(), 0  );
                arrowTrans.translation.setValue(new SbVec3f(0,1,0));
                break;
            case BOT_TRANSLATE:
                setSwitchValue( arrow1Switch.getValue(), 0  );
                setSwitchValue( arrow2Switch.getValue(), 0  );
                arrowTrans.translation.setValue(new SbVec3f(0,-1,0));
                break;
            case FNT_TRANSLATE:
                setSwitchValue( arrow5Switch.getValue(), 0  );
                setSwitchValue( arrow6Switch.getValue(), 0  );
                arrowTrans.translation.setValue(new SbVec3f(0,0,1));
                break;
            case BAK_TRANSLATE:
                setSwitchValue( arrow5Switch.getValue(), 0  );
                setSwitchValue( arrow6Switch.getValue(), 0  );
                arrowTrans.translation.setValue(new SbVec3f(0,0,-1));
                break;
        }
    }
}

////////////////////////////////////////////////////////////////////
//  Stubs for callbacks
////////////////////////////////////////////////////////////////////
public static void 
startCB( Object object, SoDragger inDragger )
{
    SoHandleBoxDragger hb = (SoHandleBoxDragger ) inDragger;
    hb.dragStart();
}

public static void 
motionCB( Object object, SoDragger inDragger )
{
    SoHandleBoxDragger hb = (SoHandleBoxDragger ) inDragger;
    hb.drag();
}

public static void 
finishCB( Object object, SoDragger inDragger )
{
    SoHandleBoxDragger hb = (SoHandleBoxDragger ) inDragger;
    hb.dragFinish();
}

public static void
valueChangedCB( Object object, SoDragger inDragger )
{
    SoHandleBoxDragger m = (SoHandleBoxDragger ) inDragger;
    final SbMatrix motMat = new SbMatrix(m.getMotionMatrix());

    final SbVec3f trans = new SbVec3f(), scale = new SbVec3f();
    final SbRotation rot = new SbRotation(), scaleOrient = new SbRotation();
    getTransformFast( motMat, trans, rot, scale, scaleOrient);

    // Disconnect the field sensors
    m.translFieldSensor.detach();
    m.scaleFieldSensor.detach();

    if ( m.translation.getValue().operator_not_equal(trans) )
        m.translation.setValue(trans);
    if ( m.scaleFactor.getValue().operator_not_equal(scale) )
        m.scaleFactor.setValue(scale);

    // Reconnect the field sensors
    m.translFieldSensor.attach( (m.translation) );
    m.scaleFieldSensor.attach( (m.scaleFactor) );
}

public static void
fieldSensorCB( Object inDragger, SoSensor sensor )
{
    SoHandleBoxDragger dragger = (SoHandleBoxDragger ) inDragger;

    // Incorporate the new field values into the matrix 
    final SbMatrix motMat = new SbMatrix(dragger.getMotionMatrix());
    dragger.workFieldsIntoTransform(motMat);

    dragger.setMotionMatrix( motMat );
}

public void
setDefaultOnNonWritingFields()
{
    // These nodes may change after construction, but we still
    // don't want to write them out.
    surroundScale.setDefault(true);
    drawStyle.setDefault(true);
    arrowTranslation.setDefault(true);

    // Call the base class...
    super.setDefaultOnNonWritingFields();
}

	
////////////////////////////////////////////////////////////////////////
//
// Description:
//    Initialize the dragger
//
// Use: public, internal
//

public static void initClass()
//
////////////////////////////////////////////////////////////////////////
{
    SO__KIT_INIT_CLASS(SoHandleBoxDragger.class, "HandleBoxDragger", SoDragger.class);
}

}
