/**
 * 
 */
package jscenegraph.interaction.inventor.draggers;

import jscenegraph.database.inventor.SbMatrix;
import jscenegraph.database.inventor.SbName;
import jscenegraph.database.inventor.SbRotation;
import jscenegraph.database.inventor.SbVec3f;
import jscenegraph.database.inventor.SoType;
import jscenegraph.database.inventor.actions.SoGetBoundingBoxAction;
import jscenegraph.database.inventor.actions.SoGetMatrixAction;
import jscenegraph.database.inventor.fields.SoField;
import jscenegraph.database.inventor.fields.SoFieldData;
import jscenegraph.database.inventor.fields.SoSFNode;
import jscenegraph.database.inventor.fields.SoSFRotation;
import jscenegraph.database.inventor.fields.SoSFVec3f;
import jscenegraph.database.inventor.nodes.SoLightModel;
import jscenegraph.database.inventor.nodes.SoMatrixTransform;
import jscenegraph.database.inventor.nodes.SoRotation;
import jscenegraph.database.inventor.nodes.SoSeparator;
import jscenegraph.database.inventor.nodes.SoSubNode;
import jscenegraph.database.inventor.nodes.SoSwitch;
import jscenegraph.database.inventor.sensors.SoFieldSensor;
import jscenegraph.database.inventor.sensors.SoSensor;
import jscenegraph.database.inventor.sensors.SoDataSensor;
import jscenegraph.interaction.inventor.nodes.SoAntiSquish;
import jscenegraph.interaction.inventor.nodes.SoSurroundScale;
import jscenegraph.nodekits.inventor.nodekits.SoNodekitCatalog;
import jscenegraph.nodekits.inventor.nodekits.SoSubKit;
import jscenegraph.port.Util;

/**
 * @author BOYADJIAN
 *
 */
/*
 *
 *  Copyright (C) 2000 Silicon Graphics, Inc.  All Rights Reserved. 
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  Further, this software is distributed without any warranty that it is
 *  free of the rightful claim of any third person regarding infringement
 *  or the like.  Any license provided herein, whether implied or
 *  otherwise, applies only to this software file.  Patent licenses, if
 *  any, provided herein do not apply to combinations of this program with
 *  other software, or any other product whatsoever.
 * 
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 *  Contact information: Silicon Graphics, Inc., 1600 Amphitheatre Pkwy,
 *  Mountain View, CA  94043, or:
 * 
 *  http://www.sgi.com 
 * 
 *  For further information regarding this notice, see: 
 * 
 *  http://oss.sgi.com/projects/GenInfo/NoticeExplan/
 *
 */


/*
 * Copyright (C) 1990,91   Silicon Graphics, Inc.
 *
 _______________________________________________________________________
 ______________  S I L I C O N   G R A P H I C S   I N C .  ____________
 |
 |   $Revision: 1.1.1.1 $
 |
 |   Description:
 |      This file defines a trackball-like dragger which allows the
 |      user to drag the center of rotation to a new location.
 |
 | NOTE TO DEVELOPERS:
 |     For info about the structure of SoCenterballDragger:
 |     [1] compile: /usr/share/src/Inventor/samples/ivNodeKitStructure
 |     [2] type:    ivNodeKitStructure SoCenterballDragger.
 |     [3] The program prints a diagram of the scene graph and a table with 
 |         information about each part.
 |
 |
 |  The following parts in this dragger are created at construction time.
 |  'ResourceName' corresponds to the name of the default geometry for the
 |  part. The dragger's constructor gets the scene graph for 'ResourceName'
 |  by querying the global dictionary ( SoDB::getByName("ResourceName"); ).  
 |
 |  Resource Name:                           Part Name:
 |
 |       centerballRotator                     - rotator.rotator
 |       centerballRotatorActive               - rotator.rotatorActive
 |
 |       centerballStripe                    - XRotator.rotator
 |       centerballStripeActive              - XRotator.rotatorActive
 |       centerballStripe                    - YRotator.rotator
 |       centerballStripeActive              - YRotator.rotatorActive
 |       centerballStripe                    - ZRotator.rotator
 |       centerballStripeActive              - ZRotator.rotatorActive
 |
 |       centerballCenterChanger              - XCenterChanger.translator
 |       centerballCenterChangerActive        - XCenterChanger.translatorActive
 |       centerballCenterXAxisFeedback        - XCenterChanger.xAxisFeedback
 |       centerballCenterYAxisFeedback        - XCenterChanger.yAxisFeedback
 |
 |       centerballCenterChanger              - YCenterChanger.translator
 |       centerballCenterChangerActive        - YCenterChanger.translatorActive
 |       centerballCenterXAxisFeedback        - YCenterChanger.xAxisFeedback
 |       centerballCenterYAxisFeedback        - YCenterChanger.yAxisFeedback
 |
 |       centerballCenterChanger              - ZCenterChanger.translator
 |       centerballCenterChangerActive        - ZCenterChanger.translatorActive
 |       centerballCenterXAxisFeedback        - ZCenterChanger.xAxisFeedback
 |       centerballCenterYAxisFeedback        - ZCenterChanger.yAxisFeedback
 |
 |       centerballXAxis                       - XAxis
 |       centerballYAxis                       - YAxis
 |       centerballZAxis                       - ZAxis
 |
 |   Author(s): Paul Isaacs, Howard Look
 |
 ______________  S I L I C O N   G R A P H I C S   I N C .  ____________
 _______________________________________________________________________
 */

//#ifndef  _SO_CENTERBALL_DRAGGER_
//#define  _SO_CENTERBALL_DRAGGER_
//
//#include <Inventor/SbLinear.h>
//#include <Inventor/sensors/SoSensor.h>
//#include <Inventor/draggers/SoDragger.h>
//#include <Inventor/fields/SoSFVec3f.h>
//#include <Inventor/fields/SoSFRotation.h>
//
//class SoFieldSensor;
//class SoInput;
//class SoGetBoundingBoxAction;
//class SoGetMatrixAction;


////////////////////////////////////////////////////////////////////////////////
//! Striped ball you rotate and re-center by dragging with the mouse.
/*!
\class SoCenterballDragger
\ingroup Draggers
SoCenterballDragger 
is a composite dragger. Its shape is a sphere defined by three intersecting 
circles. Where the circles intersect (at the ends of the x, y and z axes) 
there are sets of small green crosshairs.
Dragging a pair of crosshairs translates the entire centerball within the plane
of the crosshairs.  
The interface of the sphere and circles is just like SoTrackballDragger.
Dragging a circle rotates about a constrained axis and dragging the
areas between them rotates the sphere freely about the center.
An invisible but pickable sphere initiates the free-rotation dragging.


When you drag the crosshairs, the 
\b center  field is updated; there is no \b translation  field.
Dragging other parts of the centerball updates the
\b rotation  field.  As with all draggers, if you change the 
fields the dragger moves in response.


The draggers used for the crosshair parts are SoTranslate2Draggers, 
so pressing the <tt>&lt;Shift&gt;</tt> key allows you to constrain motion to slide along
either the local \b x axis  or \b y axis  of that crosshair..  The direction is determined by your initial
mouse gesture after pressing the key.  Releasing the key removes the constraint.


<em>Remember:</em> This is <em>not</em> an SoTransform!
If you want to move other objects with this dragger, you can either: 


[a] Use an SoCenterballManip, which is subclassed from SoTransform. 
The manipulator creates one of
these draggers and uses it as the interface to edit the manipulator's fields.
(See the SoCenterballManip man page.)


[b] Use field-to-field connections to connect the fields of this dragger to
those of any SoTransformation node.


You can change the parts in any instance of this dragger using
setPart().
The default part geometries are defined as resources for this 
SoCenterballDragger class.  They are detailed in the 
Dragger Resources section of the online reference page for this
class.
You can make your program use different default resources for the parts
by copying the file
\b /usr/share/data/draggerDefaults/centerballDragger.iv 
into your own directory, editing the file, and then
setting the environment variable \b SO_DRAGGER_DIR  to be a path to that directory.

\par File Format/Default
\par
\code
CenterballDragger {
  renderCaching AUTO
  boundingBoxCaching AUTO
  renderCulling AUTO
  pickCulling AUTO
  isActive FALSE
  rotation 0 0 1 0
  center 0 0 0
}
\endcode

\par See Also
\par
SoInteractionKit, SoDragger, SoDirectionalLightDragger, SoDragPointDragger, SoHandleBoxDragger, SoJackDragger, SoPointLightDragger, SoRotateCylindricalDragger, SoRotateDiscDragger, SoRotateSphericalDragger, SoScale1Dragger, SoScale2Dragger, SoScale2UniformDragger, SoScaleUniformDragger, SoSpotLightDragger, SoTabBoxDragger, SoTabPlaneDragger, SoTrackballDragger, SoTransformBoxDragger, SoTranslate1Dragger, SoTranslate2Dragger
*/
////////////////////////////////////////////////////////////////////////////////

public class SoCenterballDragger extends SoDragger {

    //SO_KIT_HEADER(SoCenterballDragger);
	private final SoSubKit kitHeader = SoSubKit.SO_KIT_HEADER(SoCenterballDragger.class,this);

	public                                                                     
    static SoType       getClassTypeId()        /* Returns class type id */   
                                    { return SoSubNode.getClassTypeId(SoCenterballDragger.class); }                   
    public SoType      getTypeId()       /* Returns type id      */
    {
		return kitHeader == null ? super.getTypeId() : kitHeader.getClassTypeId();		    	
    }
  public                                                                  
    SoFieldData   getFieldData() {
	  return kitHeader == null ? super.getFieldData() : kitHeader.getFieldData(); 
  }
  public  static SoFieldData[] getFieldDataPtr()                              
        { return SoSubNode.getFieldDataPtr(SoCenterballDragger.class); }              

	
    /* Returns an SoNodekitCatalog for the node */                            
    public SoNodekitCatalog getNodekitCatalog() {
    	if(kitHeader == null) {
    		return super.getNodekitCatalog();
    	}
    	return kitHeader.getNodekitCatalog();
    }

    //! For making the dragger surround what lies above it.
    //SO_KIT_CATALOG_ENTRY_HEADER(surroundScale);
    protected final SoSFNode surroundScale = new SoSFNode();
    //! For keeping the dragger even size in all 3 directions
    //SO_KIT_CATALOG_ENTRY_HEADER(antiSquish);
    protected final SoSFNode antiSquish = new SoSFNode();

    //! Translates whole dragger to location of center.
    //SO_KIT_CATALOG_ENTRY_HEADER(translateToCenter);
    protected final SoSFNode translateToCenter = new SoSFNode();

    //SO_KIT_CATALOG_ENTRY_HEADER(lightModel);
    protected final SoSFNode lightModel = new SoSFNode();

    //SO_KIT_CATALOG_ENTRY_HEADER(rotator);
    protected final SoSFNode rotator = new SoSFNode();

    //SO_KIT_CATALOG_ENTRY_HEADER(YRotator);
    protected final SoSFNode YRotator = new SoSFNode();
    //SO_KIT_CATALOG_ENTRY_HEADER(ZCenterChanger);
    protected final SoSFNode ZCenterChanger = new SoSFNode();
    //SO_KIT_CATALOG_ENTRY_HEADER(ZAxisSwitch);
    protected final SoSFNode ZAxisSwitch = new SoSFNode();
    //SO_KIT_CATALOG_ENTRY_HEADER(ZAxis);
    protected final SoSFNode ZAxis = new SoSFNode();

    //SO_KIT_CATALOG_ENTRY_HEADER(rotX90);
    protected final SoSFNode rotX90 = new SoSFNode();

    //SO_KIT_CATALOG_ENTRY_HEADER(ZRotator);
    protected final SoSFNode ZRotator = new SoSFNode();
    //SO_KIT_CATALOG_ENTRY_HEADER(YCenterChanger);
    protected final SoSFNode YCenterChanger = new SoSFNode();
    //SO_KIT_CATALOG_ENTRY_HEADER(YAxisSwitch);
    protected final SoSFNode YAxisSwitch = new SoSFNode();
    //SO_KIT_CATALOG_ENTRY_HEADER(YAxis);
    protected final SoSFNode YAxis = new SoSFNode();

    //SO_KIT_CATALOG_ENTRY_HEADER(rotY90);
    protected final SoSFNode rotY90 = new SoSFNode();

    //SO_KIT_CATALOG_ENTRY_HEADER(XRotator);
    protected final SoSFNode XRotator = new SoSFNode();

    //SO_KIT_CATALOG_ENTRY_HEADER(rot2X90);
    protected final SoSFNode rot2X90 = new SoSFNode();

    //SO_KIT_CATALOG_ENTRY_HEADER(XCenterChanger);
    protected final SoSFNode XCenterChanger = new SoSFNode();
    //SO_KIT_CATALOG_ENTRY_HEADER(XAxisSwitch);
    protected final SoSFNode XAxisSwitch = new SoSFNode();
    //SO_KIT_CATALOG_ENTRY_HEADER(XAxis);
    protected final SoSFNode XAxis = new SoSFNode();

  //public:
    //! Constructor.
    public SoCenterballDragger() {
    	kitHeader.SO_KIT_CONSTRUCTOR(SoCenterballDragger.class);

        isBuiltIn = true;

        // Create the center translator, a matrix that will move 
        // the dragger over the center. It's separate from the motion matrix
        // because 'center' does not affect an aggregate tranform matrix.
        kitHeader.SO_KIT_ADD_CATALOG_ENTRY(translateToCenter,"translateToCenter", SoMatrixTransform.class, true,
                                    "topSeparator", "geomSeparator", true);

        // Don't create this by default. It's only really put into use
        // if this dragger is put inside a manipulator.
        kitHeader.SO_KIT_ADD_CATALOG_ENTRY(surroundScale,"surroundScale", SoSurroundScale.class,
                                        true, "topSeparator", "geomSeparator", true);
        // Create an anti-squish node by default.
        kitHeader.SO_KIT_ADD_CATALOG_ENTRY(antiSquish,"antiSquish", SoAntiSquish.class,
                                    false, "topSeparator", "geomSeparator", true);

        // This whole manip gets modelled in BASE_COLOR
        kitHeader.SO_KIT_ADD_CATALOG_ENTRY(lightModel,"lightModel", SoLightModel.class,
                                    true, "topSeparator", "geomSeparator",true);

        // This little grouping goes under the geomSeparator, since it's 
        // geometry only, not draggers.
        kitHeader.SO_KIT_ADD_CATALOG_ENTRY(XAxisSwitch,"XAxisSwitch", SoSwitch.class, true,
                                    "geomSeparator","",false);
        kitHeader.SO_KIT_ADD_CATALOG_ENTRY(XAxis,"XAxis", SoSeparator.class, true,
                                    "XAxisSwitch","",true);
        kitHeader.SO_KIT_ADD_CATALOG_ENTRY(YAxisSwitch,"YAxisSwitch", SoSwitch.class, true,
                                    "geomSeparator","",false);
        kitHeader.SO_KIT_ADD_CATALOG_ENTRY(YAxis,"YAxis", SoSeparator.class, true,
                                    "YAxisSwitch","",true);
        kitHeader.SO_KIT_ADD_CATALOG_ENTRY(ZAxisSwitch,"ZAxisSwitch", SoSwitch.class, true,
                                    "geomSeparator","",false);
        kitHeader.SO_KIT_ADD_CATALOG_ENTRY(ZAxis,"ZAxis", SoSeparator.class, true,
                                    "ZAxisSwitch","",true);

        // The rest of the stuff will go after the geomSeparator
        kitHeader.SO_KIT_ADD_CATALOG_ENTRY(rotator,"rotator", SoRotateSphericalDragger.class, true,
                                    "topSeparator","",true);

        kitHeader.SO_KIT_ADD_CATALOG_ENTRY(YRotator,"YRotator", SoRotateCylindricalDragger.class, true,
                                    "topSeparator","",true);
        kitHeader.SO_KIT_ADD_CATALOG_ENTRY(ZCenterChanger,"ZCenterChanger", SoTranslate2Dragger.class, true,
                                    "topSeparator","",true);

        kitHeader.SO_KIT_ADD_CATALOG_ENTRY(rotX90,"rotX90", SoRotation.class, true,
                                    "topSeparator","",false);
        kitHeader.SO_KIT_ADD_CATALOG_ENTRY(ZRotator,"ZRotator", SoRotateCylindricalDragger.class, true,
                                    "topSeparator","",true);
        kitHeader.SO_KIT_ADD_CATALOG_ENTRY(YCenterChanger,"YCenterChanger", SoTranslate2Dragger.class, true,
                                    "topSeparator","",true);

        kitHeader.SO_KIT_ADD_CATALOG_ENTRY(rotY90,"rotY90", SoRotation.class, true,
                                    "topSeparator","",false);
        kitHeader.SO_KIT_ADD_CATALOG_ENTRY(XCenterChanger,"XCenterChanger", SoTranslate2Dragger.class, true,
                                    "topSeparator","",true);

        kitHeader.SO_KIT_ADD_CATALOG_ENTRY(rot2X90,"rot2X90", SoRotation.class, true,
                                    "topSeparator","",false);
        kitHeader.SO_KIT_ADD_CATALOG_ENTRY(XRotator,"XRotator", SoRotateCylindricalDragger.class, true,
                                    "topSeparator","",true);


        if ( kitHeader.SO_KIT_IS_FIRST_INSTANCE())
            readDefaultParts("centerballDragger.iv", /*(String)Util.toString(*/geomBuffer/*)*/, Util.sizeof(geomBuffer));

        kitHeader.SO_KIT_ADD_FIELD(rotation,"rotation", new SbRotation(0.0f, 0.0f, 0.0f, 1.0f));
        kitHeader.SO_KIT_ADD_FIELD(center,"center", new SbVec3f(0.0f, 0.0f, 0.0f));

        SO_KIT_INIT_INSTANCE();

        // Make the anti-squish node surround the biggest dimension
        SoAntiSquish as = (SoAntiSquish)SO_GET_ANY_PART( this, "antiSquish", SoAntiSquish.class);
        as.sizing.setValue(SoAntiSquish.Sizing.LONGEST_DIAGONAL);

        // Make the dragger phong shaded by default.
        SoLightModel lm = new SoLightModel();
        lm.model.setValue(SoLightModel.Model.PHONG);
        setAnyPartAsDefault( "lightModel", lm );

        // Create the child draggers that live under this dragger.

            // ROTATOR BALL
                /*SoDragger *ball = (SoDragger *) */ getAnyPart("rotator", true );

            // STRIPES
                SoDragger[] stps = new SoDragger[3];
                stps[0] = (SoDragger)SO_GET_ANY_PART(this,"XRotator", SoDragger.class);
                stps[1] = (SoDragger)SO_GET_ANY_PART(this,"YRotator", SoDragger.class);
                stps[2] = (SoDragger)SO_GET_ANY_PART(this,"ZRotator", SoDragger.class);

            // CENTER CHANGERS
                SoDragger[] ccs = new SoDragger[3];
                ccs[0] = (SoDragger)SO_GET_ANY_PART(this,"XCenterChanger", SoDragger.class);
                ccs[1] = (SoDragger)SO_GET_ANY_PART(this,"YCenterChanger", SoDragger.class);
                ccs[2] = (SoDragger)SO_GET_ANY_PART(this,"ZCenterChanger", SoDragger.class);

        // AXES
            setPartAsDefault("XAxis",         "centerballXAxis");
            setPartAsDefault("YAxis",         "centerballYAxis");
            setPartAsDefault("ZAxis",         "centerballZAxis");

        // Turn off the axes completely. They're just used as feedback
            setSwitchValue( XAxisSwitch.getValue(), SoSwitch.SO_SWITCH_NONE );
            setSwitchValue( YAxisSwitch.getValue(), SoSwitch.SO_SWITCH_NONE );
            setSwitchValue( ZAxisSwitch.getValue(), SoSwitch.SO_SWITCH_NONE );

        // Rotation nodes that orient the parts...
            SoRotation rNodeX90 = new SoRotation();
            SoRotation rNodeY90 = new SoRotation();
            rNodeX90.rotation.setValue( new SbVec3f(1,0,0), 1.57079f );
            rNodeY90.rotation.setValue( new SbVec3f(0,1,0), 1.57079f );

            setAnyPartAsDefault( "rotX90",  rNodeX90 );
            setAnyPartAsDefault( "rotY90",  rNodeY90 );
            setAnyPartAsDefault( "rot2X90", rNodeX90 );

        // Update the rotation field when the motionMatrix is set.
        addValueChangedCallback(   SoCenterballDragger::valueChangedCB );

        // Updates the motionMatrix when the rotation field is set.
        rotFieldSensor= new SoFieldSensor(SoCenterballDragger::fieldSensorCB,this);
        rotFieldSensor.setPriority(0);

        // Updates the motionMatrix when the center field is set.
        centerFieldSensor= new SoFieldSensor(
                    SoCenterballDragger::fieldSensorCB, this);
        centerFieldSensor.setPriority(0);

        setUpConnections( true, true );
    }

    public final SoSFRotation rotation = new SoSFRotation();
    public final SoSFVec3f    center = new SoSFVec3f();

  //SoEXTENDER public:
    //! Saves the matrix that moves the center relative to the motionMatrix
    //! after it calls the default SoDragger method.
    public void saveStartParameters() {
    	//TODO
    }

  public static void         initClass() {    //!< initialize the class
	    SO__KIT_INIT_CLASS(SoCenterballDragger.class, "CenterballDragger", SoDragger.class);
  }

  //protected:
    
    protected SoFieldSensor rotFieldSensor; //ptr
    protected SoFieldSensor centerFieldSensor; //ptr
    protected static void fieldSensorCB( Object inDragger, SoSensor inSensor) {
    SoCenterballDragger dragger = (SoCenterballDragger ) inDragger;

    SoField trigF = null;
    if ( inSensor != null)
        trigF = ((SoDataSensor )inSensor).getTriggerField();

    // If inSensor is NULL or the trigger field is NULL, we will
    // do both the matrix and center stuff, since we don't know what changed.
    boolean doMatrix = true;
    boolean doCenter   = true;

    // But if this is invoked by a sensor with a trigger field, 
    // we can do different things if it was the center 
    // or the rotation fields that triggered.
        if ( trigF != null) {

            if ( trigF == dragger.rotation )
                doCenter = false;

            if ( trigF == dragger.center )
                doMatrix = false;
        }

    if ( doCenter ) {

        // Center field is given in local space of the motionmatrix.
        // Copy this value as a translation into the translateToCenter matrix
        SbVec3f center = new SbVec3f(dragger.center.getValue());

        // Build a matrix to translate the origin of the ball
        // to the transformed center...
        final SbMatrix newMat = new SbMatrix();
        newMat.setTranslate( center );

        // Set the translate to center matrix...
        SoMatrixTransform mx = (SoMatrixTransform)SO_GET_ANY_PART(dragger,"translateToCenter",
                                    SoMatrixTransform.class );
        mx.matrix.setValue( newMat);

        // We need to specifically tell the dragger to invoke the
        // value changed callbacks, since only calling setMotionMatrix
        // automatically does this.
        if ( doMatrix == false )
            dragger.valueChanged();
    }

    if ( doMatrix ) {

        SbMatrix motMat = new SbMatrix(dragger.getMotionMatrix());
        dragger.workFieldsIntoTransform(motMat);

        dragger.setMotionMatrix(motMat);
    }
    }
    protected static void valueChangedCB( Object obj, SoDragger dragger) {
    	//TODO
    }

    protected void transferCenterDraggerMotion(SoDragger childDragger) {
    	//TODO
    }

    //! Differs from SoDragger as follows: If it has a surroundScale node with 
    //! 'ignoreInBbox' set to true, this means surroundScale is calculating its 
    //! bbox for sizing. So we also need to ignore the 'translateToCenter' 
    //! matrix. Take care of this by disabling notification of 
    //! 'translateToCenter', changing it to identity, running action, 
    //! and then putting everything back.
    /*protected*/public void        getBoundingBox(SoGetBoundingBoxAction action) {
        boolean oldFlag = true;
        SoSurroundScale ss = (SoSurroundScale) SO_CHECK_PART(this, "surroundScale", SoSurroundScale.class);
        if (ss != null) {
            oldFlag = ss.isDoingTranslations();
            ss.setDoingTranslations(false);
        }

        // Call base class method
        super.getBoundingBox( action );

        if (ss != null)
            ss.setDoingTranslations(oldFlag);
    }
    protected void        getMatrix(SoGetMatrixAction action) {
    	//TODO
    }

    protected static void kidStartCB( Object obj, SoDragger dragger ) {
    	//TODO
    }
    protected static void kidFinishCB( Object obj, SoDragger dragger ) {
    	//TODO
    }

    protected void setSwitches( SoDragger activeChild ) {
    	//TODO
    }

    //! detach/attach any sensors, callbacks, and/or field connections.
    //! Also set geometry of childDraggers to be our default instead of their
    //! regular default, using our resources.
    //! Called by:            start/end of SoBaseKit::readInstance
    //! and on new copy by:   start/end of SoBaseKit::copy.
    //! Classes that redefine must call setUpConnections(true,true) 
    //! at end of constructor.
    //! Returns the state of the node when this was called.
    /*protected*/public boolean setUpConnections( boolean onOff, boolean doItAlways /*= false*/ ) {
    	if(kitHeader == null) { // java port
    		return super.setUpConnections(onOff, doItAlways);
    	}
    	
    if ( !doItAlways && connectionsSetUp == onOff)
        return onOff;

    if ( onOff ) {

        // We connect AFTER base class.
        super.setUpConnections( onOff, false );

        // FIRST, DEAL WITH CHILD DRAGGERS:
        // Set the default parts and add callback to our child draggers.
        // The parts will only be changed if they are still set as default.
        // So we won't stomp over a non-default, intentionally set part.
        final SoSeparator dummySep = new SoSeparator();
        dummySep.ref();

        // BALL
        SoDragger ball;
        ball = (SoDragger ) getAnyPart( "rotator", false );
        if (ball != null) {
            ball.setPartAsDefault("rotator",      "centerballRotator");
            ball.setPartAsDefault("rotatorActive","centerballRotatorActive");
            ball.setPartAsDefault(new SbName("feedback"),      dummySep);
            ball.setPartAsDefault(new SbName("feedbackActive"),dummySep);
            registerChildDragger( ball );
            ball.addStartCallback(SoCenterballDragger::kidStartCB, this );
            ball.addFinishCallback(SoCenterballDragger::kidFinishCB, this );
        }

        // STRIPES
        SoDragger[] stps = new SoDragger[3];
        stps[0] = (SoDragger ) getAnyPart("XRotator", false);
        stps[1] = (SoDragger ) getAnyPart("YRotator", false);
        stps[2] = (SoDragger ) getAnyPart("ZRotator", false);
        int i;
        for (i = 0; i < 3; i++) {
            if ( stps[i] == null ) continue;
            stps[i].setPartAsDefault("rotator",      "centerballStripe" );
            stps[i].setPartAsDefault("rotatorActive","centerballStripeActive");
            stps[i].setPartAsDefault(new SbName("feedback"),      dummySep );
            stps[i].setPartAsDefault(new SbName("feedbackActive"),dummySep );
            registerChildDragger( stps[i] );
            stps[i].addStartCallback(SoCenterballDragger::kidStartCB,this);
            stps[i].addFinishCallback(SoCenterballDragger::kidFinishCB,this);
        }
        // CENTER CHANGERS
        SoDragger[] ccs = new SoDragger[3];
        ccs[0] = (SoDragger ) getAnyPart("XCenterChanger", false );
        ccs[1] = (SoDragger ) getAnyPart("YCenterChanger", false );
        ccs[2] = (SoDragger ) getAnyPart("ZCenterChanger", false );
        for (i = 0; i < 3; i++) {
            if ( ccs[i] == null ) continue;
            ccs[i].setPartAsDefault("translator", 
                        "centerballCenterChanger");
            ccs[i].setPartAsDefault("translatorActive",
                        "centerballCenterChangerActive");
            ccs[i].setPartAsDefault(new SbName("feedback"),       dummySep );
            ccs[i].setPartAsDefault(new SbName("feedbackActive"), dummySep );
            ccs[i].setPartAsDefault("xAxisFeedback",
                        "centerballCenterXAxisFeedback");
            ccs[i].setPartAsDefault("yAxisFeedback",
                        "centerballCenterYAxisFeedback");

            // When the centers translate, they should not affect our
            // motion matrix. Instead, they affect our translateToCenter
            // node.
            registerChildDraggerMovingIndependently( ccs[i] );
            ccs[i].addStartCallback(SoCenterballDragger::kidStartCB,this);
            ccs[i].addFinishCallback(SoCenterballDragger::kidFinishCB,this);
        }
        dummySep.unref();

        // Call the sensor CBs to make things are up-to-date.
        fieldSensorCB( this, null );

        // Connect the field sensors
        if (rotFieldSensor.getAttachedField() != rotation)
            rotFieldSensor.attach( rotation );
        if (centerFieldSensor.getAttachedField() != center)
            centerFieldSensor.attach( center );
    }
    else {

        // We disconnect BEFORE base class.

        // Disconnect the field sensors.
        if (rotFieldSensor.getAttachedField() != null)
            rotFieldSensor.detach();
        if (centerFieldSensor.getAttachedField() != null)
            centerFieldSensor.detach();

        // REMOVE callbacks from our child draggers:
        // BALL
        SoDragger ball;
        ball = (SoDragger) getAnyPart( "rotator", false );
        if (ball != null) {
            unregisterChildDragger( ball );
            ball.removeStartCallback(SoCenterballDragger::kidStartCB, this );
            ball.removeFinishCallback(SoCenterballDragger::kidFinishCB, this );
        }

        // STRIPES
        SoDragger[] stps = new SoDragger[3];
        stps[0] = (SoDragger) getAnyPart("XRotator", false);
        stps[1] = (SoDragger) getAnyPart("YRotator", false);
        stps[2] = (SoDragger) getAnyPart("ZRotator", false);
        int i;
        for (i = 0; i < 3; i++) {
            if ( stps[i] == null ) continue;
            unregisterChildDragger( stps[i] );
            stps[i].removeStartCallback(SoCenterballDragger::kidStartCB,this);
            stps[i].removeFinishCallback(SoCenterballDragger::kidFinishCB,this);
        }
        // CENTER CHANGERS
        SoDragger[] ccs = new SoDragger[3];
        ccs[0] = (SoDragger) getAnyPart("XCenterChanger", false );
        ccs[1] = (SoDragger) getAnyPart("YCenterChanger", false );
        ccs[2] = (SoDragger) getAnyPart("ZCenterChanger", false );
        for (i = 0; i < 3; i++) {
            if ( ccs[i] == null ) continue;
            unregisterChildDraggerMovingIndependently( ccs[i] );
            ccs[i].removeStartCallback(SoCenterballDragger::kidStartCB,this);
            ccs[i].removeFinishCallback(SoCenterballDragger::kidFinishCB,this);
        }


        super.setUpConnections( onOff, false );
    }

    return !(connectionsSetUp = onOff);
    }

    /*protected*/public void setDefaultOnNonWritingFields() {
    	//TODO
    }

    /*protected*/public void destructor() {
    	//TODO
    	super.destructor();
    }

  //private:

    //! Used by centerball to save initial matrix of the 'translateToCenter'
    //! part when the child begins to move.
    final SbMatrix startCenterMatrix = new SbMatrix();

    //! character string from which the shared geometry is read
    static final short[] geomBuffer = {
    		0x23,0x49,0x6e,0x76,0x65,0x6e,0x74,0x6f,0x72,0x20,0x56,0x32,0x2e,0x31,0x20,0x62,0x69,0x6e,0x61,0x72,0x79,0x20,0x20,0xa,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x17,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x11,0x63,0x65,0x6e,0x74,0x65,0x72,0x62,0x61,0x6c,0x6c,0x52,0x6f,0x74,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xd,0x72,0x65,0x6e,0x64,0x65,0x72,0x43,0x61,0x63,0x68,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x4f,0x4e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x9,0x44,0x72,0x61,0x77,0x53,0x74,0x79,0x6c,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x73,0x74,0x79,0x6c,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x9,0x49,0x4e,0x56,0x49,0x53,0x49,0x42,0x4c,0x45,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x43,0x6f,0x6d,0x70,0x6c,0x65,0x78,0x69,0x74,0x79,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x3e,0x99,0x99,0x9a,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x53,0x70,0x68,0x65,0x72,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x6,0x72,0x61,0x64,0x69,0x75,0x73,0x0,0x0,0x3f,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x17,0x63,0x65,0x6e,0x74,0x65,0x72,0x62,0x61,0x6c,0x6c,0x52,0x6f,0x74,0x61,0x74,0x6f,0x72,0x41,0x63,0x74,0x69,0x76,0x65,0x0,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xd,0x72,0x65,0x6e,0x64,0x65,0x72,0x43,0x61,0x63,0x68,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x4f,0x4e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x9,0x44,0x72,0x61,0x77,0x53,0x74,0x79,0x6c,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x73,0x74,0x79,0x6c,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x9,0x49,0x4e,0x56,0x49,0x53,0x49,0x42,0x4c,0x45,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x43,0x6f,0x6d,0x70,0x6c,0x65,0x78,0x69,0x74,0x79,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x3e,0x99,0x99,0x9a,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x53,0x70,0x68,0x65,0x72,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x6,0x72,0x61,0x64,0x69,0x75,0x73,0x0,0x0,0x3f,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x1f,0x43,0x45,0x4e,0x54,0x45,0x52,0x42,0x41,0x4c,0x4c,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x41,0x43,0x54,0x49,0x56,0x45,0x5f,0x4d,0x54,0x4c,0x2b,0x30,0x0,0x0,0x0,0x0,0x8,0x4d,0x61,0x74,0x65,0x72,0x69,0x61,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0xc,0x64,0x69,0x66,0x66,0x75,0x73,0x65,0x43,0x6f,0x6c,0x6f,0x72,0x0,0x0,0x0,0x1,0x3f,0x0,0x0,0x0,0x3f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xd,0x65,0x6d,0x69,0x73,0x73,0x69,0x76,0x65,0x43,0x6f,0x6c,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x3f,0x0,0x0,0x0,0x3f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x1f,0x43,0x45,0x4e,0x54,0x45,0x52,0x42,0x41,0x4c,0x4c,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x53,0x54,0x52,0x49,0x50,0x45,0x5f,0x4d,0x54,0x4c,0x2b,0x31,0x0,0x0,0x0,0x0,0x8,0x4d,0x61,0x74,0x65,0x72,0x69,0x61,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0xc,0x64,0x69,0x66,0x66,0x75,0x73,0x65,0x43,0x6f,0x6c,0x6f,0x72,0x0,0x0,0x0,0x1,0x3f,0x0,0x0,0x0,0x3f,0x0,0x0,0x0,0x3f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xd,0x65,0x6d,0x69,0x73,0x73,0x69,0x76,0x65,0x43,0x6f,0x6c,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x3f,0x0,0x0,0x0,0x3f,0x0,0x0,0x0,0x3f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x27,0x43,0x45,0x4e,0x54,0x45,0x52,0x42,0x41,0x4c,0x4c,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x43,0x45,0x4e,0x54,0x45,0x52,0x5f,0x43,0x48,0x41,0x4e,0x47,0x45,0x52,0x5f,0x4d,0x54,0x4c,0x2b,0x32,0x0,0x0,0x0,0x0,0x8,0x4d,0x61,0x74,0x65,0x72,0x69,0x61,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0xc,0x64,0x69,0x66,0x66,0x75,0x73,0x65,0x43,0x6f,0x6c,0x6f,0x72,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x3f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xd,0x65,0x6d,0x69,0x73,0x73,0x69,0x76,0x65,0x43,0x6f,0x6c,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x3f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x1a,0x43,0x45,0x4e,0x54,0x45,0x52,0x42,0x41,0x4c,0x4c,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x53,0x43,0x41,0x4c,0x45,0x2b,0x33,0x0,0x0,0x0,0x0,0x0,0x5,0x53,0x63,0x61,0x6c,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xb,0x73,0x63,0x61,0x6c,0x65,0x46,0x61,0x63,0x74,0x6f,0x72,0x0,0x3f,0x82,0x4d,0xd3,0x3f,0x82,0x4d,0xd3,0x3f,0x82,0x4d,0xd3,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x1f,0x43,0x45,0x4e,0x54,0x45,0x52,0x42,0x41,0x4c,0x4c,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x52,0x4f,0x54,0x5f,0x5a,0x5f,0x54,0x4f,0x5f,0x58,0x2b,0x34,0x0,0x0,0x0,0x0,0x8,0x52,0x6f,0x74,0x61,0x74,0x69,0x6f,0x6e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8,0x72,0x6f,0x74,0x61,0x74,0x69,0x6f,0x6e,0x0,0x0,0x0,0x0,0x3f,0x7f,0xff,0xff,0x0,0x0,0x0,0x0,0x3f,0xc9,0xf,0xa6,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x1f,0x43,0x45,0x4e,0x54,0x45,0x52,0x42,0x41,0x4c,0x4c,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x52,0x4f,0x54,0x5f,0x5a,0x5f,0x54,0x4f,0x5f,0x59,0x2b,0x35,0x0,0x0,0x0,0x0,0x8,0x52,0x6f,0x74,0x61,0x74,0x69,0x6f,0x6e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8,0x72,0x6f,0x74,0x61,0x74,0x69,0x6f,0x6e,0x3f,0x7f,0xff,0xff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3f,0xc9,0xf,0xa6,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x22,0x43,0x45,0x4e,0x54,0x45,0x52,0x42,0x41,0x4c,0x4c,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x59,0x5f,0x52,0x49,0x4e,0x47,0x5f,0x50,0x49,0x43,0x4b,0x45,0x52,0x2b,0x36,0x0,0x0,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xd,0x72,0x65,0x6e,0x64,0x65,0x72,0x43,0x61,0x63,0x68,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x4f,0x4e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x9,0x44,0x72,0x61,0x77,0x53,0x74,0x79,0x6c,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x73,0x74,0x79,0x6c,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x9,0x49,0x4e,0x56,0x49,0x53,0x49,0x42,0x4c,0x45,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x43,0x6f,0x6d,0x70,0x6c,0x65,0x78,0x69,0x74,0x79,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x3e,0x99,0x99,0x9a,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x43,0x79,0x6c,0x69,0x6e,0x64,0x65,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x6,0x72,0x61,0x64,0x69,0x75,0x73,0x0,0x0,0x3f,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x68,0x65,0x69,0x67,0x68,0x74,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x1b,0x43,0x45,0x4e,0x54,0x45,0x52,0x42,0x41,0x4c,0x4c,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x59,0x5f,0x52,0x49,0x4e,0x47,0x2b,0x37,0x0,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xd,0x72,0x65,0x6e,0x64,0x65,0x72,0x43,0x61,0x63,0x68,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x4f,0x4e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x0,0x0,0x0,0xd,0x4e,0x6f,0x72,0x6d,0x61,0x6c,0x42,0x69,0x6e,0x64,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x50,0x45,0x52,0x5f,0x56,0x45,0x52,0x54,0x45,0x58,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf,0x4d,0x61,0x74,0x65,0x72,0x69,0x61,0x6c,0x42,0x69,0x6e,0x64,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x4f,0x56,0x45,0x52,0x41,0x4c,0x4c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb,0x43,0x6f,0x6f,0x72,0x64,0x69,0x6e,0x61,0x74,0x65,0x33,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x70,0x6f,0x69,0x6e,0x74,0x0,0x0,0x0,0x0,0x0,0x0,0x18,0x3f,0x7d,0x20,0x19,0x0,0x0,0x0,0x0,0x3e,0x19,0x6,0x46,0x3f,0x6b,0x5f,0xf6,0x0,0x0,0x0,0x0,0x3e,0xc9,0x57,0x8a,0x3f,0x4a,0x80,0x6b,0x0,0x0,0x0,0x0,0x3f,0x1c,0x9e,0x23,0x3f,0x1c,0x9e,0x23,0x0,0x0,0x0,0x0,0x3f,0x4a,0x80,0x6b,0x3e,0xc9,0x57,0x8a,0x0,0x0,0x0,0x0,0x3f,0x6b,0x5f,0xf6,0x3e,0x19,0x6,0x46,0x0,0x0,0x0,0x0,0x3f,0x7d,0x20,0x19,0xbe,0x19,0x6,0x46,0x0,0x0,0x0,0x0,0x3f,0x7d,0x20,0x19,0xbe,0xc9,0x57,0x8a,0x0,0x0,0x0,0x0,0x3f,0x6b,0x5f,0xf6,0xbf,0x1c,0x9e,0x23,0x0,0x0,0x0,0x0,0x3f,0x4a,0x80,0x6b,0xbf,0x4a,0x80,0x6b,0x0,0x0,0x0,0x0,0x3f,0x1c,0x9e,0x23,0xbf,0x6b,0x5f,0xf6,0x0,0x0,0x0,0x0,0x3e,0xc9,0x57,0x8a,0xbf,0x7d,0x20,0x19,0x0,0x0,0x0,0x0,0x3e,0x19,0x6,0x46,0xbf,0x7d,0x20,0x19,0x0,0x0,0x0,0x0,0xbe,0x19,0x6,0x46,0xbf,0x6b,0x5f,0xf6,0x0,0x0,0x0,0x0,0xbe,0xc9,0x57,0x8a,0xbf,0x4a,0x80,0x6b,0x0,0x0,0x0,0x0,0xbf,0x1c,0x9e,0x13,0xbf,0x1c,0x9e,0x23,0x0,0x0,0x0,0x0,0xbf,0x4a,0x80,0x6b,0xbe,0xc9,0x57,0x8a,0x0,0x0,0x0,0x0,0xbf,0x6b,0x5f,0xf6,0xbe,0x19,0x6,0x46,0x0,0x0,0x0,0x0,0xbf,0x7d,0x20,0x19,0x3e,0x19,0x6,0x46,0x0,0x0,0x0,0x0,0xbf,0x7d,0x20,0x19,0x3e,0xc9,0x57,0x8a,0x0,0x0,0x0,0x0,0xbf,0x6b,0x5f,0xf6,0x3f,0x1c,0x9e,0x23,0x0,0x0,0x0,0x0,0xbf,0x4a,0x80,0x6b,0x3f,0x4a,0x80,0x6b,0x0,0x0,0x0,0x0,0xbf,0x1c,0x9e,0x13,0x3f,0x6b,0x60,0x7,0x0,0x0,0x0,0x0,0xbe,0xc9,0x57,0x69,0x3f,0x7d,0x20,0x19,0x0,0x0,0x0,0x0,0xbe,0x19,0x6,0x3,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x4e,0x6f,0x72,0x6d,0x61,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x6,0x76,0x65,0x63,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x18,0x3f,0x7d,0x20,0x19,0x0,0x0,0x0,0x0,0x3e,0x19,0x6,0x46,0x3f,0x6b,0x5f,0xf6,0x0,0x0,0x0,0x0,0x3e,0xc9,0x57,0x8a,0x3f,0x4a,0x80,0x6b,0x0,0x0,0x0,0x0,0x3f,0x1c,0x9e,0x23,0x3f,0x1c,0x9e,0x23,0x0,0x0,0x0,0x0,0x3f,0x4a,0x80,0x6b,0x3e,0xc9,0x57,0x8a,0x0,0x0,0x0,0x0,0x3f,0x6b,0x5f,0xf6,0x3e,0x19,0x6,0x46,0x0,0x0,0x0,0x0,0x3f,0x7d,0x20,0x19,0xbe,0x19,0x6,0x46,0x0,0x0,0x0,0x0,0x3f,0x7d,0x20,0x19,0xbe,0xc9,0x57,0x8a,0x0,0x0,0x0,0x0,0x3f,0x6b,0x5f,0xf6,0xbf,0x1c,0x9e,0x23,0x0,0x0,0x0,0x0,0x3f,0x4a,0x80,0x6b,0xbf,0x4a,0x80,0x6b,0x0,0x0,0x0,0x0,0x3f,0x1c,0x9e,0x23,0xbf,0x6b,0x5f,0xf6,0x0,0x0,0x0,0x0,0x3e,0xc9,0x57,0x8a,0xbf,0x7d,0x20,0x19,0x0,0x0,0x0,0x0,0x3e,0x19,0x6,0x46,0xbf,0x7d,0x20,0x19,0x0,0x0,0x0,0x0,0xbe,0x19,0x6,0x46,0xbf,0x6b,0x5f,0xf6,0x0,0x0,0x0,0x0,0xbe,0xc9,0x57,0x8a,0xbf,0x4a,0x80,0x6b,0x0,0x0,0x0,0x0,0xbf,0x1c,0x9e,0x13,0xbf,0x1c,0x9e,0x23,0x0,0x0,0x0,0x0,0xbf,0x4a,0x80,0x6b,0xbe,0xc9,0x57,0x8a,0x0,0x0,0x0,0x0,0xbf,0x6b,0x5f,0xf6,0xbe,0x19,0x6,0x46,0x0,0x0,0x0,0x0,0xbf,0x7d,0x20,0x19,0x3e,0x19,0x6,0x46,0x0,0x0,0x0,0x0,0xbf,0x7d,0x20,0x19,0x3e,0xc9,0x57,0x8a,0x0,0x0,0x0,0x0,0xbf,0x6b,0x5f,0xf6,0x3f,0x1c,0x9e,0x23,0x0,0x0,0x0,0x0,0xbf,0x4a,0x80,0x6b,0x3f,0x4a,0x80,0x6b,0x0,0x0,0x0,0x0,0xbf,0x1c,0x9e,0x13,0x3f,0x6b,0x60,0x7,0x0,0x0,0x0,0x0,0xbe,0xc9,0x57,0x69,0x3f,0x7d,0x20,0x19,0x0,0x0,0x0,0x0,0xbe,0x19,0x6,0x3,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x4c,0x69,0x6e,0x65,0x53,0x65,0x74,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xb,0x6e,0x75,0x6d,0x56,0x65,0x72,0x74,0x69,0x63,0x65,0x73,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x6,0x0,0x0,0x0,0x6,0x0,0x0,0x0,0x6,0x0,0x0,0x0,0x6,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x10,0x63,0x65,0x6e,0x74,0x65,0x72,0x62,0x61,0x6c,0x6c,0x53,0x74,0x72,0x69,0x70,0x65,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xd,0x72,0x65,0x6e,0x64,0x65,0x72,0x43,0x61,0x63,0x68,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x4f,0x4e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x22,0x43,0x45,0x4e,0x54,0x45,0x52,0x42,0x41,0x4c,0x4c,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x59,0x5f,0x52,0x49,0x4e,0x47,0x5f,0x50,0x49,0x43,0x4b,0x45,0x52,0x2b,0x36,0x0,0x0,0x0,0x0,0x0,0x9,0x50,0x69,0x63,0x6b,0x53,0x74,0x79,0x6c,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x73,0x74,0x79,0x6c,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x55,0x4e,0x50,0x49,0x43,0x4b,0x41,0x42,0x4c,0x45,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x1f,0x43,0x45,0x4e,0x54,0x45,0x52,0x42,0x41,0x4c,0x4c,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x53,0x54,0x52,0x49,0x50,0x45,0x5f,0x4d,0x54,0x4c,0x2b,0x31,0x0,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x1a,0x43,0x45,0x4e,0x54,0x45,0x52,0x42,0x41,0x4c,0x4c,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x53,0x43,0x41,0x4c,0x45,0x2b,0x33,0x0,0x0,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x1b,0x43,0x45,0x4e,0x54,0x45,0x52,0x42,0x41,0x4c,0x4c,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x59,0x5f,0x52,0x49,0x4e,0x47,0x2b,0x37,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x16,0x63,0x65,0x6e,0x74,0x65,0x72,0x62,0x61,0x6c,0x6c,0x53,0x74,0x72,0x69,0x70,0x65,0x41,0x63,0x74,0x69,0x76,0x65,0x0,0x0,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xd,0x72,0x65,0x6e,0x64,0x65,0x72,0x43,0x61,0x63,0x68,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x4f,0x4e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x1f,0x43,0x45,0x4e,0x54,0x45,0x52,0x42,0x41,0x4c,0x4c,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x41,0x43,0x54,0x49,0x56,0x45,0x5f,0x4d,0x54,0x4c,0x2b,0x30,0x0,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x1a,0x43,0x45,0x4e,0x54,0x45,0x52,0x42,0x41,0x4c,0x4c,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x53,0x43,0x41,0x4c,0x45,0x2b,0x33,0x0,0x0,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x1b,0x43,0x45,0x4e,0x54,0x45,0x52,0x42,0x41,0x4c,0x4c,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x59,0x5f,0x52,0x49,0x4e,0x47,0x2b,0x37,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x24,0x43,0x45,0x4e,0x54,0x45,0x52,0x42,0x41,0x4c,0x4c,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x5a,0x5f,0x41,0x52,0x52,0x4f,0x57,0x53,0x5f,0x50,0x49,0x43,0x4b,0x45,0x52,0x2b,0x38,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xd,0x72,0x65,0x6e,0x64,0x65,0x72,0x43,0x61,0x63,0x68,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x4f,0x4e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x9,0x44,0x72,0x61,0x77,0x53,0x74,0x79,0x6c,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x73,0x74,0x79,0x6c,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x9,0x49,0x4e,0x56,0x49,0x53,0x49,0x42,0x4c,0x45,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x43,0x6f,0x6d,0x70,0x6c,0x65,0x78,0x69,0x74,0x79,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x3c,0x23,0xd7,0xa,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0xb,0x54,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x69,0x6f,0x6e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xb,0x74,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x69,0x6f,0x6e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xbf,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x43,0x75,0x62,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x5,0x77,0x69,0x64,0x74,0x68,0x0,0x0,0x0,0x3e,0x4c,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x68,0x65,0x69,0x67,0x68,0x74,0x0,0x0,0x3e,0x4c,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x64,0x65,0x70,0x74,0x68,0x0,0x0,0x0,0x3c,0x23,0xd7,0xa,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0xb,0x54,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x69,0x6f,0x6e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xb,0x74,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x69,0x6f,0x6e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3f,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x43,0x75,0x62,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x5,0x77,0x69,0x64,0x74,0x68,0x0,0x0,0x0,0x3e,0x4c,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x68,0x65,0x69,0x67,0x68,0x74,0x0,0x0,0x3e,0x4c,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x64,0x65,0x70,0x74,0x68,0x0,0x0,0x0,0x3c,0x23,0xd7,0xa,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x1d,0x43,0x45,0x4e,0x54,0x45,0x52,0x42,0x41,0x4c,0x4c,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x5a,0x5f,0x41,0x52,0x52,0x4f,0x57,0x53,0x2b,0x39,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x47,0x72,0x6f,0x75,0x70,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xd,0x72,0x65,0x6e,0x64,0x65,0x72,0x43,0x61,0x63,0x68,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x4f,0x4e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x0,0x0,0x0,0xd,0x4e,0x6f,0x72,0x6d,0x61,0x6c,0x42,0x69,0x6e,0x64,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x12,0x50,0x45,0x52,0x5f,0x56,0x45,0x52,0x54,0x45,0x58,0x5f,0x49,0x4e,0x44,0x45,0x58,0x45,0x44,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf,0x4d,0x61,0x74,0x65,0x72,0x69,0x61,0x6c,0x42,0x69,0x6e,0x64,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x4f,0x56,0x45,0x52,0x41,0x4c,0x4c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb,0x43,0x6f,0x6f,0x72,0x64,0x69,0x6e,0x61,0x74,0x65,0x33,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x70,0x6f,0x69,0x6e,0x74,0x0,0x0,0x0,0x0,0x0,0x0,0x18,0xbd,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0xbf,0x80,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0xbf,0x80,0x0,0x0,0xbd,0xa3,0xd7,0xa,0x3c,0xa3,0xd7,0xa,0xbf,0x80,0x0,0x0,0xbd,0xa3,0xd7,0xa,0xbc,0xa3,0xd7,0xa,0xbf,0x80,0x0,0x0,0x3d,0xa3,0xd7,0xa,0x3c,0xa3,0xd7,0xa,0xbf,0x80,0x0,0x0,0x3d,0xa3,0xd7,0xa,0xbc,0xa3,0xd7,0xa,0xbf,0x80,0x0,0x0,0xbd,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x3f,0x80,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x3f,0x80,0x0,0x0,0xbd,0xa3,0xd7,0xa,0x3c,0xa3,0xd7,0xa,0x3f,0x80,0x0,0x0,0xbd,0xa3,0xd7,0xa,0xbc,0xa3,0xd7,0xa,0x3f,0x80,0x0,0x0,0x3d,0xa3,0xd7,0xa,0x3c,0xa3,0xd7,0xa,0x3f,0x80,0x0,0x0,0x3d,0xa3,0xd7,0xa,0xbc,0xa3,0xd7,0xa,0x3f,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0xbd,0xcc,0xcc,0xcd,0xbf,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0xbf,0x80,0x0,0x0,0xbc,0xa3,0xd7,0xa,0xbd,0xa3,0xd7,0xa,0xbf,0x80,0x0,0x0,0x3c,0xa3,0xd7,0xa,0xbd,0xa3,0xd7,0xa,0xbf,0x80,0x0,0x0,0xbc,0xa3,0xd7,0xa,0x3d,0xa3,0xd7,0xa,0xbf,0x80,0x0,0x0,0x3c,0xa3,0xd7,0xa,0x3d,0xa3,0xd7,0xa,0xbf,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0xbd,0xcc,0xcc,0xcd,0x3f,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x3f,0x80,0x0,0x0,0xbc,0xa3,0xd7,0xa,0xbd,0xa3,0xd7,0xa,0x3f,0x80,0x0,0x0,0x3c,0xa3,0xd7,0xa,0xbd,0xa3,0xd7,0xa,0x3f,0x80,0x0,0x0,0xbc,0xa3,0xd7,0xa,0x3d,0xa3,0xd7,0xa,0x3f,0x80,0x0,0x0,0x3c,0xa3,0xd7,0xa,0x3d,0xa3,0xd7,0xa,0x3f,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x4e,0x6f,0x72,0x6d,0x61,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x6,0x76,0x65,0x63,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x18,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xbf,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xbf,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xbf,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xbf,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xbf,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xbf,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3f,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3f,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3f,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3f,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3f,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3f,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xbf,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xbf,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xbf,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xbf,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xbf,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xbf,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3f,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3f,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3f,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3f,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3f,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3f,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xe,0x49,0x6e,0x64,0x65,0x78,0x65,0x64,0x4c,0x69,0x6e,0x65,0x53,0x65,0x74,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xa,0x63,0x6f,0x6f,0x72,0x64,0x49,0x6e,0x64,0x65,0x78,0x0,0x0,0x0,0x0,0x0,0x3c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0xff,0xff,0xff,0xff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0xff,0xff,0xff,0xff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0xff,0xff,0xff,0xff,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x4,0xff,0xff,0xff,0xff,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0xff,0xff,0xff,0xff,0x0,0x0,0x0,0x6,0x0,0x0,0x0,0x7,0xff,0xff,0xff,0xff,0x0,0x0,0x0,0x6,0x0,0x0,0x0,0x8,0xff,0xff,0xff,0xff,0x0,0x0,0x0,0x6,0x0,0x0,0x0,0x9,0xff,0xff,0xff,0xff,0x0,0x0,0x0,0x7,0x0,0x0,0x0,0xa,0xff,0xff,0xff,0xff,0x0,0x0,0x0,0x7,0x0,0x0,0x0,0xb,0xff,0xff,0xff,0xff,0x0,0x0,0x0,0xc,0x0,0x0,0x0,0xd,0xff,0xff,0xff,0xff,0x0,0x0,0x0,0xc,0x0,0x0,0x0,0xe,0xff,0xff,0xff,0xff,0x0,0x0,0x0,0xc,0x0,0x0,0x0,0xf,0xff,0xff,0xff,0xff,0x0,0x0,0x0,0xd,0x0,0x0,0x0,0x10,0xff,0xff,0xff,0xff,0x0,0x0,0x0,0xd,0x0,0x0,0x0,0x11,0xff,0xff,0xff,0xff,0x0,0x0,0x0,0x12,0x0,0x0,0x0,0x13,0xff,0xff,0xff,0xff,0x0,0x0,0x0,0x12,0x0,0x0,0x0,0x14,0xff,0xff,0xff,0xff,0x0,0x0,0x0,0x12,0x0,0x0,0x0,0x15,0xff,0xff,0xff,0xff,0x0,0x0,0x0,0x13,0x0,0x0,0x0,0x16,0xff,0xff,0xff,0xff,0x0,0x0,0x0,0x13,0x0,0x0,0x0,0x17,0xff,0xff,0xff,0xff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x17,0x63,0x65,0x6e,0x74,0x65,0x72,0x62,0x61,0x6c,0x6c,0x43,0x65,0x6e,0x74,0x65,0x72,0x43,0x68,0x61,0x6e,0x67,0x65,0x72,0x0,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xd,0x72,0x65,0x6e,0x64,0x65,0x72,0x43,0x61,0x63,0x68,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x4f,0x4e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x24,0x43,0x45,0x4e,0x54,0x45,0x52,0x42,0x41,0x4c,0x4c,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x5a,0x5f,0x41,0x52,0x52,0x4f,0x57,0x53,0x5f,0x50,0x49,0x43,0x4b,0x45,0x52,0x2b,0x38,0x0,0x0,0x0,0x9,0x50,0x69,0x63,0x6b,0x53,0x74,0x79,0x6c,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x73,0x74,0x79,0x6c,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x55,0x4e,0x50,0x49,0x43,0x4b,0x41,0x42,0x4c,0x45,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x27,0x43,0x45,0x4e,0x54,0x45,0x52,0x42,0x41,0x4c,0x4c,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x43,0x45,0x4e,0x54,0x45,0x52,0x5f,0x43,0x48,0x41,0x4e,0x47,0x45,0x52,0x5f,0x4d,0x54,0x4c,0x2b,0x32,0x0,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x1a,0x43,0x45,0x4e,0x54,0x45,0x52,0x42,0x41,0x4c,0x4c,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x53,0x43,0x41,0x4c,0x45,0x2b,0x33,0x0,0x0,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x1d,0x43,0x45,0x4e,0x54,0x45,0x52,0x42,0x41,0x4c,0x4c,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x5a,0x5f,0x41,0x52,0x52,0x4f,0x57,0x53,0x2b,0x39,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x1d,0x63,0x65,0x6e,0x74,0x65,0x72,0x62,0x61,0x6c,0x6c,0x43,0x65,0x6e,0x74,0x65,0x72,0x43,0x68,0x61,0x6e,0x67,0x65,0x72,0x41,0x63,0x74,0x69,0x76,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xd,0x72,0x65,0x6e,0x64,0x65,0x72,0x43,0x61,0x63,0x68,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x4f,0x4e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x1f,0x43,0x45,0x4e,0x54,0x45,0x52,0x42,0x41,0x4c,0x4c,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x41,0x43,0x54,0x49,0x56,0x45,0x5f,0x4d,0x54,0x4c,0x2b,0x30,0x0,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x1a,0x43,0x45,0x4e,0x54,0x45,0x52,0x42,0x41,0x4c,0x4c,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x53,0x43,0x41,0x4c,0x45,0x2b,0x33,0x0,0x0,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x1d,0x43,0x45,0x4e,0x54,0x45,0x52,0x42,0x41,0x4c,0x4c,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x5a,0x5f,0x41,0x52,0x52,0x4f,0x57,0x53,0x2b,0x39,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x21,0x43,0x45,0x4e,0x54,0x45,0x52,0x42,0x41,0x4c,0x4c,0x5f,0x41,0x58,0x49,0x53,0x5f,0x46,0x45,0x45,0x44,0x42,0x41,0x43,0x4b,0x5f,0x53,0x54,0x59,0x4c,0x45,0x2b,0x31,0x30,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x47,0x72,0x6f,0x75,0x70,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x0,0x0,0x0,0x8,0x4d,0x61,0x74,0x65,0x72,0x69,0x61,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0xc,0x64,0x69,0x66,0x66,0x75,0x73,0x65,0x43,0x6f,0x6c,0x6f,0x72,0x0,0x0,0x0,0x1,0x3e,0xb8,0x51,0xec,0x3d,0x4c,0xcc,0xcd,0x3e,0xe1,0x47,0xae,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xd,0x65,0x6d,0x69,0x73,0x73,0x69,0x76,0x65,0x43,0x6f,0x6c,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x3e,0xb8,0x51,0xec,0x3d,0x4c,0xcc,0xcd,0x3e,0xe1,0x47,0xae,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x9,0x44,0x72,0x61,0x77,0x53,0x74,0x79,0x6c,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x9,0x6c,0x69,0x6e,0x65,0x57,0x69,0x64,0x74,0x68,0x0,0x0,0x0,0x40,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x4c,0x69,0x67,0x68,0x74,0x4d,0x6f,0x64,0x65,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x6d,0x6f,0x64,0x65,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x50,0x48,0x4f,0x4e,0x47,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xd,0x4e,0x6f,0x72,0x6d,0x61,0x6c,0x42,0x69,0x6e,0x64,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x12,0x50,0x45,0x52,0x5f,0x56,0x45,0x52,0x54,0x45,0x58,0x5f,0x49,0x4e,0x44,0x45,0x58,0x45,0x44,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf,0x4d,0x61,0x74,0x65,0x72,0x69,0x61,0x6c,0x42,0x69,0x6e,0x64,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x4f,0x56,0x45,0x52,0x41,0x4c,0x4c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x1d,0x63,0x65,0x6e,0x74,0x65,0x72,0x62,0x61,0x6c,0x6c,0x43,0x65,0x6e,0x74,0x65,0x72,0x58,0x41,0x78,0x69,0x73,0x46,0x65,0x65,0x64,0x62,0x61,0x63,0x6b,0x0,0x0,0x0,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xd,0x72,0x65,0x6e,0x64,0x65,0x72,0x43,0x61,0x63,0x68,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x4f,0x4e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x21,0x43,0x45,0x4e,0x54,0x45,0x52,0x42,0x41,0x4c,0x4c,0x5f,0x41,0x58,0x49,0x53,0x5f,0x46,0x45,0x45,0x44,0x42,0x41,0x43,0x4b,0x5f,0x53,0x54,0x59,0x4c,0x45,0x2b,0x31,0x30,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x1a,0x43,0x45,0x4e,0x54,0x45,0x52,0x42,0x41,0x4c,0x4c,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x53,0x43,0x41,0x4c,0x45,0x2b,0x33,0x0,0x0,0x0,0x0,0x0,0xb,0x43,0x6f,0x6f,0x72,0x64,0x69,0x6e,0x61,0x74,0x65,0x33,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x70,0x6f,0x69,0x6e,0x74,0x0,0x0,0x0,0x0,0x0,0x0,0xc,0xbf,0x19,0x99,0x9a,0x0,0x0,0x0,0x0,0xbf,0x81,0x47,0xae,0x3f,0x19,0x99,0x9a,0x0,0x0,0x0,0x0,0xbf,0x81,0x47,0xae,0xbe,0xf5,0xc2,0x8f,0x3d,0x75,0xc2,0x8f,0xbf,0x81,0x47,0xae,0xbe,0xf5,0xc2,0x8f,0xbd,0x75,0xc2,0x8f,0xbf,0x81,0x47,0xae,0x3e,0xf5,0xc2,0x8f,0x3d,0x75,0xc2,0x8f,0xbf,0x81,0x47,0xae,0x3e,0xf5,0xc2,0x8f,0xbd,0x75,0xc2,0x8f,0xbf,0x81,0x47,0xae,0xbf,0x19,0x99,0x9a,0x0,0x0,0x0,0x0,0x3f,0x81,0x47,0xae,0x3f,0x19,0x99,0x9a,0x0,0x0,0x0,0x0,0x3f,0x81,0x47,0xae,0xbe,0xf5,0xc2,0x8f,0x3d,0x75,0xc2,0x8f,0x3f,0x81,0x47,0xae,0xbe,0xf5,0xc2,0x8f,0xbd,0x75,0xc2,0x8f,0x3f,0x81,0x47,0xae,0x3e,0xf5,0xc2,0x8f,0x3d,0x75,0xc2,0x8f,0x3f,0x81,0x47,0xae,0x3e,0xf5,0xc2,0x8f,0xbd,0x75,0xc2,0x8f,0x3f,0x81,0x47,0xae,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xe,0x49,0x6e,0x64,0x65,0x78,0x65,0x64,0x4c,0x69,0x6e,0x65,0x53,0x65,0x74,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xa,0x63,0x6f,0x6f,0x72,0x64,0x49,0x6e,0x64,0x65,0x78,0x0,0x0,0x0,0x0,0x0,0x1e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0xff,0xff,0xff,0xff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0xff,0xff,0xff,0xff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0xff,0xff,0xff,0xff,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x4,0xff,0xff,0xff,0xff,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0xff,0xff,0xff,0xff,0x0,0x0,0x0,0x6,0x0,0x0,0x0,0x7,0xff,0xff,0xff,0xff,0x0,0x0,0x0,0x6,0x0,0x0,0x0,0x8,0xff,0xff,0xff,0xff,0x0,0x0,0x0,0x6,0x0,0x0,0x0,0x9,0xff,0xff,0xff,0xff,0x0,0x0,0x0,0x7,0x0,0x0,0x0,0xa,0xff,0xff,0xff,0xff,0x0,0x0,0x0,0x7,0x0,0x0,0x0,0xb,0xff,0xff,0xff,0xff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x1d,0x63,0x65,0x6e,0x74,0x65,0x72,0x62,0x61,0x6c,0x6c,0x43,0x65,0x6e,0x74,0x65,0x72,0x59,0x41,0x78,0x69,0x73,0x46,0x65,0x65,0x64,0x62,0x61,0x63,0x6b,0x0,0x0,0x0,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xd,0x72,0x65,0x6e,0x64,0x65,0x72,0x43,0x61,0x63,0x68,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x4f,0x4e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x21,0x43,0x45,0x4e,0x54,0x45,0x52,0x42,0x41,0x4c,0x4c,0x5f,0x41,0x58,0x49,0x53,0x5f,0x46,0x45,0x45,0x44,0x42,0x41,0x43,0x4b,0x5f,0x53,0x54,0x59,0x4c,0x45,0x2b,0x31,0x30,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x1a,0x43,0x45,0x4e,0x54,0x45,0x52,0x42,0x41,0x4c,0x4c,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x53,0x43,0x41,0x4c,0x45,0x2b,0x33,0x0,0x0,0x0,0x0,0x0,0xb,0x43,0x6f,0x6f,0x72,0x64,0x69,0x6e,0x61,0x74,0x65,0x33,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x70,0x6f,0x69,0x6e,0x74,0x0,0x0,0x0,0x0,0x0,0x0,0xc,0x0,0x0,0x0,0x0,0xbf,0x19,0x99,0x9a,0xbf,0x81,0x47,0xae,0x0,0x0,0x0,0x0,0x3f,0x19,0x99,0x9a,0xbf,0x81,0x47,0xae,0xbd,0x75,0xc2,0x8f,0xbe,0xf5,0xc2,0x8f,0xbf,0x81,0x47,0xae,0x3d,0x75,0xc2,0x8f,0xbe,0xf5,0xc2,0x8f,0xbf,0x81,0x47,0xae,0xbd,0x75,0xc2,0x8f,0x3e,0xf5,0xc2,0x8f,0xbf,0x81,0x47,0xae,0x3d,0x75,0xc2,0x8f,0x3e,0xf5,0xc2,0x8f,0xbf,0x81,0x47,0xae,0x0,0x0,0x0,0x0,0xbf,0x19,0x99,0x9a,0x3f,0x81,0x47,0xae,0x0,0x0,0x0,0x0,0x3f,0x19,0x99,0x9a,0x3f,0x81,0x47,0xae,0xbd,0x75,0xc2,0x8f,0xbe,0xf5,0xc2,0x8f,0x3f,0x81,0x47,0xae,0x3d,0x75,0xc2,0x8f,0xbe,0xf5,0xc2,0x8f,0x3f,0x81,0x47,0xae,0xbd,0x75,0xc2,0x8f,0x3e,0xf5,0xc2,0x8f,0x3f,0x81,0x47,0xae,0x3d,0x75,0xc2,0x8f,0x3e,0xf5,0xc2,0x8f,0x3f,0x81,0x47,0xae,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xe,0x49,0x6e,0x64,0x65,0x78,0x65,0x64,0x4c,0x69,0x6e,0x65,0x53,0x65,0x74,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xa,0x63,0x6f,0x6f,0x72,0x64,0x49,0x6e,0x64,0x65,0x78,0x0,0x0,0x0,0x0,0x0,0x1e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0xff,0xff,0xff,0xff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0xff,0xff,0xff,0xff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0xff,0xff,0xff,0xff,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x4,0xff,0xff,0xff,0xff,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0xff,0xff,0xff,0xff,0x0,0x0,0x0,0x6,0x0,0x0,0x0,0x7,0xff,0xff,0xff,0xff,0x0,0x0,0x0,0x6,0x0,0x0,0x0,0x8,0xff,0xff,0xff,0xff,0x0,0x0,0x0,0x6,0x0,0x0,0x0,0x9,0xff,0xff,0xff,0xff,0x0,0x0,0x0,0x7,0x0,0x0,0x0,0xa,0xff,0xff,0xff,0xff,0x0,0x0,0x0,0x7,0x0,0x0,0x0,0xb,0xff,0xff,0xff,0xff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x1c,0x43,0x45,0x4e,0x54,0x45,0x52,0x42,0x41,0x4c,0x4c,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x5a,0x5f,0x41,0x58,0x49,0x53,0x2b,0x31,0x31,0x0,0x0,0x0,0x5,0x47,0x72,0x6f,0x75,0x70,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0xd,0x4e,0x6f,0x72,0x6d,0x61,0x6c,0x42,0x69,0x6e,0x64,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x12,0x50,0x45,0x52,0x5f,0x56,0x45,0x52,0x54,0x45,0x58,0x5f,0x49,0x4e,0x44,0x45,0x58,0x45,0x44,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf,0x4d,0x61,0x74,0x65,0x72,0x69,0x61,0x6c,0x42,0x69,0x6e,0x64,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x4f,0x56,0x45,0x52,0x41,0x4c,0x4c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb,0x43,0x6f,0x6f,0x72,0x64,0x69,0x6e,0x61,0x74,0x65,0x33,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x70,0x6f,0x69,0x6e,0x74,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3f,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xbf,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x4c,0x69,0x6e,0x65,0x53,0x65,0x74,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0xf,0x63,0x65,0x6e,0x74,0x65,0x72,0x62,0x61,0x6c,0x6c,0x58,0x41,0x78,0x69,0x73,0x0,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xd,0x72,0x65,0x6e,0x64,0x65,0x72,0x43,0x61,0x63,0x68,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x4f,0x4e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x9,0x50,0x69,0x63,0x6b,0x53,0x74,0x79,0x6c,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x73,0x74,0x79,0x6c,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x55,0x4e,0x50,0x49,0x43,0x4b,0x41,0x42,0x4c,0x45,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x1f,0x43,0x45,0x4e,0x54,0x45,0x52,0x42,0x41,0x4c,0x4c,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x41,0x43,0x54,0x49,0x56,0x45,0x5f,0x4d,0x54,0x4c,0x2b,0x30,0x0,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x1a,0x43,0x45,0x4e,0x54,0x45,0x52,0x42,0x41,0x4c,0x4c,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x53,0x43,0x41,0x4c,0x45,0x2b,0x33,0x0,0x0,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x1f,0x43,0x45,0x4e,0x54,0x45,0x52,0x42,0x41,0x4c,0x4c,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x52,0x4f,0x54,0x5f,0x5a,0x5f,0x54,0x4f,0x5f,0x58,0x2b,0x34,0x0,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x1c,0x43,0x45,0x4e,0x54,0x45,0x52,0x42,0x41,0x4c,0x4c,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x5a,0x5f,0x41,0x58,0x49,0x53,0x2b,0x31,0x31,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0xf,0x63,0x65,0x6e,0x74,0x65,0x72,0x62,0x61,0x6c,0x6c,0x59,0x41,0x78,0x69,0x73,0x0,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xd,0x72,0x65,0x6e,0x64,0x65,0x72,0x43,0x61,0x63,0x68,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x4f,0x4e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x9,0x50,0x69,0x63,0x6b,0x53,0x74,0x79,0x6c,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x73,0x74,0x79,0x6c,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x55,0x4e,0x50,0x49,0x43,0x4b,0x41,0x42,0x4c,0x45,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x1f,0x43,0x45,0x4e,0x54,0x45,0x52,0x42,0x41,0x4c,0x4c,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x41,0x43,0x54,0x49,0x56,0x45,0x5f,0x4d,0x54,0x4c,0x2b,0x30,0x0,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x1a,0x43,0x45,0x4e,0x54,0x45,0x52,0x42,0x41,0x4c,0x4c,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x53,0x43,0x41,0x4c,0x45,0x2b,0x33,0x0,0x0,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x1f,0x43,0x45,0x4e,0x54,0x45,0x52,0x42,0x41,0x4c,0x4c,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x52,0x4f,0x54,0x5f,0x5a,0x5f,0x54,0x4f,0x5f,0x59,0x2b,0x35,0x0,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x1c,0x43,0x45,0x4e,0x54,0x45,0x52,0x42,0x41,0x4c,0x4c,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x5a,0x5f,0x41,0x58,0x49,0x53,0x2b,0x31,0x31,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0xf,0x63,0x65,0x6e,0x74,0x65,0x72,0x62,0x61,0x6c,0x6c,0x5a,0x41,0x78,0x69,0x73,0x0,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xd,0x72,0x65,0x6e,0x64,0x65,0x72,0x43,0x61,0x63,0x68,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x4f,0x4e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x9,0x50,0x69,0x63,0x6b,0x53,0x74,0x79,0x6c,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x73,0x74,0x79,0x6c,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x55,0x4e,0x50,0x49,0x43,0x4b,0x41,0x42,0x4c,0x45,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x1f,0x43,0x45,0x4e,0x54,0x45,0x52,0x42,0x41,0x4c,0x4c,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x41,0x43,0x54,0x49,0x56,0x45,0x5f,0x4d,0x54,0x4c,0x2b,0x30,0x0,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x1a,0x43,0x45,0x4e,0x54,0x45,0x52,0x42,0x41,0x4c,0x4c,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x53,0x43,0x41,0x4c,0x45,0x2b,0x33,0x0,0x0,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x1c,0x43,0x45,0x4e,0x54,0x45,0x52,0x42,0x41,0x4c,0x4c,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x5a,0x5f,0x41,0x58,0x49,0x53,0x2b,0x31,0x31
    		};
};

//#endif /* _SO_CENTERBALL_DRAGGER_ */
