/*
 *
 *  Copyright (C) 2000 Silicon Graphics, Inc.  All Rights Reserved. 
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  Further, this software is distributed without any warranty that it is
 *  free of the rightful claim of any third person regarding infringement
 *  or the like.  Any license provided herein, whether implied or
 *  otherwise, applies only to this software file.  Patent licenses, if
 *  any, provided herein do not apply to combinations of this program with
 *  other software, or any other product whatsoever.
 * 
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 *  Contact information: Silicon Graphics, Inc., 1600 Amphitheatre Pkwy,
 *  Mountain View, CA  94043, or:
 * 
 *  http://www.sgi.com 
 * 
 *  For further information regarding this notice, see: 
 * 
 *  http://oss.sgi.com/projects/GenInfo/NoticeExplan/
 *
 */


/*
 * Copyright (C) 1990,91,92   Silicon Graphics, Inc.
 *
 _______________________________________________________________________
 ______________  S I L I C O N   G R A P H I C S   I N C .  ____________
 |
 |   $Revision: 1.1.1.1 $
 |
 |   Description:
 |      This file defines the transform box dragger class.
 |      This dragger allows you to perform rotations,uniform scales
 |      and translations, all in one tidy box.
 |
 | NOTE TO DEVELOPERS:
 |     For info about the structure of SoTransformBoxDragger:
 |     [1] compile: /usr/share/src/Inventor/samples/ivNodeKitStructure
 |     [2] type:    ivNodeKitStructure SoTransformBoxDragger.
 |     [3] The program prints a diagram of the scene graph and a table with 
 |         information about each part.
 |
 |  The following parts in this dragger are created at construction time.
 |  'ResourceName' corresponds to the name of the default geometry for the
 |  part. The dragger's constructor gets the scene graph for 'ResourceName'
 |  by querying the global dictionary ( SoDB::getByName("ResourceName"); ).  
 |
 |  Resource Name:                           Part Name:
 |
 |  transformBoxScalerScaler               - scaler.scaler          
 |  transformBoxScalerScalerActive         - scaler.scalerActive    
 |  transformBoxScalerFeedback             - scaler.feedback        
 |  transformBoxScalerFeedbackActive       - scaler.feedbackActive  
 |
 |  transformBoxRotatorRotator             - rotator1.rotator          
 |  transformBoxRotatorRotatorActive       - rotator1.rotatorActive    
 |  transformBoxRotatorFeedback            - rotator1.feedback        
 |  transformBoxRotatorFeedbackActive      - rotator1.feedbackActive  
 |  (ditto for rotator2 and rotator3)
 |
 |  transformBoxTranslatorTranslator       - translator1.translator  
 |  transformBoxTranslatorTranslatorActive - translator1.translatorActive
 |  transformBoxTranslatorXAxisFeedback    - translator1.xAxisFeedback
 |  transformBoxTranslatorYAxisFeedback    - translator1.yAxisFeedback
 |  (ditto for translator2 - translator6)
 |
 |   Author(s): Paul Isaacs, Howard Look
 |
 ______________  S I L I C O N   G R A P H I C S   I N C .  ____________
 _______________________________________________________________________
 */

package jscenegraph.interaction.inventor.draggers;

import jscenegraph.database.inventor.SbMatrix;
import jscenegraph.database.inventor.SbRotation;
import jscenegraph.database.inventor.SbVec3f;
import jscenegraph.database.inventor.SbVec3fSingle;
import jscenegraph.database.inventor.SoType;
import jscenegraph.database.inventor.fields.SoFieldData;
import jscenegraph.database.inventor.fields.SoSFNode;
import jscenegraph.database.inventor.fields.SoSFRotation;
import jscenegraph.database.inventor.fields.SoSFVec3f;
import jscenegraph.database.inventor.nodes.SoRotation;
import jscenegraph.database.inventor.nodes.SoSeparator;
import jscenegraph.database.inventor.nodes.SoSubNode;
import jscenegraph.database.inventor.sensors.SoFieldSensor;
import jscenegraph.database.inventor.sensors.SoSensor;
import jscenegraph.interaction.inventor.nodes.SoAntiSquish;
import jscenegraph.interaction.inventor.nodes.SoSurroundScale;
import jscenegraph.nodekits.inventor.nodekits.SoBaseKit;
import jscenegraph.nodekits.inventor.nodekits.SoNodekitCatalog;
import jscenegraph.nodekits.inventor.nodekits.SoSubKit;

/**
 * @author Yves Boyadjian
 *
 */

////////////////////////////////////////////////////////////////////////////////
//! Box-like object you scale, rotate, and translate by dragging with the mouse.
/*!
\class SoTransformBoxDragger
\ingroup Draggers
SoTransformBoxDragger 
is a composite dragger shaped like a box with small cubes at the corners.
Click and drag any of these cubes to scale the box uniformly.
Drag any edge of the box to rotate the whole dragger about
its center, along an axis parallel to that edge.  Pick any  face of the
box for 2D translation in the plane of that face. 


Although the box looks just about like a wireframe cube, 
it is composed of many different simple draggers arranged in a composite
assembly.  When one part is dragged, the transformBox makes sure they all
move together.
Each of the parts of the box  is a different dragger with the default geometry
changed. 
The faces of the box are SoTranslate2Draggers, the edges are 
SoRotateCylindricalDraggers, and the cubes are an
SoScaleUniformDragger.  Drag them and the dragger will update
its \b translation , \b rotation  and \b scaleFactor  fields
to reflect the changes.
As with all draggers, if you change the fields the dragger will
move to match the new settings.


\p Remember: This is <em>not</em> an SoTransform!. 
If you want to move other objects with this dragger, you can either: 


[a] Use an SoTransformBoxManip, which is subclassed from SoTransform. 
It creates one of
these draggers and uses it as the interface to change its fields.
(see the SoTransformBoxManip man page).  


[b] Use field-to-field connections to connect the fields of this dragger to
those of any SoTransformation node.


You can change the parts in any instance of this dragger using
setPart().
The default part geometries are defined as resources for this 
SoTransformBoxDragger class.  They are detailed in the 
Dragger Resources section of the online reference page for this class.
You can make your program use different default resources for the parts
by copying the file
\b /usr/share/data/draggerDefaults/transformBoxDragger.iv 
into your own directory, editing the file, and then
setting the environment variable \b SO_DRAGGER_DIR  to be a path to that directory.

\par File Format/Default
\par
\code
TransformBoxDragger {
  renderCaching AUTO
  boundingBoxCaching AUTO
  renderCulling AUTO
  pickCulling AUTO
  isActive false
  rotation 0 0 1 0
  translation 0 0 0
  scaleFactor 1 1 1
}
\endcode

\par See Also
\par
SoInteractionKit, SoDragger, SoCenterballDragger, SoDirectionalLightDragger, SoDragPointDragger, SoHandleBoxDragger, SoJackDragger, SoPointLightDragger, SoRotateCylindricalDragger, SoRotateDiscDragger, SoRotateSphericalDragger, SoScale1Dragger, SoScale2Dragger, SoScale2UniformDragger, SoScaleUniformDragger, SoSpotLightDragger, SoTabBoxDragger, SoTabPlaneDragger, SoTrackballDragger, SoTransformerDragger, SoTranslate1Dragger, SoTranslate2Dragger
*/
////////////////////////////////////////////////////////////////////////////////

public class SoTransformBoxDragger extends SoDragger {

	
    //SO_KIT_HEADER(SoTabBoxDragger);
	private final SoSubKit kitHeader = SoSubKit.SO_KIT_HEADER(SoTransformBoxDragger.class,this);
	
	public                                                                     
    static SoType       getClassTypeId()        /* Returns class type id */   
                                    { return SoSubNode.getClassTypeId(SoTransformBoxDragger.class); }                   
    public SoType      getTypeId()       /* Returns type id      */
    {
		return kitHeader == null ? super.getTypeId() : kitHeader.getClassTypeId();		    	
    }
  public                                                                  
    SoFieldData   getFieldData() {
	  return kitHeader == null ? super.getFieldData() : kitHeader.getFieldData(); 
  }
  public  static SoFieldData[] getFieldDataPtr()                              
        { return SoSubNode.getFieldDataPtr(SoTransformBoxDragger.class); }              
	
    /* Returns an SoNodekitCatalog for the node */                            
    public SoNodekitCatalog getNodekitCatalog() {
    	if(kitHeader == null) {
    		return super.getNodekitCatalog();
    	}
    	return kitHeader.getNodekitCatalog();
    }
    

    //! For making the dragger surround what lies above it.
    protected final SoSFNode surroundScale = new SoSFNode();
    //! For keeping the dragger even size in all 3 dimensions
    protected final SoSFNode antiSquish = new SoSFNode();

    protected final SoSFNode scaler = new SoSFNode();
    protected final SoSFNode rotator1Sep = new SoSFNode();
    protected final SoSFNode rotator1Rot = new SoSFNode();
    protected final SoSFNode rotator1 = new SoSFNode();
    protected final SoSFNode rotator2Sep = new SoSFNode();
    protected final SoSFNode rotator2Rot = new SoSFNode();
    protected final SoSFNode rotator2 = new SoSFNode();
    protected final SoSFNode rotator3Sep = new SoSFNode();
    protected final SoSFNode rotator3Rot = new SoSFNode();
    protected final SoSFNode rotator3 = new SoSFNode();
    protected final SoSFNode translator1Sep = new SoSFNode();
    protected final SoSFNode translator1Rot = new SoSFNode();
    protected final SoSFNode translator1 = new SoSFNode();
    protected final SoSFNode translator2Sep = new SoSFNode();
    protected final SoSFNode translator2Rot = new SoSFNode();
    protected final SoSFNode translator2 = new SoSFNode();
    protected final SoSFNode translator3Sep = new SoSFNode();
    protected final SoSFNode translator3Rot = new SoSFNode();
    protected final SoSFNode translator3 = new SoSFNode();
    protected final SoSFNode translator4Sep = new SoSFNode();
    protected final SoSFNode translator4Rot = new SoSFNode();
    protected final SoSFNode translator4 = new SoSFNode();
    protected final SoSFNode translator5Sep = new SoSFNode();
    protected final SoSFNode translator5Rot = new SoSFNode();
    protected final SoSFNode translator5 = new SoSFNode();
    protected final SoSFNode translator6Sep = new SoSFNode();
    protected final SoSFNode translator6Rot = new SoSFNode();
    protected final SoSFNode translator6 = new SoSFNode();
    


    public final SoSFRotation rotation = new SoSFRotation();
    public final SoSFVec3f    translation = new SoSFVec3f();
    public final SoSFVec3f    scaleFactor = new SoSFVec3f();
    
    protected SoFieldSensor rotFieldSensor;
    protected SoFieldSensor translFieldSensor;
    protected SoFieldSensor scaleFieldSensor;

    private static short geomBuffer[];

    static {
    	int[] geom1 = getGeom1();
    	int length = geom1.length;
    	geomBuffer = new short[length];
    	for(int i=0; i<length; i++) {
    		if(i<length)
    			geomBuffer[i] = (short)geom1[i];
    	}    	
    }
    
    private static int[] getGeom1() {
    	int[] geom1 = {
0x23,0x49,0x6e,0x76,0x65,0x6e,0x74,0x6f,0x72,0x20,0x56,0x32,0x2e,0x31,0x20,0x62,0x69,0x6e,0x61,0x72,0x79,0x20,0x20,0xa,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x1e,0x54,0x52,0x41,0x4e,0x53,0x46,0x4f,0x52,0x4d,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x53,0x43,0x41,0x4c,0x45,0x52,0x2b,0x30,0x0,0x0,0x0,0x0,0x0,0x5,0x47,0x72,0x6f,0x75,0x70,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x11,0x0,0x0,0x0,0xa,0x43,0x6f,0x6d,0x70,0x6c,0x65,0x78,0x69,0x74,0x79,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x3c,0x23,0xd7,0xa,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb,0x54,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x69,0x6f,0x6e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xb,0x74,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x69,0x6f,0x6e,0x0,0xbf,0x8c,0xcc,0xcd,0x3f,0x8c,0xcc,0xcd,0x3f,0x8c,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x43,0x75,0x62,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x5,0x77,0x69,0x64,0x74,0x68,0x0,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x68,0x65,0x69,0x67,0x68,0x74,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x64,0x65,0x70,0x74,0x68,0x0,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb,0x54,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x69,0x6f,0x6e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xb,0x74,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x69,0x6f,0x6e,0x0,0x40,0xc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x43,0x75,0x62,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x5,0x77,0x69,0x64,0x74,0x68,0x0,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x68,0x65,0x69,0x67,0x68,0x74,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x64,0x65,0x70,0x74,0x68,0x0,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb,0x54,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x69,0x6f,0x6e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xb,0x74,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x69,0x6f,0x6e,0x0,0x0,0x0,0x0,0x0,0xc0,0xc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x43,0x75,0x62,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x5,0x77,0x69,0x64,0x74,0x68,0x0,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x68,0x65,0x69,0x67,0x68,0x74,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x64,0x65,0x70,0x74,0x68,0x0,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb,0x54,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x69,0x6f,0x6e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xb,0x74,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x69,0x6f,0x6e,0x0,0xc0,0xc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x43,0x75,0x62,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x5,0x77,0x69,0x64,0x74,0x68,0x0,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x68,0x65,0x69,0x67,0x68,0x74,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x64,0x65,0x70,0x74,0x68,0x0,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb,0x54,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x69,0x6f,0x6e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xb,0x74,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x69,0x6f,0x6e,0x0,0x0,0x0,0x0,0x0,0x40,0xc,0xcc,0xcd,0xc0,0xc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x43,0x75,0x62,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x5,0x77,0x69,0x64,0x74,0x68,0x0,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x68,0x65,0x69,0x67,0x68,0x74,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x64,0x65,0x70,0x74,0x68,0x0,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb,0x54,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x69,0x6f,0x6e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xb,0x74,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x69,0x6f,0x6e,0x0,0x40,0xc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x43,0x75,0x62,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x5,0x77,0x69,0x64,0x74,0x68,0x0,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x68,0x65,0x69,0x67,0x68,0x74,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x64,0x65,0x70,0x74,0x68,0x0,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb,0x54,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x69,0x6f,0x6e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xb,0x74,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x69,0x6f,0x6e,0x0,0x0,0x0,0x0,0x0,0xc0,0xc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x43,0x75,0x62,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x5,0x77,0x69,0x64,0x74,0x68,0x0,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x68,0x65,0x69,0x67,0x68,0x74,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x64,0x65,0x70,0x74,0x68,0x0,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb,0x54,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x69,0x6f,0x6e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xb,0x74,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x69,0x6f,0x6e,0x0,0xc0,0xc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x43,0x75,0x62,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x5,0x77,0x69,0x64,0x74,0x68,0x0,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x68,0x65,0x69,0x67,0x68,0x74,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x64,0x65,0x70,0x74,0x68,0x0,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x18,0x74,0x72,0x61,0x6e,0x73,0x66,0x6f,0x72,0x6d,0x42,0x6f,0x78,0x53,0x63,0x61,0x6c,0x65,0x72,0x53,0x63,0x61,0x6c,0x65,0x72,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xd,0x72,0x65,0x6e,0x64,0x65,0x72,0x43,0x61,0x63,0x68,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x4f,0x4e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x0,0x0,0x0,0x8,0x4d,0x61,0x74,0x65,0x72,0x69,0x61,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0xc,0x64,0x69,0x66,0x66,0x75,0x73,0x65,0x43,0x6f,0x6c,0x6f,0x72,0x0,0x0,0x0,0x1,0x3f,0x0,0x0,0x0,0x3f,0x0,0x0,0x0,0x3f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xd,0x65,0x6d,0x69,0x73,0x73,0x69,0x76,0x65,0x43,0x6f,0x6c,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x3f,0x0,0x0,0x0,0x3f,0x0,0x0,0x0,0x3f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf,0x4d,0x61,0x74,0x65,0x72,0x69,0x61,0x6c,0x42,0x69,0x6e,0x64,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x4f,0x56,0x45,0x52,0x41,0x4c,0x4c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x9,0x44,0x72,0x61,0x77,0x53,0x74,0x79,0x6c,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x9,0x6c,0x69,0x6e,0x65,0x57,0x69,0x64,0x74,0x68,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x4c,0x69,0x67,0x68,0x74,0x4d,0x6f,0x64,0x65,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x6d,0x6f,0x64,0x65,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x50,0x48,0x4f,0x4e,0x47,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x43,0x6f,0x6d,0x70,0x6c,0x65,0x78,0x69,0x74,0x79,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x3c,0x23,0xd7,0xa,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x1e,0x54,0x52,0x41,0x4e,0x53,0x46,0x4f,0x52,0x4d,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x53,0x43,0x41,0x4c,0x45,0x52,0x2b,0x30,0x0,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x1e,0x74,0x72,0x61,0x6e,0x73,0x66,0x6f,0x72,0x6d,0x42,0x6f,0x78,0x53,0x63,0x61,0x6c,0x65,0x72,0x53,0x63,0x61,0x6c,0x65,0x72,0x41,0x63,0x74,0x69,0x76,0x65,0x0,0x0,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xd,0x72,0x65,0x6e,0x64,0x65,0x72,0x43,0x61,0x63,0x68,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x4f,0x4e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x0,0x0,0x0,0x8,0x4d,0x61,0x74,0x65,0x72,0x69,0x61,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0xc,0x64,0x69,0x66,0x66,0x75,0x73,0x65,0x43,0x6f,0x6c,0x6f,0x72,0x0,0x0,0x0,0x1,0x3f,0x0,0x0,0x0,0x3f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xd,0x65,0x6d,0x69,0x73,0x73,0x69,0x76,0x65,0x43,0x6f,0x6c,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x3f,0x0,0x0,0x0,0x3f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf,0x4d,0x61,0x74,0x65,0x72,0x69,0x61,0x6c,0x42,0x69,0x6e,0x64,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x4f,0x56,0x45,0x52,0x41,0x4c,0x4c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x9,0x44,0x72,0x61,0x77,0x53,0x74,0x79,0x6c,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x9,0x6c,0x69,0x6e,0x65,0x57,0x69,0x64,0x74,0x68,0x0,0x0,0x0,0x40,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x4c,0x69,0x67,0x68,0x74,0x4d,0x6f,0x64,0x65,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x6d,0x6f,0x64,0x65,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x50,0x48,0x4f,0x4e,0x47,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x43,0x6f,0x6d,0x70,0x6c,0x65,0x78,0x69,0x74,0x79,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x3c,0x23,0xd7,0xa,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x1e,0x54,0x52,0x41,0x4e,0x53,0x46,0x4f,0x52,0x4d,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x53,0x43,0x41,0x4c,0x45,0x52,0x2b,0x30,0x0,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x1a,0x74,0x72,0x61,0x6e,0x73,0x66,0x6f,0x72,0x6d,0x42,0x6f,0x78,0x53,0x63,0x61,0x6c,0x65,0x72,0x46,0x65,0x65,0x64,0x62,0x61,0x63,0x6b,0x0,0x0,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x20,0x74,0x72,0x61,0x6e,0x73,0x66,0x6f,0x72,0x6d,0x42,0x6f,0x78,0x53,0x63,0x61,0x6c,0x65,0x72,0x46,0x65,0x65,0x64,0x62,0x61,0x63,0x6b,0x41,0x63,0x74,0x69,0x76,0x65,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x1f,0x54,0x52,0x41,0x4e,0x53,0x46,0x4f,0x52,0x4d,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x52,0x4f,0x54,0x41,0x54,0x4f,0x52,0x2b,0x31,0x0,0x0,0x0,0x0,0x5,0x47,0x72,0x6f,0x75,0x70,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x11,0x0,0x0,0x0,0xa,0x43,0x6f,0x6d,0x70,0x6c,0x65,0x78,0x69,0x74,0x79,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x3c,0x23,0xd7,0xa,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x53,0x63,0x61,0x6c,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xb,0x73,0x63,0x61,0x6c,0x65,0x46,0x61,0x63,0x74,0x6f,0x72,0x0,0x3f,0x8c,0xcc,0xcd,0x3f,0x8c,0xcc,0xcd,0x3f,0x8c,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xd,0x4e,0x6f,0x72,0x6d,0x61,0x6c,0x42,0x69,0x6e,0x64,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x50,0x45,0x52,0x5f,0x56,0x45,0x52,0x54,0x45,0x58,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf,0x4d,0x61,0x74,0x65,0x72,0x69,0x61,0x6c,0x42,0x69,0x6e,0x64,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x4f,0x56,0x45,0x52,0x41,0x4c,0x4c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb,0x43,0x6f,0x6f,0x72,0x64,0x69,0x6e,0x61,0x74,0x65,0x33,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x70,0x6f,0x69,0x6e,0x74,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x3f,0x80,0x0,0x0,0xbf,0x80,0x0,0x0,0x3f,0x80,0x0,0x0,0x3f,0x80,0x0,0x0,0x3f,0x80,0x0,0x0,0x3f,0x80,0x0,0x0,0x3f,0x80,0x0,0x0,0xbf,0x80,0x0,0x0,0xbf,0x80,0x0,0x0,0x3f,0x80,0x0,0x0,0x3f,0x80,0x0,0x0,0xbf,0x80,0x0,0x0,0xbf,0x80,0x0,0x0,0xbf,0x80,0x0,0x0,0xbf,0x80,0x0,0x0,0xbf,0x80,0x0,0x0,0x3f,0x80,0x0,0x0,0xbf,0x80,0x0,0x0,0xbf,0x80,0x0,0x0,0xbf,0x80,0x0,0x0,0x3f,0x80,0x0,0x0,0xbf,0x80,0x0,0x0,0x3f,0x80,0x0,0x0,0x3f,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x4e,0x6f,0x72,0x6d,0x61,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x6,0x76,0x65,0x63,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x8,0x3f,0x35,0x4,0xf7,0x0,0x0,0x0,0x0,0x3f,0x35,0x4,0xf7,0x3f,0x35,0x4,0xf7,0x0,0x0,0x0,0x0,0x3f,0x35,0x4,0xf7,0x3f,0x35,0x4,0xf7,0x0,0x0,0x0,0x0,0xbf,0x35,0x4,0xf7,0x3f,0x35,0x4,0xf7,0x0,0x0,0x0,0x0,0xbf,0x35,0x4,0xf7,0xbf,0x35,0x4,0xf7,0x0,0x0,0x0,0x0,0xbf,0x35,0x4,0xf7,0xbf,0x35,0x4,0xf7,0x0,0x0,0x0,0x0,0xbf,0x35,0x4,0xf7,0xbf,0x35,0x4,0xf7,0x0,0x0,0x0,0x0,0x3f,0x35,0x4,0xf7,0xbf,0x35,0x4,0xf7,0x0,0x0,0x0,0x0,0x3f,0x35,0x4,0xf7,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x4c,0x69,0x6e,0x65,0x53,0x65,0x74,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xb,0x6e,0x75,0x6d,0x56,0x65,0x72,0x74,0x69,0x63,0x65,0x73,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x9,0x44,0x72,0x61,0x77,0x53,0x74,0x79,0x6c,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x73,0x74,0x79,0x6c,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x9,0x49,0x4e,0x56,0x49,0x53,0x49,0x42,0x4c,0x45,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb,0x54,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x69,0x6f,0x6e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xb,0x74,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x69,0x6f,0x6e,0x0,0x3f,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x3f,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x43,0x6f,0x6d,0x70,0x6c,0x65,0x78,0x69,0x74,0x79,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x3e,0x99,0x99,0x9a,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x43,0x79,0x6c,0x69,0x6e,0x64,0x65,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x6,0x72,0x61,0x64,0x69,0x75,0x73,0x0,0x0,0x3d,0x23,0xd7,0xa,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x68,0x65,0x69,0x67,0x68,0x74,0x0,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb,0x54,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x69,0x6f,0x6e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xb,0x74,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x69,0x6f,0x6e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x43,0x79,0x6c,0x69,0x6e,0x64,0x65,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x6,0x72,0x61,0x64,0x69,0x75,0x73,0x0,0x0,0x3d,0x23,0xd7,0xa,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x68,0x65,0x69,0x67,0x68,0x74,0x0,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb,0x54,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x69,0x6f,0x6e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xb,0x74,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x69,0x6f,0x6e,0x0,0xc0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x43,0x79,0x6c,0x69,0x6e,0x64,0x65,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x6,0x72,0x61,0x64,0x69,0x75,0x73,0x0,0x0,0x3d,0x23,0xd7,0xa,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x68,0x65,0x69,0x67,0x68,0x74,0x0,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb,0x54,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x69,0x6f,0x6e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xb,0x74,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x69,0x6f,0x6e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x43,0x79,0x6c,0x69,0x6e,0x64,0x65,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x6,0x72,0x61,0x64,0x69,0x75,0x73,0x0,0x0,0x3d,0x23,0xd7,0xa,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x68,0x65,0x69,0x67,0x68,0x74,0x0,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x1a,0x74,0x72,0x61,0x6e,0x73,0x66,0x6f,0x72,0x6d,0x42,0x6f,0x78,0x52,0x6f,0x74,0x61,0x74,0x6f,0x72,0x52,0x6f,0x74,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xd,0x72,0x65,0x6e,0x64,0x65,0x72,0x43,0x61,0x63,0x68,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x4f,0x4e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x0,0x0,0x0,0x8,0x4d,0x61,0x74,0x65,0x72,0x69,0x61,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0xc,0x64,0x69,0x66,0x66,0x75,0x73,0x65,0x43,0x6f,0x6c,0x6f,0x72,0x0,0x0,0x0,0x1,0x3f,0x0,0x0,0x0,0x3f,0x0,0x0,0x0,0x3f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xd,0x65,0x6d,0x69,0x73,0x73,0x69,0x76,0x65,0x43,0x6f,0x6c,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x3f,0x0,0x0,0x0,0x3f,0x0,0x0,0x0,0x3f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x9,0x44,0x72,0x61,0x77,0x53,0x74,0x79,0x6c,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x9,0x6c,0x69,0x6e,0x65,0x57,0x69,0x64,0x74,0x68,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x4c,0x69,0x67,0x68,0x74,0x4d,0x6f,0x64,0x65,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x6d,0x6f,0x64,0x65,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x50,0x48,0x4f,0x4e,0x47,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x43,0x6f,0x6d,0x70,0x6c,0x65,0x78,0x69,0x74,0x79,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x3c,0x23,0xd7,0xa,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x1f,0x54,0x52,0x41,0x4e,0x53,0x46,0x4f,0x52,0x4d,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x52,0x4f,0x54,0x41,0x54,0x4f,0x52,0x2b,0x31,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x20,0x74,0x72,0x61,0x6e,0x73,0x66,0x6f,0x72,0x6d,0x42,0x6f,0x78,0x52,0x6f,0x74,0x61,0x74,0x6f,0x72,0x52,0x6f,0x74,0x61,0x74,0x6f,0x72,0x41,0x63,0x74,0x69,0x76,0x65,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xd,0x72,0x65,0x6e,0x64,0x65,0x72,0x43,0x61,0x63,0x68,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x4f,0x4e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x0,0x0,0x0,0x8,0x4d,0x61,0x74,0x65,0x72,0x69,0x61,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0xc,0x64,0x69,0x66,0x66,0x75,0x73,0x65,0x43,0x6f,0x6c,0x6f,0x72,0x0,0x0,0x0,0x1,0x3f,0x0,0x0,0x0,0x3f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xd,0x65,0x6d,0x69,0x73,0x73,0x69,0x76,0x65,0x43,0x6f,0x6c,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x3f,0x0,0x0,0x0,0x3f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x9,0x44,0x72,0x61,0x77,0x53,0x74,0x79,0x6c,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x9,0x6c,0x69,0x6e,0x65,0x57,0x69,0x64,0x74,0x68,0x0,0x0,0x0,0x40,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x4c,0x69,0x67,0x68,0x74,0x4d,0x6f,0x64,0x65,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x6d,0x6f,0x64,0x65,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x50,0x48,0x4f,0x4e,0x47,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x43,0x6f,0x6d,0x70,0x6c,0x65,0x78,0x69,0x74,0x79,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x3c,0x23,0xd7,0xa,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x1f,0x54,0x52,0x41,0x4e,0x53,0x46,0x4f,0x52,0x4d,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x52,0x4f,0x54,0x41,0x54,0x4f,0x52,0x2b,0x31,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x1b,0x74,0x72,0x61,0x6e,0x73,0x66,0x6f,0x72,0x6d,0x42,0x6f,0x78,0x52,0x6f,0x74,0x61,0x74,0x6f,0x72,0x46,0x65,0x65,0x64,0x62,0x61,0x63,0x6b,0x0,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x21,0x74,0x72,0x61,0x6e,0x73,0x66,0x6f,0x72,0x6d,0x42,0x6f,0x78,0x52,0x6f,0x74,0x61,0x74,0x6f,0x72,0x46,0x65,0x65,0x64,0x62,0x61,0x63,0x6b,0x41,0x63,0x74,0x69,0x76,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xd,0x72,0x65,0x6e,0x64,0x65,0x72,0x43,0x61,0x63,0x68,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x4f,0x4e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x0,0x0,0x0,0x9,0x50,0x69,0x63,0x6b,0x53,0x74,0x79,0x6c,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x73,0x74,0x79,0x6c,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x55,0x4e,0x50,0x49,0x43,0x4b,0x41,0x42,0x4c,0x45,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x4d,0x61,0x74,0x65,0x72,0x69,0x61,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0xc,0x64,0x69,0x66,0x66,0x75,0x73,0x65,0x43,0x6f,0x6c,0x6f,0x72,0x0,0x0,0x0,0x1,0x3e,0xb8,0x51,0xec,0x3d,0x4c,0xcc,0xcd,0x3e,0xe1,0x47,0xae,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xd,0x65,0x6d,0x69,0x73,0x73,0x69,0x76,0x65,0x43,0x6f,0x6c,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x3e,0xb8,0x51,0xec,0x3d,0x4c,0xcc,0xcd,0x3e,0xe1,0x47,0xae,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x9,0x44,0x72,0x61,0x77,0x53,0x74,0x79,0x6c,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x9,0x6c,0x69,0x6e,0x65,0x57,0x69,0x64,0x74,0x68,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x4c,0x69,0x67,0x68,0x74,0x4d,0x6f,0x64,0x65,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x6d,0x6f,0x64,0x65,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x50,0x48,0x4f,0x4e,0x47,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x43,0x6f,0x6d,0x70,0x6c,0x65,0x78,0x69,0x74,0x79,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x3c,0x23,0xd7,0xa,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xd,0x4e,0x6f,0x72,0x6d,0x61,0x6c,0x42,0x69,0x6e,0x64,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x12,0x50,0x45,0x52,0x5f,0x56,0x45,0x52,0x54,0x45,0x58,0x5f,0x49,0x4e,0x44,0x45,0x58,0x45,0x44,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf,0x4d,0x61,0x74,0x65,0x72,0x69,0x61,0x6c,0x42,0x69,0x6e,0x64,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x4f,0x56,0x45,0x52,0x41,0x4c,0x4c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb,0x43,0x6f,0x6f,0x72,0x64,0x69,0x6e,0x61,0x74,0x65,0x33,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x70,0x6f,0x69,0x6e,0x74,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0xbf,0xa0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3f,0xa0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x4c,0x69,0x6e,0x65,0x53,0x65,0x74,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x22,0x54,0x52,0x41,0x4e,0x53,0x46,0x4f,0x52,0x4d,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x54,0x52,0x41,0x4e,0x53,0x4c,0x41,0x54,0x4f,0x52,0x2b,0x32,0x0,0x0,0x0,0x0,0x0,0x5,0x47,0x72,0x6f,0x75,0x70,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x9,0x0,0x0,0x0,0x9,0x44,0x72,0x61,0x77,0x53,0x74,0x79,0x6c,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x73,0x74,0x79,0x6c,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x9,0x49,0x4e,0x56,0x49,0x53,0x49,0x42,0x4c,0x45,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x4c,0x69,0x67,0x68,0x74,0x4d,0x6f,0x64,0x65,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x6d,0x6f,0x64,0x65,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x50,0x48,0x4f,0x4e,0x47,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xd,0x4e,0x6f,0x72,0x6d,0x61,0x6c,0x42,0x69,0x6e,0x64,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x4f,0x56,0x45,0x52,0x41,0x4c,0x4c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf,0x4d,0x61,0x74,0x65,0x72,0x69,0x61,0x6c,0x42,0x69,0x6e,0x64,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x4f,0x56,0x45,0x52,0x41,0x4c,0x4c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb,0x43,0x6f,0x6f,0x72,0x64,0x69,0x6e,0x61,0x74,0x65,0x33,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x70,0x6f,0x69,0x6e,0x74,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x3f,0x8c,0xcc,0xcd,0xbf,0x8c,0xcc,0xcd,0x3f,0x8c,0xcc,0xcd,0x3f,0x8c,0xcc,0xcd,0x3f,0x8c,0xcc,0xcd,0x3f,0x8c,0xcc,0xcd,0xbf,0x8c,0xcc,0xcd,0x3f,0x8c,0xcc,0xcd,0x3f,0x8c,0xcc,0xcd,0xbf,0x8c,0xcc,0xcd,0xbf,0x8c,0xcc,0xcd,0x3f,0x8c,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x4e,0x6f,0x72,0x6d,0x61,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x6,0x76,0x65,0x63,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3f,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x53,0x68,0x61,0x70,0x65,0x48,0x69,0x6e,0x74,0x73,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0xe,0x76,0x65,0x72,0x74,0x65,0x78,0x4f,0x72,0x64,0x65,0x72,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x10,0x43,0x4f,0x55,0x4e,0x54,0x45,0x52,0x43,0x4c,0x4f,0x43,0x4b,0x57,0x49,0x53,0x45,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x9,0x73,0x68,0x61,0x70,0x65,0x54,0x79,0x70,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x53,0x4f,0x4c,0x49,0x44,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x46,0x61,0x63,0x65,0x53,0x65,0x74,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x20,0x74,0x72,0x61,0x6e,0x73,0x66,0x6f,0x72,0x6d,0x42,0x6f,0x78,0x54,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x6f,0x72,0x54,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xd,0x72,0x65,0x6e,0x64,0x65,0x72,0x43,0x61,0x63,0x68,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x4f,0x4e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0xa,0x43,0x6f,0x6d,0x70,0x6c,0x65,0x78,0x69,0x74,0x79,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x3c,0x23,0xd7,0xa,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x22,0x54,0x52,0x41,0x4e,0x53,0x46,0x4f,0x52,0x4d,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x54,0x52,0x41,0x4e,0x53,0x4c,0x41,0x54,0x4f,0x52,0x2b,0x32,0x0,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x26,0x74,0x72,0x61,0x6e,0x73,0x66,0x6f,0x72,0x6d,0x42,0x6f,0x78,0x54,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x6f,0x72,0x54,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x6f,0x72,0x41,0x63,0x74,0x69,0x76,0x65,0x0,0x0,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xd,0x72,0x65,0x6e,0x64,0x65,0x72,0x43,0x61,0x63,0x68,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x4f,0x4e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0xa,0x43,0x6f,0x6d,0x70,0x6c,0x65,0x78,0x69,0x74,0x79,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x3c,0x23,0xd7,0xa,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x22,0x54,0x52,0x41,0x4e,0x53,0x46,0x4f,0x52,0x4d,0x5f,0x42,0x4f,0x58,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x54,0x52,0x41,0x4e,0x53,0x4c,0x41,0x54,0x4f,0x52,0x2b,0x32,0x0,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x25,0x54,0x52,0x41,0x4e,0x53,0x46,0x4f,0x52,0x4d,0x5f,0x42,0x4f,0x58,0x5f,0x54,0x52,0x41,0x4e,0x53,0x4c,0x41,0x54,0x4f,0x52,0x5f,0x41,0x58,0x49,0x53,0x5f,0x53,0x54,0x59,0x4c,0x45,0x2b,0x33,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x47,0x72,0x6f,0x75,0x70,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x0,0x0,0x9,0x50,0x69,0x63,0x6b,0x53,0x74,0x79,0x6c,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x73,0x74,0x79,0x6c,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x55,0x4e,0x50,0x49,0x43,0x4b,0x41,0x42,0x4c,0x45,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x4d,0x61,0x74,0x65,0x72,0x69,0x61,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0xc,0x64,0x69,0x66,0x66,0x75,0x73,0x65,0x43,0x6f,0x6c,0x6f,0x72,0x0,0x0,0x0,0x1,0x3e,0xb8,0x51,0xec,0x3d,0x4c,0xcc,0xcd,0x3e,0xe1,0x47,0xae,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xd,0x65,0x6d,0x69,0x73,0x73,0x69,0x76,0x65,0x43,0x6f,0x6c,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x3e,0xb8,0x51,0xec,0x3d,0x4c,0xcc,0xcd,0x3e,0xe1,0x47,0xae,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x9,0x44,0x72,0x61,0x77,0x53,0x74,0x79,0x6c,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x9,0x6c,0x69,0x6e,0x65,0x57,0x69,0x64,0x74,0x68,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x4c,0x69,0x67,0x68,0x74,0x4d,0x6f,0x64,0x65,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x6d,0x6f,0x64,0x65,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x50,0x48,0x4f,0x4e,0x47,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xd,0x4e,0x6f,0x72,0x6d,0x61,0x6c,0x42,0x69,0x6e,0x64,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x12,0x50,0x45,0x52,0x5f,0x56,0x45,0x52,0x54,0x45,0x58,0x5f,0x49,0x4e,0x44,0x45,0x58,0x45,0x44,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf,0x4d,0x61,0x74,0x65,0x72,0x69,0x61,0x6c,0x42,0x69,0x6e,0x64,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x4f,0x56,0x45,0x52,0x41,0x4c,0x4c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x43,0x6f,0x6d,0x70,0x6c,0x65,0x78,0x69,0x74,0x79,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x3c,0x23,0xd7,0xa,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x23,0x74,0x72,0x61,0x6e,0x73,0x66,0x6f,0x72,0x6d,0x42,0x6f,0x78,0x54,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x6f,0x72,0x58,0x41,0x78,0x69,0x73,0x46,0x65,0x65,0x64,0x62,0x61,0x63,0x6b,0x0,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xd,0x72,0x65,0x6e,0x64,0x65,0x72,0x43,0x61,0x63,0x68,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x4f,0x4e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x25,0x54,0x52,0x41,0x4e,0x53,0x46,0x4f,0x52,0x4d,0x5f,0x42,0x4f,0x58,0x5f,0x54,0x52,0x41,0x4e,0x53,0x4c,0x41,0x54,0x4f,0x52,0x5f,0x41,0x58,0x49,0x53,0x5f,0x53,0x54,0x59,0x4c,0x45,0x2b,0x33,0x0,0x0,0x0,0x0,0x0,0x0,0xb,0x43,0x6f,0x6f,0x72,0x64,0x69,0x6e,0x61,0x74,0x65,0x33,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x70,0x6f,0x69,0x6e,0x74,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0xbf,0x17,0x5c,0x29,0x0,0x0,0x0,0x0,0x3f,0x8c,0xcc,0xcd,0x3f,0x17,0x5c,0x29,0x0,0x0,0x0,0x0,0x3f,0x8c,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x4c,0x69,0x6e,0x65,0x53,0x65,0x74,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb,0x43,0x6f,0x6f,0x72,0x64,0x69,0x6e,0x61,0x74,0x65,0x33,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x70,0x6f,0x69,0x6e,0x74,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0xbf,0x17,0x5c,0x29,0x0,0x0,0x0,0x0,0x3f,0x8c,0xcc,0xcd,0xbf,0x2,0x3d,0x71,0x3d,0x28,0xf5,0xc3,0x3f,0x8c,0xcc,0xcd,0xbf,0x2,0x3d,0x71,0xbd,0x28,0xf5,0xc3,0x3f,0x8c,0xcc,0xcd,0xbf,0x17,0x5c,0x29,0x0,0x0,0x0,0x0,0x3f,0x8c,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x4c,0x69,0x6e,0x65,0x53,0x65,0x74,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb,0x43,0x6f,0x6f,0x72,0x64,0x69,0x6e,0x61,0x74,0x65,0x33,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x70,0x6f,0x69,0x6e,0x74,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x3f,0x17,0x5c,0x29,0x0,0x0,0x0,0x0,0x3f,0x8c,0xcc,0xcd,0x3f,0x2,0x3d,0x71,0x3d,0x28,0xf5,0xc3,0x3f,0x8c,0xcc,0xcd,0x3f,0x2,0x3d,0x71,0xbd,0x28,0xf5,0xc3,0x3f,0x8c,0xcc,0xcd,0x3f,0x17,0x5c,0x29,0x0,0x0,0x0,0x0,0x3f,0x8c,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x4c,0x69,0x6e,0x65,0x53,0x65,0x74,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x23,0x74,0x72,0x61,0x6e,0x73,0x66,0x6f,0x72,0x6d,0x42,0x6f,0x78,0x54,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x6f,0x72,0x59,0x41,0x78,0x69,0x73,0x46,0x65,0x65,0x64,0x62,0x61,0x63,0x6b,0x0,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xd,0x72,0x65,0x6e,0x64,0x65,0x72,0x43,0x61,0x63,0x68,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x4f,0x4e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x25,0x54,0x52,0x41,0x4e,0x53,0x46,0x4f,0x52,0x4d,0x5f,0x42,0x4f,0x58,0x5f,0x54,0x52,0x41,0x4e,0x53,0x4c,0x41,0x54,0x4f,0x52,0x5f,0x41,0x58,0x49,0x53,0x5f,0x53,0x54,0x59,0x4c,0x45,0x2b,0x33,0x0,0x0,0x0,0x0,0x0,0x0,0xb,0x43,0x6f,0x6f,0x72,0x64,0x69,0x6e,0x61,0x74,0x65,0x33,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x70,0x6f,0x69,0x6e,0x74,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0xbf,0x17,0x5c,0x29,0x3f,0x8c,0xcc,0xcd,0x0,0x0,0x0,0x0,0x3f,0x17,0x5c,0x29,0x3f,0x8c,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x4c,0x69,0x6e,0x65,0x53,0x65,0x74,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb,0x43,0x6f,0x6f,0x72,0x64,0x69,0x6e,0x61,0x74,0x65,0x33,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x70,0x6f,0x69,0x6e,0x74,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x0,0xbf,0x17,0x5c,0x29,0x3f,0x8c,0xcc,0xcd,0xbd,0x28,0xf5,0xc3,0xbf,0x2,0x3d,0x71,0x3f,0x8c,0xcc,0xcd,0x3d,0x28,0xf5,0xc3,0xbf,0x2,0x3d,0x71,0x3f,0x8c,0xcc,0xcd,0x0,0x0,0x0,0x0,0xbf,0x17,0x5c,0x29,0x3f,0x8c,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x4c,0x69,0x6e,0x65,0x53,0x65,0x74,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb,0x43,0x6f,0x6f,0x72,0x64,0x69,0x6e,0x61,0x74,0x65,0x33,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x70,0x6f,0x69,0x6e,0x74,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x0,0x3f,0x17,0x5c,0x29,0x3f,0x8c,0xcc,0xcd,0xbd,0x28,0xf5,0xc3,0x3f,0x2,0x3d,0x71,0x3f,0x8c,0xcc,0xcd,0x3d,0x28,0xf5,0xc3,0x3f,0x2,0x3d,0x71,0x3f,0x8c,0xcc,0xcd,0x0,0x0,0x0,0x0,0x3f,0x17,0x5c,0x29,0x3f,0x8c,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x4c,0x69,0x6e,0x65,0x53,0x65,0x74,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
    	};
    	return geom1;
    }
    

////////////////////////////////////////////////////////////////////////
//
// Description:
//  Constructors. Each constructor calls constructorSub(), which
//  does work that is common to each.
//
// Use: public
//
////////////////////////////////////////////////////////////////////////

// Default constructor.
public SoTransformBoxDragger()
{
	kitHeader.SO_KIT_CONSTRUCTOR(SoTransformBoxDragger.class);

    isBuiltIn = true;

    // Don't create this by default. It's only really put into use
    // if this dragger is put inside a manipulator.
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(surroundScale,"surroundScale", SoSurroundScale.class, 
                                true, "topSeparator", "geomSeparator",true);
    // Create an anti-squish node by default.
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(antiSquish,"antiSquish", SoAntiSquish.class, 
                                false, "topSeparator", "geomSeparator",true);

    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(scaler,"scaler", SoScaleUniformDragger.class, true,
                                "topSeparator", "geomSeparator",true);

    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(rotator1Sep,"rotator1Sep", SoSeparator.class, false,
                                "topSeparator", "geomSeparator",false);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(rotator1Rot,"rotator1Rot", SoRotation.class, true,
                                "rotator1Sep","",false);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(rotator1,"rotator1", SoRotateCylindricalDragger.class, true,
                                "rotator1Sep","",true);

    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(rotator2Sep,"rotator2Sep", SoSeparator.class, false,
                                "topSeparator", "geomSeparator",false);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(rotator2Rot,"rotator2Rot", SoRotation.class, true,
                                "rotator2Sep","",false);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(rotator2,"rotator2", SoRotateCylindricalDragger.class, true,
                                "rotator2Sep","",true);

    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(rotator3Sep,"rotator3Sep", SoSeparator.class, false,
                                "topSeparator", "geomSeparator",false);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(rotator3Rot,"rotator3Rot", SoRotation.class, true,
                                "rotator3Sep","",false);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(rotator3,"rotator3", SoRotateCylindricalDragger.class, true,
                                "rotator3Sep","",true);

    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(translator1Sep,"translator1Sep", SoSeparator.class, false,
                                "topSeparator", "geomSeparator",false);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(translator1Rot,"translator1Rot", SoRotation.class, true,
                                "translator1Sep","",false);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(translator1,"translator1", SoTranslate2Dragger.class, true,
                                "translator1Sep","",true);

    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(translator2Sep,"translator2Sep", SoSeparator.class, false,
                                "topSeparator", "geomSeparator",false);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(translator2Rot,"translator2Rot", SoRotation.class, true,
                                "translator2Sep","",false);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(translator2,"translator2", SoTranslate2Dragger.class, true,
                                "translator2Sep","",true);

    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(translator3Sep,"translator3Sep", SoSeparator.class, false,
                                "topSeparator", "geomSeparator",false);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(translator3Rot,"translator3Rot", SoRotation.class, true,
                                "translator3Sep","",false);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(translator3,"translator3", SoTranslate2Dragger.class, true,
                                "translator3Sep","",true);

    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(translator4Sep,"translator4Sep", SoSeparator.class, false,
                                "topSeparator", "geomSeparator",false);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(translator4Rot,"translator4Rot", SoRotation.class, true,
                                "translator4Sep","",false);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(translator4,"translator4", SoTranslate2Dragger.class, true,
                                "translator4Sep","",true);

    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(translator5Sep,"translator5Sep", SoSeparator.class, false,
                                "topSeparator", "geomSeparator",false);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(translator5Rot,"translator5Rot", SoRotation.class, true,
                                "translator5Sep","",false);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(translator5,"translator5", SoTranslate2Dragger.class, true,
                                "translator5Sep","",true);

    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(translator6Sep,"translator6Sep", SoSeparator.class, false,
                                "topSeparator", "geomSeparator",false);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(translator6Rot,"translator6Rot", SoRotation.class, true,
                                "translator6Sep","",false);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(translator6,"translator6", SoTranslate2Dragger.class, true,
                                "translator6Sep","",true);

    // Read the default geometry for this dragger
    if (kitHeader.SO_KIT_IS_FIRST_INSTANCE())
        readDefaultParts( "transformBoxDragger.iv", geomBuffer, geomBuffer.length );

    kitHeader.SO_KIT_ADD_FIELD(rotation,"rotation", new SbRotation(0.0f, 0.0f, 0.0f, 1.0f));
    kitHeader.SO_KIT_ADD_FIELD(translation,"translation", new SbVec3f(0.0f, 0.0f, 0.0f));
    kitHeader.SO_KIT_ADD_FIELD(scaleFactor,"scaleFactor", new SbVec3f(1.0f, 1.0f, 1.0f));

    SO_KIT_INIT_INSTANCE();

    // Make the anti-squish node surround the biggest dimension
    SoAntiSquish as = (SoAntiSquish)SoBaseKit.SO_GET_ANY_PART( this,"antiSquish", SoAntiSquish.class );
    as.sizing.setValue( SoAntiSquish.Sizing.BIGGEST_DIMENSION);

    // Create the CHILD DRAGGERS.
    // 1 ScaleUniformDragger
    // 3 Cylinder Draggers
    // 6 Translate2Draggers

    /*SoDragger *sDrag =*/ SoBaseKit.SO_GET_ANY_PART( this,"scaler", SoScaleUniformDragger.class );

    SoDragger[] rDs = new SoDragger[3];
    rDs[0] = (SoDragger) SO_GET_ANY_PART( this, "rotator1", SoRotateCylindricalDragger.class);
    rDs[1] = (SoDragger) SO_GET_ANY_PART( this, "rotator2", SoRotateCylindricalDragger.class);
    rDs[2] = (SoDragger) SO_GET_ANY_PART( this, "rotator3", SoRotateCylindricalDragger.class);

    SoDragger[] tDs = new SoDragger[6];
    tDs[0] = (SoDragger) SO_GET_ANY_PART( this, "translator1", SoTranslate2Dragger.class);
    tDs[1] = (SoDragger) SO_GET_ANY_PART( this, "translator2", SoTranslate2Dragger.class);
    tDs[2] = (SoDragger) SO_GET_ANY_PART( this, "translator3", SoTranslate2Dragger.class);
    tDs[3] = (SoDragger) SO_GET_ANY_PART( this, "translator4", SoTranslate2Dragger.class);
    tDs[4] = (SoDragger) SO_GET_ANY_PART( this, "translator5", SoTranslate2Dragger.class);
    tDs[5] = (SoDragger) SO_GET_ANY_PART( this, "translator6", SoTranslate2Dragger.class);

    // Create rotations to place the rotate draggers.
    SoRotation[]              rRots = new SoRotation[3];
    int i;
    for (i = 0; i < 3; i++) {
        // The cylinder dragger works about the y axis by default
        rRots[i] = new SoRotation();
        final SbVec3fSingle fromAxis = new SbVec3fSingle(0,1,0), toAxis = new SbVec3fSingle(0,0,0);
        toAxis.getValue()[i] = 1; // make x, y or z axis
        rRots[i].rotation.setValue(new SbRotation(fromAxis, toAxis));
    }
    setAnyPartAsDefault( "rotator1Rot", rRots[0] );
    setAnyPartAsDefault( "rotator2Rot", rRots[1] );
    setAnyPartAsDefault( "rotator3Rot", rRots[2] );

    // Create rotations to place the translate draggers.
    SoRotation[]              tRots = new SoRotation[6];
    for (i = 0; i < 6; i++) {

        tRots[i] = new SoRotation();
        
        // The tranlater dragger is perpindicular to z by default
        final SbVec3fSingle fromAxis = new SbVec3fSingle(0,0,1), toAxis = new SbVec3fSingle(0,0,0);
        if ( i < 3 )
            toAxis.getValue()[i] = 1;    // make x, y or z axis
        else 
            toAxis.getValue()[ i - 3 ] = -1; // make negative x, y or z axis
        tRots[i].rotation.setValue(new SbRotation(fromAxis, toAxis));
    }
    setAnyPartAsDefault( "translator1Rot", tRots[0] );
    setAnyPartAsDefault( "translator2Rot", tRots[1] );
    setAnyPartAsDefault( "translator3Rot", tRots[2] );
    setAnyPartAsDefault( "translator4Rot", tRots[3] );
    setAnyPartAsDefault( "translator5Rot", tRots[4] );
    setAnyPartAsDefault( "translator6Rot", tRots[5] );

    // Update the rotation and scale fields when the motionMatrix is set.
    addValueChangedCallback( SoTransformBoxDragger::valueChangedCB );

    // Updates the motionMatrix when the scaleFactor field is set.
    rotFieldSensor 
        = new SoFieldSensor(SoTransformBoxDragger::fieldSensorCB, this);
    rotFieldSensor.setPriority( 0 );

    // Updates the motionMatrix when the translationFactor field is set.
    translFieldSensor 
        = new SoFieldSensor( SoTransformBoxDragger::fieldSensorCB, this);
    translFieldSensor.setPriority( 0 );

    // Updates the motionMatrix when the scaleFactor field is set.
    scaleFieldSensor 
        = new SoFieldSensor( SoTransformBoxDragger::fieldSensorCB, this);
    scaleFieldSensor.setPriority( 0 );

    setUpConnections( true, true );
}

////////////////////////////////////////////////////////////////////////
//
// Description:
//    Destructor
//
public void destructor()
//
////////////////////////////////////////////////////////////////////////
{
    if (rotFieldSensor != null)
        rotFieldSensor.destructor();
    if (translFieldSensor != null)
        translFieldSensor.destructor();
    if (scaleFieldSensor != null)
        scaleFieldSensor.destructor();
    super.destructor();
}

//    detach/attach any sensors, callbacks, and/or field connections.
//    Called by:            start/end of SoBaseKit::readInstance
//    and on new copy by:   start/end of SoBaseKit::copy.
//    Classes that redefine must call setUpConnections(true,true) 
//    at end of constructor.
//    Returns the state of the node when this was called.
public boolean
setUpConnections( boolean onOff, boolean doItAlways )
{
	if(kitHeader == null) {// java port
		return super.setUpConnections(onOff, doItAlways);
	}
	
    if ( !doItAlways && connectionsSetUp == onOff)
        return onOff;

    if ( onOff ) {

        // We connect AFTER base class.
        super.setUpConnections( onOff, false );

        SoDragger sD = (SoDragger ) getAnyPart("scaler", false );
        if (sD != null) {
            // Set up the parts in the child dragger
            sD.setPartAsDefault("scaler", 
                            "transformBoxScalerScaler");
            sD.setPartAsDefault("scalerActive", 
                            "transformBoxScalerScalerActive");
            sD.setPartAsDefault("feedback", 
                            "transformBoxScalerFeedback");
            sD.setPartAsDefault("feedbackActive", 
                            "transformBoxScalerFeedbackActive");
            sD.addStartCallback(
                SoTransformBoxDragger::invalidateSurroundScaleCB, this );
            sD.addFinishCallback(
                SoTransformBoxDragger::invalidateSurroundScaleCB, this );

            registerChildDragger( sD );
        } 

        SoDragger[] rDs = new SoDragger[3];
        rDs[0] = (SoDragger ) getAnyPart( "rotator1", false);
        rDs[1] = (SoDragger ) getAnyPart( "rotator2", false);
        rDs[2] = (SoDragger ) getAnyPart( "rotator3", false);
        int i;
        for (i = 0; i < 3; i++) {
            if ( rDs[i] == null)
                continue;
            rDs[i].setPartAsDefault("rotator", 
                            "transformBoxRotatorRotator");
            rDs[i].setPartAsDefault("rotatorActive", 
                            "transformBoxRotatorRotatorActive");
            rDs[i].setPartAsDefault("feedback", 
                            "transformBoxRotatorFeedback");
            rDs[i].setPartAsDefault("feedbackActive", 
                           "transformBoxRotatorFeedbackActive");

            rDs[i].addStartCallback(
                    SoTransformBoxDragger::invalidateSurroundScaleCB, this );
            rDs[i].addFinishCallback(
                    SoTransformBoxDragger::invalidateSurroundScaleCB, this );

            registerChildDragger( rDs[i] );
        }

        SoDragger[] tDs = new SoDragger[6];
        tDs[0] = (SoDragger ) getAnyPart( "translator1", false);
        tDs[1] = (SoDragger ) getAnyPart( "translator2", false);
        tDs[2] = (SoDragger ) getAnyPart( "translator3", false);
        tDs[3] = (SoDragger ) getAnyPart( "translator4", false);
        tDs[4] = (SoDragger ) getAnyPart( "translator5", false);
        tDs[5] = (SoDragger ) getAnyPart( "translator6", false);
        for (i = 0; i < 6; i++) {
            if ( tDs[i] == null) 
                continue;

            // Set up the parts in the child dragger
            tDs[i].setPartAsDefault("translator", 
                    "transformBoxTranslatorTranslator");
            tDs[i].setPartAsDefault("translatorActive", 
                    "transformBoxTranslatorTranslatorActive");
            tDs[i].setPartAsDefault("xAxisFeedback", 
                    "transformBoxTranslatorXAxisFeedback");
            tDs[i].setPartAsDefault("yAxisFeedback", 
                    "transformBoxTranslatorYAxisFeedback");

            tDs[i].addStartCallback(
                    SoTransformBoxDragger::invalidateSurroundScaleCB, this );
            tDs[i].addFinishCallback(
                    SoTransformBoxDragger::invalidateSurroundScaleCB, this );

            registerChildDragger( tDs[i] );
        }

        // Call the sensor CBs to make things are up-to-date.
        fieldSensorCB( this, null );

        // Connect the field sensors
        if (rotFieldSensor.getAttachedField() != rotation)
            rotFieldSensor.attach( rotation );
        if (translFieldSensor.getAttachedField() != translation)
            translFieldSensor.attach( translation );
        if (scaleFieldSensor.getAttachedField() != scaleFactor)
            scaleFieldSensor.attach( scaleFactor );
    }
    else {

        // We disconnect BEFORE base class.

        SoDragger sD = (SoDragger ) getAnyPart("scaler", false );
        if (sD != null) {
            sD.removeStartCallback(
                SoTransformBoxDragger::invalidateSurroundScaleCB, this );
            sD.removeFinishCallback(
                SoTransformBoxDragger::invalidateSurroundScaleCB, this );
            unregisterChildDragger( sD );
        } 

        SoDragger[] rDs = new SoDragger[3];
        rDs[0] = (SoDragger ) getAnyPart( "rotator1", false);
        rDs[1] = (SoDragger ) getAnyPart( "rotator2", false);
        rDs[2] = (SoDragger ) getAnyPart( "rotator3", false);
        int i;
        for (i = 0; i < 3; i++) {
            if ( rDs[i] == null)
                continue;
            rDs[i].removeStartCallback(
                    SoTransformBoxDragger::invalidateSurroundScaleCB, this );
            rDs[i].removeFinishCallback(
                    SoTransformBoxDragger::invalidateSurroundScaleCB, this );
            unregisterChildDragger( rDs[i] );
        }

        SoDragger[] tDs = new SoDragger[6];
        tDs[0] = (SoDragger ) getAnyPart( "translator1", false);
        tDs[1] = (SoDragger ) getAnyPart( "translator2", false);
        tDs[2] = (SoDragger ) getAnyPart( "translator3", false);
        tDs[3] = (SoDragger ) getAnyPart( "translator4", false);
        tDs[4] = (SoDragger ) getAnyPart( "translator5", false);
        tDs[5] = (SoDragger ) getAnyPart( "translator6", false);
        for (i = 0; i < 6; i++) {
            if ( tDs[i] == null) 
                continue;
            tDs[i].removeStartCallback(
                    SoTransformBoxDragger::invalidateSurroundScaleCB, this );
            tDs[i].removeFinishCallback(
                    SoTransformBoxDragger::invalidateSurroundScaleCB, this );
            unregisterChildDragger( tDs[i] );
        }

        // Disconnect the field sensors.
        if (rotFieldSensor.getAttachedField() != null)
            rotFieldSensor.detach();
        if (translFieldSensor.getAttachedField() != null)
            translFieldSensor.detach();
        if (scaleFieldSensor.getAttachedField() != null)
            scaleFieldSensor.detach();

        super.setUpConnections( onOff, false );
    }

    return !(connectionsSetUp = onOff);
}

public static void
valueChangedCB( Object object, SoDragger inDragger )
{
    SoTransformBoxDragger m = (SoTransformBoxDragger ) inDragger;
    final SbMatrix motMat = new SbMatrix(m.getMotionMatrix());

    final SbVec3f    trans = new SbVec3f(), scale = new SbVec3f();
    final SbRotation rot = new SbRotation(), scaleOrient = new SbRotation();
    motMat.getTransform( trans, rot, scale, scaleOrient);

    // Disconnect the field sensors
    m.rotFieldSensor.detach();
    m.translFieldSensor.detach();
    m.scaleFieldSensor.detach();

    if ( m.rotation.getValue().operator_not_equal( rot) )
        m.rotation.setValue( rot);
    if ( m.translation.getValue().operator_not_equal( trans) )
        m.translation.setValue( trans);
    if ( m.scaleFactor.getValue().operator_not_equal( scale) )
        m.scaleFactor.setValue( scale);

    // Reconnect the field sensors
    m.rotFieldSensor.attach( (m.rotation) );
    m.translFieldSensor.attach( (m.translation) );
    m.scaleFieldSensor.attach( (m.scaleFactor) );
}

public static void
fieldSensorCB( Object inDragger, SoSensor sensor )
{
    SoTransformBoxDragger dragger = (SoTransformBoxDragger ) inDragger;

    final SbMatrix motMat = new SbMatrix(dragger.getMotionMatrix());
    dragger.workFieldsIntoTransform( motMat );

    dragger.setMotionMatrix( motMat );
}

public static void 
invalidateSurroundScaleCB(Object parentAsVoid, SoDragger dragger )
{
    SoTransformBoxDragger tbD = (SoTransformBoxDragger ) parentAsVoid;

    // Invalidate the surroundScale, if it exists.
    SoSurroundScale ss = (SoSurroundScale)SoBaseKit.SO_CHECK_PART(tbD, "surroundScale", SoSurroundScale.class );
    if (ss != null)
        ss.invalidate();
}

public void
setDefaultOnNonWritingFields()
{
    // These nodes may change after construction, but we still
    // don't want to write them out.
    surroundScale.setDefault(true);
    antiSquish.setDefault(true);

    // Try not to write out the sub-draggers.
        scaler.setDefault(true);

        rotator1.setDefault(true);
        rotator2.setDefault(true);
        rotator3.setDefault(true);

        translator1.setDefault(true);
        translator2.setDefault(true);
        translator3.setDefault(true);
        translator4.setDefault(true);
        translator5.setDefault(true);
        translator6.setDefault(true);

    // Call the base class...
    super.setDefaultOnNonWritingFields();
}

    
////////////////////////////////////////////////////////////////////////
//
// Description:
//  Initializes the type ID for this dragger node. This
//  should be called once after SoInteraction::init().
//
// Use: public
//
public static void
initClass()
//
////////////////////////////////////////////////////////////////////////
{
    SO__KIT_INIT_CLASS(SoTransformBoxDragger.class, "TransformBoxDragger", SoDragger.class);
}

}
