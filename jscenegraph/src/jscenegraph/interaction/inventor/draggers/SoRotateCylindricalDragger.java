/*
 *
 *  Copyright (C) 2000 Silicon Graphics, Inc.  All Rights Reserved. 
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  Further, this software is distributed without any warranty that it is
 *  free of the rightful claim of any third person regarding infringement
 *  or the like.  Any license provided herein, whether implied or
 *  otherwise, applies only to this software file.  Patent licenses, if
 *  any, provided herein do not apply to combinations of this program with
 *  other software, or any other product whatsoever.
 * 
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 *  Contact information: Silicon Graphics, Inc., 1600 Amphitheatre Pkwy,
 *  Mountain View, CA  94043, or:
 * 
 *  http://www.sgi.com 
 * 
 *  For further information regarding this notice, see: 
 * 
 *  http://oss.sgi.com/projects/GenInfo/NoticeExplan/
 *
 */


/*
 * Copyright (C) 1990,91,92   Silicon Graphics, Inc.
 *
 _______________________________________________________________________
 ______________  S I L I C O N   G R A P H I C S   I N C .  ____________
 |
 |   $Revision: 1.1.1.1 $
 |
 |   Description:
 |      This file defines the Rotate Cylindrical dragger class.
 |      This is a simple dragger that returns a rotation
 |      based on vectors from the axis of the cylinder to its surface.
 |
 |      The mouse position is projected onto a cylinder determined
 |      by the axis and the radius. The radius is determined by the
 |      distance from the axis to the initial hit point.
 |
 | NOTE TO DEVELOPERS:
 |     For info about the structure of SoRotateCylindricalDragger:
 |     [1] compile: /usr/share/src/Inventor/samples/ivNodeKitStructure
 |     [2] type:    ivNodeKitStructure SoRotateCylindricalDragger.
 |     [3] The program prints a diagram of the scene graph and a table with 
 |         information about each part.
 |
 |  The following parts in this dragger are created at construction time.
 |  'ResourceName' corresponds to the name of the default geometry for the
 |  part. The dragger's constructor gets the scene graph for 'ResourceName'
 |  by querying the global dictionary ( SoDB::getByName("ResourceName"); ).  
 |
 |  Resource Name:                           Part Name:
 |
 |  rotateCylindricalRotator               - rotator
 |  rotateCylindricalRotatorActive         - rotatorActive
 |  rotateCylindricalFeedback              - feedback
 |  rotateCylindricalFeedbackActive        - feedbackActive
 |
 |   Author(s): Paul Isaacs, Howard Look
 |
 ______________  S I L I C O N   G R A P H I C S   I N C .  ____________
 _______________________________________________________________________
 */

package jscenegraph.interaction.inventor.draggers;

import jscenegraph.database.inventor.SbCylinder;
import jscenegraph.database.inventor.SbLine;
import jscenegraph.database.inventor.SbMatrix;
import jscenegraph.database.inventor.SbRotation;
import jscenegraph.database.inventor.SbVec3f;
import jscenegraph.database.inventor.SoType;
import jscenegraph.database.inventor.fields.SoFieldContainer;
import jscenegraph.database.inventor.fields.SoFieldData;
import jscenegraph.database.inventor.fields.SoSFNode;
import jscenegraph.database.inventor.fields.SoSFRotation;
import jscenegraph.database.inventor.nodes.SoSeparator;
import jscenegraph.database.inventor.nodes.SoSubNode;
import jscenegraph.database.inventor.nodes.SoSwitch;
import jscenegraph.database.inventor.projectors.SbCylinderPlaneProjector;
import jscenegraph.database.inventor.projectors.SbCylinderProjector;
import jscenegraph.database.inventor.sensors.SoFieldSensor;
import jscenegraph.database.inventor.sensors.SoSensor;
import jscenegraph.nodekits.inventor.nodekits.SoNodekitCatalog;
import jscenegraph.nodekits.inventor.nodekits.SoSubKit;

/**
 * @author Yves Boyadjian
 *
 */

////////////////////////////////////////////////////////////////////////////////
//! Object you rotate along a cylindrical surface by dragging with the mouse.
/*!
\class SoRotateCylindricalDragger
\ingroup Draggers
SoRotateCylindricalDragger 
is a simple dragger that rotates about the y axis of its local space.
The feel of the rotation is as if you were spinning a cylinder about
its axis of rotation.  The local space is determined by its location in the
scene graph.  Transformation nodes placed before it will affect both the
dragger and the direction of motion.


This node has a \b rotation  field which always reflects its orientation
in local space.  If you set the field, the dragger will rotate
accordingly.  You can also connect fields of other nodes or engines from
this one to make them follow the dragger's orientation.


This dragger contains four parts, <em>rotator</em>, <em>rotatorActive</em>,
<em>feedback</em>, and <em>feedbackActive</em>.


Each of these is set by default from a resource described in the Dragger
Resources section of the online reference page for this class.  You can
change the parts in any instance of this dragger using
setPart().


You can make your program use different default resources for the parts
by copying the file
\b /usr/share/data/draggerDefaults/rotateCylindricalDragger.iv 
into your own directory, editing the file, and then setting the 
environment variable \b SO_DRAGGER_DIR  to be a path to that directory.

\par File Format/Default
\par
\code
RotateCylindricalDragger {
  renderCaching AUTO
  boundingBoxCaching AUTO
  renderCulling AUTO
  pickCulling AUTO
  isActive false
  rotation 0 0 1 0
}
\endcode

\par See Also
\par
SoInteractionKit, SoDragger, SoCenterballDragger, SoDirectionalLightDragger, SoDragPointDragger, SoHandleBoxDragger, SoJackDragger, SoPointLightDragger, SoRotateDiscDragger, SoRotateSphericalDragger, SoScale1Dragger, SoScale2Dragger, SoScale2UniformDragger, SoScaleUniformDragger, SoSpotLightDragger, SoTabBoxDragger, SoTabPlaneDragger, SoTrackballDragger, SoTransformBoxDragger, SoTransformerDragger, SoTranslate1Dragger, SoTranslate2Dragger
*/
////////////////////////////////////////////////////////////////////////////////

public class SoRotateCylindricalDragger extends SoDragger {
	
    //SO_KIT_HEADER(SoRotateCylindricalDragger);
	private final SoSubKit kitHeader = SoSubKit.SO_KIT_HEADER(SoRotateCylindricalDragger.class,this);
	
	public                                                                     
    static SoType       getClassTypeId()        /* Returns class type id */   
                                    { return SoSubNode.getClassTypeId(SoRotateCylindricalDragger.class); }                   
    public SoType      getTypeId()       /* Returns type id      */
    {
		return kitHeader == null ? super.getTypeId() : kitHeader.getClassTypeId();		    	
    }
  public                                                                  
    SoFieldData   getFieldData() {
	  return kitHeader == null ? super.getFieldData() : kitHeader.getFieldData(); 
  }
  public  static SoFieldData[] getFieldDataPtr()                              
        { return SoSubNode.getFieldDataPtr(SoRotateCylindricalDragger.class); }              

	
    /* Returns an SoNodekitCatalog for the node */                            
    public SoNodekitCatalog getNodekitCatalog() {
    	if(kitHeader == null) {
    		return super.getNodekitCatalog();
    	}
    	return kitHeader.getNodekitCatalog();
    }

    protected final SoSFNode rotatorSwitch = new SoSFNode();
    protected final SoSFNode rotator = new SoSFNode();
    protected final SoSFNode rotatorActive = new SoSFNode();
    protected final SoSFNode feedbackSwitch = new SoSFNode();
    protected final SoSFNode feedback = new SoSFNode();
    protected final SoSFNode feedbackActive = new SoSFNode();

    public final SoSFRotation rotation = new SoSFRotation();

    protected SbCylinderProjector cylinderProj;   //!< Cylinder projector to use.
    protected boolean                userProj;        //!< using a user defined projector?

    protected SoFieldSensor fieldSensor;
    
    private static short[] geomBuffer;
    
    static {
    	int[] geom1 = getGeom1();
    	int length1 = geom1.length;
    	int length = length1;
    	geomBuffer = new short[length];
    	for(int i=0; i<length; i++) {
  			geomBuffer[i] = (short)geom1[i];
    	}    	
    }
    
    private static int[] getGeom1() {
    	int[] geom1 = {
0x23,0x49,0x6e,0x76,0x65,0x6e,0x74,0x6f,0x72,0x20,0x56,0x32,0x2e,0x31,0x20,0x62,0x69,0x6e,0x61,0x72,0x79,0x20,0x20,0xa,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x25,0x52,0x4f,0x54,0x41,0x54,0x45,0x5f,0x43,0x59,0x4c,0x49,0x4e,0x44,0x52,0x49,0x43,0x41,0x4c,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x59,0x5f,0x43,0x49,0x52,0x43,0x4c,0x45,0x2b,0x30,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x47,0x72,0x6f,0x75,0x70,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x0,0x0,0x0,0xd,0x4e,0x6f,0x72,0x6d,0x61,0x6c,0x42,0x69,0x6e,0x64,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x50,0x45,0x52,0x5f,0x56,0x45,0x52,0x54,0x45,0x58,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf,0x4d,0x61,0x74,0x65,0x72,0x69,0x61,0x6c,0x42,0x69,0x6e,0x64,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x4f,0x56,0x45,0x52,0x41,0x4c,0x4c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb,0x43,0x6f,0x6f,0x72,0x64,0x69,0x6e,0x61,0x74,0x65,0x33,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x70,0x6f,0x69,0x6e,0x74,0x0,0x0,0x0,0x0,0x0,0x0,0x21,0x3f,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3f,0x7b,0x14,0xba,0x0,0x0,0x0,0x0,0x3e,0x47,0xc5,0xac,0x3f,0x6c,0x83,0x66,0x0,0x0,0x0,0x0,0x3e,0xc3,0xef,0x7,0x3f,0x54,0xdb,0x38,0x0,0x0,0x0,0x0,0x3f,0xe,0x39,0xd6,0x3f,0x35,0x4,0xf7,0x0,0x0,0x0,0x0,0x3f,0x35,0x4,0xf7,0x3f,0xe,0x39,0xd6,0x0,0x0,0x0,0x0,0x3f,0x54,0xdb,0x38,0x3e,0xc3,0xef,0x7,0x0,0x0,0x0,0x0,0x3f,0x6c,0x83,0x66,0x3e,0x47,0xc5,0xac,0x0,0x0,0x0,0x0,0x3f,0x7b,0x14,0xba,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3f,0x80,0x0,0x0,0xbe,0x47,0xc5,0xac,0x0,0x0,0x0,0x0,0x3f,0x7b,0x14,0xba,0xbe,0xc3,0xef,0x7,0x0,0x0,0x0,0x0,0x3f,0x6c,0x83,0x66,0xbf,0xe,0x39,0xd6,0x0,0x0,0x0,0x0,0x3f,0x54,0xdb,0x38,0xbf,0x35,0x4,0xf7,0x0,0x0,0x0,0x0,0x3f,0x35,0x4,0xf7,0xbf,0x54,0xdb,0x38,0x0,0x0,0x0,0x0,0x3f,0xe,0x39,0xd6,0xbf,0x6c,0x83,0x66,0x0,0x0,0x0,0x0,0x3e,0xc3,0xef,0x7,0xbf,0x7b,0x14,0xba,0x0,0x0,0x0,0x0,0x3e,0x47,0xc5,0xac,0xbf,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xbf,0x7b,0x14,0xba,0x0,0x0,0x0,0x0,0xbe,0x47,0xc5,0xac,0xbf,0x6c,0x83,0x66,0x0,0x0,0x0,0x0,0xbe,0xc3,0xef,0x7,0xbf,0x54,0xdb,0x38,0x0,0x0,0x0,0x0,0xbf,0xe,0x39,0xd6,0xbf,0x35,0x4,0xf7,0x0,0x0,0x0,0x0,0xbf,0x35,0x4,0xf7,0xbf,0xe,0x39,0xd6,0x0,0x0,0x0,0x0,0xbf,0x54,0xdb,0x38,0xbe,0xc3,0xef,0x7,0x0,0x0,0x0,0x0,0xbf,0x6c,0x83,0x66,0xbe,0x47,0xc5,0xac,0x0,0x0,0x0,0x0,0xbf,0x7b,0x14,0xba,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xbf,0x80,0x0,0x0,0x3e,0x47,0xc5,0xac,0x0,0x0,0x0,0x0,0xbf,0x7b,0x14,0xba,0x3e,0xc3,0xef,0x7,0x0,0x0,0x0,0x0,0xbf,0x6c,0x83,0x66,0x3f,0xe,0x39,0xd6,0x0,0x0,0x0,0x0,0xbf,0x54,0xdb,0x38,0x3f,0x35,0x4,0xf7,0x0,0x0,0x0,0x0,0xbf,0x35,0x4,0xf7,0x3f,0x54,0xdb,0x38,0x0,0x0,0x0,0x0,0xbf,0xe,0x39,0xd6,0x3f,0x6c,0x83,0x66,0x0,0x0,0x0,0x0,0xbe,0xc3,0xef,0x7,0x3f,0x7b,0x14,0xba,0x0,0x0,0x0,0x0,0xbe,0x47,0xc5,0xac,0x3f,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x4e,0x6f,0x72,0x6d,0x61,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x6,0x76,0x65,0x63,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x21,0x3f,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3f,0x7b,0x14,0xba,0x0,0x0,0x0,0x0,0x3e,0x47,0xc5,0xac,0x3f,0x6c,0x83,0x66,0x0,0x0,0x0,0x0,0x3e,0xc3,0xef,0x7,0x3f,0x54,0xdb,0x38,0x0,0x0,0x0,0x0,0x3f,0xe,0x39,0xd6,0x3f,0x35,0x4,0xf7,0x0,0x0,0x0,0x0,0x3f,0x35,0x4,0xf7,0x3f,0xe,0x39,0xd6,0x0,0x0,0x0,0x0,0x3f,0x54,0xdb,0x38,0x3e,0xc3,0xef,0x7,0x0,0x0,0x0,0x0,0x3f,0x6c,0x83,0x66,0x3e,0x47,0xc5,0xac,0x0,0x0,0x0,0x0,0x3f,0x7b,0x14,0xba,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3f,0x80,0x0,0x0,0xbe,0x47,0xc5,0xac,0x0,0x0,0x0,0x0,0x3f,0x7b,0x14,0xba,0xbe,0xc3,0xef,0x7,0x0,0x0,0x0,0x0,0x3f,0x6c,0x83,0x66,0xbf,0xe,0x39,0xd6,0x0,0x0,0x0,0x0,0x3f,0x54,0xdb,0x38,0xbf,0x35,0x4,0xf7,0x0,0x0,0x0,0x0,0x3f,0x35,0x4,0xf7,0xbf,0x54,0xdb,0x38,0x0,0x0,0x0,0x0,0x3f,0xe,0x39,0xd6,0xbf,0x6c,0x83,0x66,0x0,0x0,0x0,0x0,0x3e,0xc3,0xef,0x7,0xbf,0x7b,0x14,0xba,0x0,0x0,0x0,0x0,0x3e,0x47,0xc5,0xac,0xbf,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xbf,0x7b,0x14,0xba,0x0,0x0,0x0,0x0,0xbe,0x47,0xc5,0xac,0xbf,0x6c,0x83,0x66,0x0,0x0,0x0,0x0,0xbe,0xc3,0xef,0x7,0xbf,0x54,0xdb,0x38,0x0,0x0,0x0,0x0,0xbf,0xe,0x39,0xd6,0xbf,0x35,0x4,0xf7,0x0,0x0,0x0,0x0,0xbf,0x35,0x4,0xf7,0xbf,0xe,0x39,0xd6,0x0,0x0,0x0,0x0,0xbf,0x54,0xdb,0x38,0xbe,0xc3,0xef,0x7,0x0,0x0,0x0,0x0,0xbf,0x6c,0x83,0x66,0xbe,0x47,0xc5,0xac,0x0,0x0,0x0,0x0,0xbf,0x7b,0x14,0xba,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xbf,0x80,0x0,0x0,0x3e,0x47,0xc5,0xac,0x0,0x0,0x0,0x0,0xbf,0x7b,0x14,0xba,0x3e,0xc3,0xef,0x7,0x0,0x0,0x0,0x0,0xbf,0x6c,0x83,0x66,0x3f,0xe,0x39,0xd6,0x0,0x0,0x0,0x0,0xbf,0x54,0xdb,0x38,0x3f,0x35,0x4,0xf7,0x0,0x0,0x0,0x0,0xbf,0x35,0x4,0xf7,0x3f,0x54,0xdb,0x38,0x0,0x0,0x0,0x0,0xbf,0xe,0x39,0xd6,0x3f,0x6c,0x83,0x66,0x0,0x0,0x0,0x0,0xbe,0xc3,0xef,0x7,0x3f,0x7b,0x14,0xba,0x0,0x0,0x0,0x0,0xbe,0x47,0xc5,0xac,0x3f,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x4c,0x69,0x6e,0x65,0x53,0x65,0x74,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x25,0x52,0x4f,0x54,0x41,0x54,0x45,0x5f,0x43,0x59,0x4c,0x49,0x4e,0x44,0x52,0x49,0x43,0x41,0x4c,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x43,0x59,0x4c,0x49,0x4e,0x44,0x45,0x52,0x2b,0x31,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x47,0x72,0x6f,0x75,0x70,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xe,0x0,0x0,0x0,0x5,0x53,0x63,0x61,0x6c,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xb,0x73,0x63,0x61,0x6c,0x65,0x46,0x61,0x63,0x74,0x6f,0x72,0x0,0x3f,0xc9,0x16,0x87,0x3f,0x8c,0xcc,0xcd,0x3f,0xc9,0x16,0x87,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xd,0x4e,0x6f,0x72,0x6d,0x61,0x6c,0x42,0x69,0x6e,0x64,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x50,0x45,0x52,0x5f,0x56,0x45,0x52,0x54,0x45,0x58,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf,0x4d,0x61,0x74,0x65,0x72,0x69,0x61,0x6c,0x42,0x69,0x6e,0x64,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x4f,0x56,0x45,0x52,0x41,0x4c,0x4c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb,0x43,0x6f,0x6f,0x72,0x64,0x69,0x6e,0x61,0x74,0x65,0x33,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x70,0x6f,0x69,0x6e,0x74,0x0,0x0,0x0,0x0,0x0,0x0,0x10,0xbf,0x80,0x0,0x0,0xbf,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0xbf,0x80,0x0,0x0,0x3f,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x3f,0x80,0x0,0x0,0xbf,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x3f,0x80,0x0,0x0,0x3f,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xbf,0x80,0x0,0x0,0x3f,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x3f,0x80,0x0,0x0,0x3f,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0xbf,0x80,0x0,0x0,0xbf,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x3f,0x80,0x0,0x0,0xbf,0x80,0x0,0x0,0x3f,0x35,0x4,0xf7,0xbf,0x80,0x0,0x0,0x3f,0x35,0x4,0xf7,0x3f,0x35,0x4,0xf7,0x3f,0x80,0x0,0x0,0x3f,0x35,0x4,0xf7,0xbf,0x35,0x4,0xf7,0xbf,0x80,0x0,0x0,0x3f,0x35,0x4,0xf7,0xbf,0x35,0x4,0xf7,0x3f,0x80,0x0,0x0,0x3f,0x35,0x4,0xf7,0xbf,0x35,0x4,0xf7,0xbf,0x80,0x0,0x0,0xbf,0x35,0x4,0xf7,0xbf,0x35,0x4,0xf7,0x3f,0x80,0x0,0x0,0xbf,0x35,0x4,0xf7,0x3f,0x35,0x4,0xf7,0xbf,0x80,0x0,0x0,0xbf,0x35,0x4,0xf7,0x3f,0x35,0x4,0xf7,0x3f,0x80,0x0,0x0,0xbf,0x35,0x4,0xf7,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x4e,0x6f,0x72,0x6d,0x61,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x6,0x76,0x65,0x63,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x10,0xbf,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xbf,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3f,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3f,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3f,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3f,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xbf,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xbf,0x80,0x0,0x0,0x3f,0x35,0x4,0xf7,0x0,0x0,0x0,0x0,0x3f,0x35,0x4,0xf7,0x3f,0x35,0x4,0xf7,0x0,0x0,0x0,0x0,0x3f,0x35,0x4,0xf7,0xbf,0x35,0x4,0xf7,0x0,0x0,0x0,0x0,0x3f,0x35,0x4,0xf7,0xbf,0x35,0x4,0xf7,0x0,0x0,0x0,0x0,0x3f,0x35,0x4,0xf7,0xbf,0x35,0x4,0xf7,0x0,0x0,0x0,0x0,0xbf,0x35,0x4,0xf7,0xbf,0x35,0x4,0xf7,0x0,0x0,0x0,0x0,0xbf,0x35,0x4,0xf7,0x3f,0x35,0x4,0xf7,0x0,0x0,0x0,0x0,0xbf,0x35,0x4,0xf7,0x3f,0x35,0x4,0xf7,0x0,0x0,0x0,0x0,0xbf,0x35,0x4,0xf7,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x4c,0x69,0x6e,0x65,0x53,0x65,0x74,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xb,0x6e,0x75,0x6d,0x56,0x65,0x72,0x74,0x69,0x63,0x65,0x73,0x0,0x0,0x0,0x0,0x8,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb,0x54,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x69,0x6f,0x6e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xb,0x74,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x69,0x6f,0x6e,0x0,0x0,0x0,0x0,0x0,0x3f,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x25,0x52,0x4f,0x54,0x41,0x54,0x45,0x5f,0x43,0x59,0x4c,0x49,0x4e,0x44,0x52,0x49,0x43,0x41,0x4c,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x59,0x5f,0x43,0x49,0x52,0x43,0x4c,0x45,0x2b,0x30,0x0,0x0,0x0,0x0,0x0,0x0,0xb,0x54,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x69,0x6f,0x6e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xb,0x74,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x69,0x6f,0x6e,0x0,0x0,0x0,0x0,0x0,0xc0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x25,0x52,0x4f,0x54,0x41,0x54,0x45,0x5f,0x43,0x59,0x4c,0x49,0x4e,0x44,0x52,0x49,0x43,0x41,0x4c,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x59,0x5f,0x43,0x49,0x52,0x43,0x4c,0x45,0x2b,0x30,0x0,0x0,0x0,0x0,0x0,0x0,0xb,0x54,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x69,0x6f,0x6e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xb,0x74,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x69,0x6f,0x6e,0x0,0x0,0x0,0x0,0x0,0x3f,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x9,0x44,0x72,0x61,0x77,0x53,0x74,0x79,0x6c,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x73,0x74,0x79,0x6c,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x9,0x49,0x4e,0x56,0x49,0x53,0x49,0x42,0x4c,0x45,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x43,0x6f,0x6d,0x70,0x6c,0x65,0x78,0x69,0x74,0x79,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x3e,0x99,0x99,0x9a,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x43,0x79,0x6c,0x69,0x6e,0x64,0x65,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x18,0x72,0x6f,0x74,0x61,0x74,0x65,0x43,0x79,0x6c,0x69,0x6e,0x64,0x72,0x69,0x63,0x61,0x6c,0x52,0x6f,0x74,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xd,0x72,0x65,0x6e,0x64,0x65,0x72,0x43,0x61,0x63,0x68,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x4f,0x4e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x0,0x0,0x0,0x8,0x4d,0x61,0x74,0x65,0x72,0x69,0x61,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0xc,0x64,0x69,0x66,0x66,0x75,0x73,0x65,0x43,0x6f,0x6c,0x6f,0x72,0x0,0x0,0x0,0x1,0x3f,0x0,0x0,0x0,0x3f,0x0,0x0,0x0,0x3f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xd,0x65,0x6d,0x69,0x73,0x73,0x69,0x76,0x65,0x43,0x6f,0x6c,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x3f,0x0,0x0,0x0,0x3f,0x0,0x0,0x0,0x3f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x9,0x44,0x72,0x61,0x77,0x53,0x74,0x79,0x6c,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x5,0x73,0x74,0x79,0x6c,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x4c,0x49,0x4e,0x45,0x53,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x9,0x6c,0x69,0x6e,0x65,0x57,0x69,0x64,0x74,0x68,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x4c,0x69,0x67,0x68,0x74,0x4d,0x6f,0x64,0x65,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x6d,0x6f,0x64,0x65,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x50,0x48,0x4f,0x4e,0x47,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x25,0x52,0x4f,0x54,0x41,0x54,0x45,0x5f,0x43,0x59,0x4c,0x49,0x4e,0x44,0x52,0x49,0x43,0x41,0x4c,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x43,0x59,0x4c,0x49,0x4e,0x44,0x45,0x52,0x2b,0x31,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x1e,0x72,0x6f,0x74,0x61,0x74,0x65,0x43,0x79,0x6c,0x69,0x6e,0x64,0x72,0x69,0x63,0x61,0x6c,0x52,0x6f,0x74,0x61,0x74,0x6f,0x72,0x41,0x63,0x74,0x69,0x76,0x65,0x0,0x0,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xd,0x72,0x65,0x6e,0x64,0x65,0x72,0x43,0x61,0x63,0x68,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x4f,0x4e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x0,0x0,0x0,0x8,0x4d,0x61,0x74,0x65,0x72,0x69,0x61,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0xc,0x64,0x69,0x66,0x66,0x75,0x73,0x65,0x43,0x6f,0x6c,0x6f,0x72,0x0,0x0,0x0,0x1,0x3f,0x0,0x0,0x0,0x3f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xd,0x65,0x6d,0x69,0x73,0x73,0x69,0x76,0x65,0x43,0x6f,0x6c,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x3f,0x0,0x0,0x0,0x3f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x9,0x44,0x72,0x61,0x77,0x53,0x74,0x79,0x6c,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x5,0x73,0x74,0x79,0x6c,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x4c,0x49,0x4e,0x45,0x53,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x9,0x6c,0x69,0x6e,0x65,0x57,0x69,0x64,0x74,0x68,0x0,0x0,0x0,0x40,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x4c,0x69,0x67,0x68,0x74,0x4d,0x6f,0x64,0x65,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x6d,0x6f,0x64,0x65,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x50,0x48,0x4f,0x4e,0x47,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x25,0x52,0x4f,0x54,0x41,0x54,0x45,0x5f,0x43,0x59,0x4c,0x49,0x4e,0x44,0x52,0x49,0x43,0x41,0x4c,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x43,0x59,0x4c,0x49,0x4e,0x44,0x45,0x52,0x2b,0x31,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x19,0x72,0x6f,0x74,0x61,0x74,0x65,0x43,0x79,0x6c,0x69,0x6e,0x64,0x72,0x69,0x63,0x61,0x6c,0x46,0x65,0x65,0x64,0x62,0x61,0x63,0x6b,0x0,0x0,0x0,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xd,0x72,0x65,0x6e,0x64,0x65,0x72,0x43,0x61,0x63,0x68,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x4f,0x4e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x9,0x0,0x0,0x0,0x9,0x50,0x69,0x63,0x6b,0x53,0x74,0x79,0x6c,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x73,0x74,0x79,0x6c,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x55,0x4e,0x50,0x49,0x43,0x4b,0x41,0x42,0x4c,0x45,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x4d,0x61,0x74,0x65,0x72,0x69,0x61,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0xc,0x64,0x69,0x66,0x66,0x75,0x73,0x65,0x43,0x6f,0x6c,0x6f,0x72,0x0,0x0,0x0,0x1,0x3e,0x80,0x0,0x0,0x3d,0x4c,0xcc,0xcd,0x3e,0xb8,0x51,0xec,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xd,0x65,0x6d,0x69,0x73,0x73,0x69,0x76,0x65,0x43,0x6f,0x6c,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x3e,0x80,0x0,0x0,0x3d,0x4c,0xcc,0xcd,0x3e,0xb8,0x51,0xec,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x9,0x44,0x72,0x61,0x77,0x53,0x74,0x79,0x6c,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x9,0x6c,0x69,0x6e,0x65,0x57,0x69,0x64,0x74,0x68,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x4c,0x69,0x67,0x68,0x74,0x4d,0x6f,0x64,0x65,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x6d,0x6f,0x64,0x65,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x50,0x48,0x4f,0x4e,0x47,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xd,0x4e,0x6f,0x72,0x6d,0x61,0x6c,0x42,0x69,0x6e,0x64,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x12,0x50,0x45,0x52,0x5f,0x56,0x45,0x52,0x54,0x45,0x58,0x5f,0x49,0x4e,0x44,0x45,0x58,0x45,0x44,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf,0x4d,0x61,0x74,0x65,0x72,0x69,0x61,0x6c,0x42,0x69,0x6e,0x64,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x4f,0x56,0x45,0x52,0x41,0x4c,0x4c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb,0x43,0x6f,0x6f,0x72,0x64,0x69,0x6e,0x61,0x74,0x65,0x33,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x70,0x6f,0x69,0x6e,0x74,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0xbf,0xa0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3f,0xa0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x4c,0x69,0x6e,0x65,0x53,0x65,0x74,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x1f,0x72,0x6f,0x74,0x61,0x74,0x65,0x43,0x79,0x6c,0x69,0x6e,0x64,0x72,0x69,0x63,0x61,0x6c,0x46,0x65,0x65,0x64,0x62,0x61,0x63,0x6b,0x41,0x63,0x74,0x69,0x76,0x65,0x0,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xd,0x72,0x65,0x6e,0x64,0x65,0x72,0x43,0x61,0x63,0x68,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x4f,0x4e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x9,0x0,0x0,0x0,0x9,0x50,0x69,0x63,0x6b,0x53,0x74,0x79,0x6c,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x73,0x74,0x79,0x6c,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x55,0x4e,0x50,0x49,0x43,0x4b,0x41,0x42,0x4c,0x45,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x4d,0x61,0x74,0x65,0x72,0x69,0x61,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0xc,0x64,0x69,0x66,0x66,0x75,0x73,0x65,0x43,0x6f,0x6c,0x6f,0x72,0x0,0x0,0x0,0x1,0x3e,0xb8,0x51,0xec,0x3d,0x4c,0xcc,0xcd,0x3e,0xe1,0x47,0xae,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xd,0x65,0x6d,0x69,0x73,0x73,0x69,0x76,0x65,0x43,0x6f,0x6c,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x3e,0xb8,0x51,0xec,0x3d,0x4c,0xcc,0xcd,0x3e,0xe1,0x47,0xae,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x9,0x44,0x72,0x61,0x77,0x53,0x74,0x79,0x6c,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x9,0x6c,0x69,0x6e,0x65,0x57,0x69,0x64,0x74,0x68,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x4c,0x69,0x67,0x68,0x74,0x4d,0x6f,0x64,0x65,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x6d,0x6f,0x64,0x65,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x50,0x48,0x4f,0x4e,0x47,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xd,0x4e,0x6f,0x72,0x6d,0x61,0x6c,0x42,0x69,0x6e,0x64,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x12,0x50,0x45,0x52,0x5f,0x56,0x45,0x52,0x54,0x45,0x58,0x5f,0x49,0x4e,0x44,0x45,0x58,0x45,0x44,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf,0x4d,0x61,0x74,0x65,0x72,0x69,0x61,0x6c,0x42,0x69,0x6e,0x64,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x4f,0x56,0x45,0x52,0x41,0x4c,0x4c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb,0x43,0x6f,0x6f,0x72,0x64,0x69,0x6e,0x61,0x74,0x65,0x33,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x70,0x6f,0x69,0x6e,0x74,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0xbf,0xa0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3f,0xa0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x4c,0x69,0x6e,0x65,0x53,0x65,0x74,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
    	};
    	return geom1;
    }
    
    
////////////////////////////////////////////////////////////////////////
//
// Description:
//    Constructor
//
public SoRotateCylindricalDragger()
//
////////////////////////////////////////////////////////////////////////
{
    kitHeader.SO_KIT_CONSTRUCTOR(SoRotateCylindricalDragger.class);

    isBuiltIn = true;

    // Put this stuff under the geomSeparator so it will draw more
    // efficiently.
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(rotatorSwitch,"rotatorSwitch", SoSwitch.class, true,
                                "geomSeparator","",false);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(rotator,"rotator", SoSeparator.class, true,
                                "rotatorSwitch","",true);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(rotatorActive,"rotatorActive", SoSeparator.class, true,
                                "rotatorSwitch","",true);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(feedbackSwitch,"feedbackSwitch", SoSwitch.class, true,
                                "geomSeparator","",false);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(feedback,"feedback", SoSeparator.class, true,
                                "feedbackSwitch","",true);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(feedbackActive,"feedbackActive", SoSeparator.class, true,
                                "feedbackSwitch","",true);

    // read geometry for shared parts
    if (kitHeader.SO_KIT_IS_FIRST_INSTANCE())
        readDefaultParts("rotateCylindricalDragger.iv", geomBuffer, geomBuffer.length );

    kitHeader.SO_KIT_ADD_FIELD(rotation,"rotation", new SbRotation(0.0f, 0.0f, 0.0f, 1.0f));

    SO_KIT_INIT_INSTANCE();

    // create the parts...
   setPartAsDefault("rotator",       "rotateCylindricalRotator");
   setPartAsDefault("rotatorActive", 
                         "rotateCylindricalRotatorActive"); 
   setPartAsDefault("feedback",      "rotateCylindricalFeedback");
   setPartAsDefault("feedbackActive",
                         "rotateCylindricalFeedbackActive");

    // Set the switches to 0...
    setSwitchValue(  rotatorSwitch.getValue(), 0 );
    setSwitchValue(  feedbackSwitch.getValue(), 0 );

    // start with our own default projector
    // the user can replace if they want
    cylinderProj = new SbCylinderPlaneProjector();
    userProj = false;

    // add the callbacks to perform the dragging
    addStartCallback(  SoRotateCylindricalDragger::startCB );
    addMotionCallback( SoRotateCylindricalDragger::motionCB );
    addFinishCallback( SoRotateCylindricalDragger::doneCB );

    // Updates the scaleFactor field when the motionMatrix is set.
    addValueChangedCallback( SoRotateCylindricalDragger::valueChangedCB );

    // Updates the motionMatrix when the scaleFactor field is set.
    fieldSensor 
        = new SoFieldSensor(SoRotateCylindricalDragger::fieldSensorCB, this);
    fieldSensor.setPriority( 0 );

    setUpConnections( true, true );
}

////////////////////////////////////////////////////////////////////////
//
// Description:
//    Destructor
//
public void destructor()
//
////////////////////////////////////////////////////////////////////////
{
    if ( cylinderProj != null)
        cylinderProj.destructor();
    if (fieldSensor != null)
        fieldSensor.destructor();
    super.destructor();
}

////////////////////////////////////////////////////////////////////////
//
// Description:
//    Redefines this to also copy the projector.
//
// Use: protected, virtual

public void
copyContents(final SoFieldContainer fromFC,
                                         boolean copyConnections)
//
////////////////////////////////////////////////////////////////////////
{
    // Do the usual stuff
    super.copyContents(fromFC, copyConnections);

    // Now, copy the projector variables...

    final SoRotateCylindricalDragger origDragger =
        ( SoRotateCylindricalDragger ) fromFC;

    if ( cylinderProj != null)
        cylinderProj.destructor();

    if ( origDragger.cylinderProj != null)
        cylinderProj = (SbCylinderProjector )
            origDragger.cylinderProj.copy();
    else
        cylinderProj = null;

    userProj = origDragger.userProj;
}

//    detach/attach any sensors, callbacks, and/or field connections.
//    Called by:            start/end of SoBaseKit::readInstance
//    and on new copy by:   start/end of SoBaseKit::copy.
//    Classes that redefine must call setUpConnections(true,true) 
//    at end of constructor.
//    Returns the state of the node when this was called.
public boolean
setUpConnections( boolean onOff, boolean doItAlways )
{
	if(kitHeader == null) { // java port
		return super.setUpConnections(onOff, doItAlways);
	}
	
    if ( !doItAlways && connectionsSetUp == onOff)
        return onOff;

    if ( onOff ) {

        // We connect AFTER base class.
        super.setUpConnections( onOff, false );

        // Call the sensor CBs to make things are up-to-date.
        fieldSensorCB( this, null );

        // Connect the field sensors
        if (fieldSensor.getAttachedField() != rotation)
            fieldSensor.attach( rotation );
    }
    else {

        // We disconnect BEFORE base class.

        // Disconnect the field sensors.
        if (fieldSensor.getAttachedField() != null)
            fieldSensor.detach();

        super.setUpConnections( onOff, false );
    }

    return !(connectionsSetUp = onOff);
}

////////////////////////////////////////////////////////////////////////
//
// Description:
//    Set the cylinder projector back to the default or to something
//  new.
//
// Use: public
//
public void
setProjector(SbCylinderProjector proj)
//
////////////////////////////////////////////////////////////////////////
{
    if ( cylinderProj != null)
        cylinderProj.destructor();

    if (proj == null) {
        // passing in null resets the projector to the default
        userProj = false;
        cylinderProj = new SbCylinderPlaneProjector();
    }
    else {
        // use the projector passed in
        cylinderProj = proj;
        userProj = true;
    }
}

////////////////////////////////////////////////////////////////////////
//
// Description:
//    Rotate the rotateCylindricalDragger based on mouse motion.
//
// Use: private
//
private void
dragStart()
//
////////////////////////////////////////////////////////////////////////
{
    // Set the switches to 1...
    setSwitchValue(  rotatorSwitch.getValue(), 1 );
    setSwitchValue(  feedbackSwitch.getValue(), 1 );

    // Establish the projector cylinder in working space.
    // Working space is space at end of motion matrix.
    // translate direction is defined as (1,0,0) in local space.
        // The axis in working space is the Y axis.
        final SbLine wsAxis = new SbLine(new SbVec3f(0,0,0), new SbVec3f(0,1,0));

        final SbVec3f startLocalHitPt = new SbVec3f(getLocalStartingPoint());
        float rad = (startLocalHitPt.operator_minus( 
                      wsAxis.getClosestPoint(startLocalHitPt))).length();
        cylinderProj.setCylinder( new SbCylinder(wsAxis, rad) );

    // If the hit point is on the near side of the center from where
    // the eye is, then tell the projector to intersect front.
    // Else, tell it to intersect back.
        final SbMatrix lclToWld = new SbMatrix(getLocalToWorldMatrix());
        cylinderProj.setViewVolume( getViewVolume() );
        cylinderProj.setWorkingSpace( lclToWld );
        if (getFrontOnProjector() ==  SoDragger.ProjectorFrontSetting.USE_PICK )
          cylinderProj.setFront(cylinderProj.isPointInFront(startLocalHitPt));
        else if (getFrontOnProjector() ==  SoDragger.ProjectorFrontSetting.FRONT )
            cylinderProj.setFront( true );
        else
            cylinderProj.setFront( false );

    // The cylindrical (and spherical) projectors are sort of weird in
    // that the initial hit defines the projector, but may not actually lie
    // on the cylinder or sphere selected.
    // This happens when the inital hit is too close to the edge to fit within
    // 'tolerance.'
    // So, to be sure that we get accurate performance, we need to 
    // project the mouse onto the projector once it is defined in order to 
    // get our starting point. 
        final SbVec3f localProjectPt = new SbVec3f(), worldProjectPt = new SbVec3f();
        localProjectPt.copyFrom(cylinderProj.project( getNormalizedLocaterPosition()));
        lclToWld.multVecMatrix( localProjectPt, worldProjectPt ); 
        setStartingPoint( worldProjectPt );
}

////////////////////////////////////////////////////////////////////////
//
// Description:
//    Rotate the rotateCylindricalDragger based on mouse motion.
//
// Use: private
//
private void
drag()
//
////////////////////////////////////////////////////////////////////////
{
    // Set up the projector space and view.
    // Working space is space at end of motion matrix.
        cylinderProj.setViewVolume( getViewVolume() );    
        cylinderProj.setWorkingSpace( getLocalToWorldMatrix() );

    // Get newHitPt and startHitPt in workspace.
        final SbVec3f newHitPt 
            = new SbVec3f(cylinderProj.project( getNormalizedLocaterPosition())); 
        final SbVec3f startHitPt = new SbVec3f(getLocalStartingPoint());

    // deltaRot is how much we rotated since the mouse button went down.
        final SbRotation deltaRot = 
            new SbRotation(cylinderProj.getRotation( startHitPt, newHitPt ));

    // Append this to the startMotionMatrix, which we saved at the beginning
    // of the drag, to find the current motion matrix.
        setMotionMatrix( 
            appendRotation( getStartMotionMatrix(), deltaRot, new SbVec3f(0,0,0)));
}

////////////////////////////////////////////////////////////////////////
//
// Description:
//    Rotate the rotateCylindricalDragger based on mouse motion.
//
// Use: private
//
private void
dragFinish()
//
////////////////////////////////////////////////////////////////////////
{
    // Set the switches to 0...
    setSwitchValue( rotatorSwitch.getValue(), 0 );
    setSwitchValue( feedbackSwitch.getValue(), 0 );
}    

////////////////////////////////////////////////////////////////////
//  Stubs for callbacks
////////////////////////////////////////////////////////////////////
public static void
startCB( Object object, SoDragger inDragger )
{
    SoRotateCylindricalDragger dl = (SoRotateCylindricalDragger ) inDragger;
    dl.dragStart();
}

public static void
motionCB( Object object, SoDragger inDragger )
{
    SoRotateCylindricalDragger dl = (SoRotateCylindricalDragger ) inDragger;
    dl.drag();
}

public static void
doneCB( Object object, SoDragger inDragger )
{
    SoRotateCylindricalDragger dl = (SoRotateCylindricalDragger ) inDragger;
    dl.dragFinish();
}

public static void
valueChangedCB( Object object, SoDragger inDragger )
{
    SoRotateCylindricalDragger m = (SoRotateCylindricalDragger ) inDragger;
    final SbMatrix motMat = new SbMatrix(m.getMotionMatrix());

    final SbVec3f    trans = new SbVec3f(), scale = new SbVec3f();
    final SbRotation rot = new SbRotation(), scaleOrient = new SbRotation();
    getTransformFast( motMat, trans, rot, scale, scaleOrient );

    // Disconnect the field sensor
    m.fieldSensor.detach();

    if ( m.rotation.getValue().operator_not_equal(rot) )
        m.rotation.setValue(rot);

    // Reconnect the field sensor
    m.fieldSensor.attach( (m.rotation) );
}

public static void
fieldSensorCB( Object inDragger, SoSensor sensor )
{
    SoRotateCylindricalDragger dragger 
                            = (SoRotateCylindricalDragger ) inDragger;

    // Incorporate the new field value into the matrix...
    final SbMatrix motMat = new SbMatrix(dragger.getMotionMatrix());
    dragger.workFieldsIntoTransform( motMat );

    dragger.setMotionMatrix( motMat );
}
    
    
////////////////////////////////////////////////////////////////////////
//
// Description:
//    Initialize the dragger
//
// Use: public, internal
//
public static void
initClass()
//
////////////////////////////////////////////////////////////////////////
{
    SO__KIT_INIT_CLASS(SoRotateCylindricalDragger.class, "RotateCylindricalDragger",
                       SoDragger.class);
}

}
