/**
 * 
 */
package jscenegraph.interaction.inventor.draggers;

import jscenegraph.database.inventor.SbMatrix;
import jscenegraph.database.inventor.SbRotation;
import jscenegraph.database.inventor.SbVec3f;
import jscenegraph.database.inventor.SoType;
import jscenegraph.database.inventor.fields.SoFieldContainer;
import jscenegraph.database.inventor.fields.SoFieldData;
import jscenegraph.database.inventor.fields.SoSFNode;
import jscenegraph.database.inventor.fields.SoSFRotation;
import jscenegraph.database.inventor.nodes.SoSeparator;
import jscenegraph.database.inventor.nodes.SoSubNode;
import jscenegraph.database.inventor.nodes.SoSwitch;
import jscenegraph.database.inventor.projectors.SbSphereProjector;
import jscenegraph.database.inventor.projectors.SbSphereSectionProjector;
import jscenegraph.database.inventor.sensors.SoFieldSensor;
import jscenegraph.database.inventor.sensors.SoSensor;
import jscenegraph.nodekits.inventor.nodekits.SoNodekitCatalog;
import jscenegraph.nodekits.inventor.nodekits.SoSubKit;
import jscenegraph.port.Util;

/*
 *
 *  Copyright (C) 2000 Silicon Graphics, Inc.  All Rights Reserved. 
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  Further, this software is distributed without any warranty that it is
 *  free of the rightful claim of any third person regarding infringement
 *  or the like.  Any license provided herein, whether implied or
 *  otherwise, applies only to this software file.  Patent licenses, if
 *  any, provided herein do not apply to combinations of this program with
 *  other software, or any other product whatsoever.
 * 
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 *  Contact information: Silicon Graphics, Inc., 1600 Amphitheatre Pkwy,
 *  Mountain View, CA  94043, or:
 * 
 *  http://www.sgi.com 
 * 
 *  For further information regarding this notice, see: 
 * 
 *  http://oss.sgi.com/projects/GenInfo/NoticeExplan/
 *
 */


/*
 * Copyright (C) 1990,91,92   Silicon Graphics, Inc.
 *
 _______________________________________________________________________
 ______________  S I L I C O N   G R A P H I C S   I N C .  ____________
 |
 |   $Revision: 1.1.1.1 $
 |
 |   Description:
 |      This file defines the RotateSpherical dragger class.
 |      This is a simple dragger that returns a rotation
 |      based on vectors from the center of the sphere to its surface.
 |
 |      The mouse position is projected onto a sphere determined
 |      by a center and the radius. The radius is determined from
 |      the distance from the center to the initial hit point.
 |
 | NOTE TO DEVELOPERS:
 |     For info about the structure of SoRotateSphericalDragger:
 |     [1] compile: /usr/share/src/Inventor/samples/ivNodeKitStructure
 |     [2] type:    ivNodeKitStructure SoRotateSphericalDragger.
 |     [3] The program prints a diagram of the scene graph and a table with 
 |         information about each part.
 |
 |  The following parts in this dragger are created at construction time.
 |  'ResourceName' corresponds to the name of the default geometry for the
 |  part. The dragger's constructor gets the scene graph for 'ResourceName'
 |  by querying the global dictionary ( SoDB::getByName("ResourceName"); ).  
 |
 |  Resource Name:                           Part Name:
 |
 |  rotateSphericalRotator                 - rotator
 |  rotateSphericalRotatorActive           - rotatorActive
 |  rotateSphericalFeedback                - feedback
 |  rotateSphericalFeedbackActive          - feedbackActive
 |
 |   Author(s): Paul Isaacs, Howard Look
 |
 ______________  S I L I C O N   G R A P H I C S   I N C .  ____________
 _______________________________________________________________________
 */

////////////////////////////////////////////////////////////////////////////////
//! Object you can rotate about a spherical surface by dragging with the mouse.
/*!
\class SoRotateSphericalDragger
\ingroup Draggers
SoRotateSphericalDragger 
is a simple dragger that rotates freely in all directions.
The feel of the rotation is as if you were rolling a ball.
The center of rotation is the origin of the local space, 
determined by the dragger's location in the scene graph.
Transformation nodes placed before it will
affect both the dragger and the direction of motion.


This node has a \b rotation  field which always reflects its orientation
in local space.  If you set the field, the dragger will rotate
accordingly.  You can also connect fields of other nodes or engines from
this one to make them follow the dragger's orientation.


This dragger contains four parts, <em>rotator</em>, <em>rotatorActive</em>,
<em>feedback</em>, and <em>feedbackActive</em>.


Each of these is set by default from a resource described in the Dragger
Resources section of the online reference page for this class.  You can
change the parts in any instance of this dragger using
setPart().


You can make your program use different default resources for the parts
by copying the file
\b /usr/share/data/draggerDefaults/rotateSphericalDragger.iv 
into your own directory, editing the file, and then
setting the environment variable \b SO_DRAGGER_DIR  to be a path to that directory.

\par File Format/Default
\par
\code
RotateSphericalDragger {
  renderCaching AUTO
  boundingBoxCaching AUTO
  renderCulling AUTO
  pickCulling AUTO
  isActive FALSE
  rotation 0 0 1 0
}
\endcode

\par See Also
\par
SoInteractionKit, SoDragger, SoCenterballDragger, SoDirectionalLightDragger, SoDragPointDragger, SoHandleBoxDragger, SoJackDragger, SoPointLightDragger, SoRotateCylindricalDragger, SoRotateDiscDragger, SoScale1Dragger, SoScale2Dragger, SoScale2UniformDragger, SoScaleUniformDragger, SoSpotLightDragger, SoTabBoxDragger, SoTabPlaneDragger, SoTrackballDragger, SoTransformBoxDragger, SoTransformerDragger, SoTranslate1Dragger, SoTranslate2Dragger
*/
////////////////////////////////////////////////////////////////////////////////

public class SoRotateSphericalDragger extends SoDragger
{
	//SO_KIT_HEADER(SoRotateSphericalDragger.class);
	private final SoSubKit kitHeader = SoSubKit.SO_KIT_HEADER(SoRotateSphericalDragger.class,this);

	public                                                                     
    static SoType       getClassTypeId()        /* Returns class type id */   
                                    { return SoSubNode.getClassTypeId(SoRotateSphericalDragger.class); }                   
    public SoType      getTypeId()       /* Returns type id      */
    {
		return kitHeader == null ? super.getTypeId() : kitHeader.getClassTypeId();		    	
    }
  public                                                                  
    SoFieldData   getFieldData() {
	  return kitHeader == null ? super.getFieldData() : kitHeader.getFieldData(); 
  }
  public  static SoFieldData[] getFieldDataPtr()                              
        { return SoSubNode.getFieldDataPtr(SoRotateSphericalDragger.class); }              

	
    /* Returns an SoNodekitCatalog for the node */                            
    public SoNodekitCatalog getNodekitCatalog() {
    	if(kitHeader == null) {
    		return super.getNodekitCatalog();
    	}
    	return kitHeader.getNodekitCatalog();
    }


	//SO_KIT_CATALOG_ENTRY_HEADER(rotatorSwitch);
    protected final SoSFNode rotatorSwitch = new SoSFNode();
	//SO_KIT_CATALOG_ENTRY_HEADER(rotator);
    protected final SoSFNode rotator = new SoSFNode();
	//SO_KIT_CATALOG_ENTRY_HEADER(rotatorActive);
    protected final SoSFNode rotatorActive = new SoSFNode();
	//SO_KIT_CATALOG_ENTRY_HEADER(feedbackSwitch);
    protected final SoSFNode feedbackSwitch = new SoSFNode();
	//SO_KIT_CATALOG_ENTRY_HEADER(feedback);
    protected final SoSFNode feedback = new SoSFNode();
	//SO_KIT_CATALOG_ENTRY_HEADER(feedbackActive);
    protected final SoSFNode feedbackActive = new SoSFNode();

  public
    //! Constructor.
    SoRotateSphericalDragger() {
	  kitHeader.SO_KIT_CONSTRUCTOR(SoRotateSphericalDragger.class);

    isBuiltIn = true;

    // Put this stuff under the geomSeparator so it will draw more
    // efficiently.
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(rotatorSwitch,"rotatorSwitch", SoSwitch.class, true,
                                "geomSeparator","",false);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(rotator,"rotator", SoSeparator.class, true,
                                "rotatorSwitch","",true);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(rotatorActive,"rotatorActive", SoSeparator.class, true,
                                "rotatorSwitch","",true);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(feedbackSwitch,"feedbackSwitch", SoSwitch.class, true,
                                "geomSeparator","",false);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(feedback,"feedback", SoSeparator.class, true,
                                "feedbackSwitch","",true);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(feedbackActive,"feedbackActive", SoSeparator.class, true,
                                "feedbackSwitch","",true);

    // read geometry for shared parts
    if (kitHeader.SO_KIT_IS_FIRST_INSTANCE())
        readDefaultParts("rotateSphericalDragger.iv", geomBuffer, Util.sizeof(geomBuffer) );

    kitHeader.SO_KIT_ADD_FIELD(rotation,"rotation", new SbRotation(0.0f, 0.0f, 0.0f, 1.0f));

    SO_KIT_INIT_INSTANCE();

    // create the parts...
    setPartAsDefault("rotator",       "rotateSphericalRotator");
    setPartAsDefault("rotatorActive",
                    "rotateSphericalRotatorActive");
    setPartAsDefault("feedback",      "rotateSphericalFeedback");
    setPartAsDefault("feedbackActive",
                    "rotateSphericalFeedbackActive");

    // Set the switches to 0...
    setSwitchValue( rotatorSwitch.getValue(), 0 );
    setSwitchValue( feedbackSwitch.getValue(), 0 );

    // start with our own default projector
    // the user can replace if they want
    sphereProj = new SbSphereSectionProjector();
    ((SbSphereSectionProjector )sphereProj).setRadialFactor( 0.85f );
    userProj = false;

    // add the callbacks to perform the dragging
    addStartCallback(  SoRotateSphericalDragger::startCB );
    addMotionCallback( SoRotateSphericalDragger::motionCB );
    addFinishCallback( SoRotateSphericalDragger::doneCB );

    // Updates the scaleFactor field when the motionMatrix is set.
    addValueChangedCallback( SoRotateSphericalDragger::valueChangedCB );

    // Updates the motionMatrix when the scaleFactor field is set.
    fieldSensor 
        = new SoFieldSensor(SoRotateSphericalDragger::fieldSensorCB, this);
    fieldSensor.setPriority( 0 );

    setUpConnections( true, true );
  }

    public final SoSFRotation rotation = new SoSFRotation();

    //! Set a different sphere projector. 
    //! See the SbSphereProjector
    //! man pages to find out how each kind affects the feel of your dragger's motion.
    //! The default uses an
    //! SbSpherePlaneProjector.
    //! 
    //! 
    //! Passing in NULL will cause the default type of projector to be used.
    //! Any projector you pass in will be deleted by this dragger when 
    //! this dragger is deleted.
    //! Note that the center and radius of the sphere are determined by the
    //! dragger, based on the origin of the local space and the distance between 
    //! the initial mouse click and that origin.
    public void                        setProjector(SbSphereProjector p) {
    	//TODO
    }
    //! Get the projector.
    public SbSphereProjector getProjector() { return sphereProj; }

  public
    static void         initClass() {    //!< initialize the class
	    SO__KIT_INIT_CLASS(SoRotateSphericalDragger.class, "RotateSphericalDragger",
                SoDragger.class);
  }
  
  //protected:

    protected final SbMatrix        prevMotionMatrix = new SbMatrix(); //!< used during interaction
    protected final SbVec3f         prevWorldHitPt = new SbVec3f(); //!< used during interaction
    protected SbSphereProjector   sphereProj; //ptr   //!< Sphere projector to use.
    protected boolean                userProj;       //!< using a user defined projector?

    //! Redefines this to also copy the projector.
    //! The projector needs to be copied since the user can set it.
    public void        copyContents(final SoFieldContainer fromFC,
                                     boolean copyConnections) {
    	//TODO
    }

    protected static void startCB( Object obj, SoDragger dragger ) {
    	//TODO
    }
    protected static void motionCB( Object obj, SoDragger dragger ) {
    	//TODO
    }
    protected static void doneCB( Object obj, SoDragger dragger ) {
    	//TODO
    }

    protected SoFieldSensor fieldSensor; // ptr;
    public static void fieldSensorCB( Object inDragger, SoSensor sensor ) {
    SoRotateSphericalDragger dragger 
                            = (SoRotateSphericalDragger ) inDragger;

    // Incorporate the new field value into the matrix...
    SbMatrix motMat = new SbMatrix(dragger.getMotionMatrix());
    dragger.workFieldsIntoTransform( motMat );

    dragger.setMotionMatrix( motMat );
    }
    public static void valueChangedCB( Object obj, SoDragger dragger ) {
    	//TODO
    }

    public void        dragStart() {
    	//TODO
    }
    public void        drag() {
    	//TODO
    }
    public void        dragFinish() {
    	//TODO
    }

    //! detach/attach any sensors, callbacks, and/or field connections.
    //! Called by:            start/end of SoBaseKit::readInstance
    //! and on new copy by:   start/end of SoBaseKit::copy.
    //! Classes that redefine must call setUpConnections(true,true) 
    //! at end of constructor.
    //! Returns the state of the node when this was called.
    public boolean setUpConnections( boolean onOff, boolean doItAlways /*= false*/ ) {
    	if(kitHeader == null) { // java port
    		return super.setUpConnections(onOff, doItAlways);
    	}
    	
    if ( !doItAlways && connectionsSetUp == onOff)
        return onOff;

    if ( onOff ) {

        // We connect AFTER base class.
        super.setUpConnections( onOff, false );

        // Call the sensor CBs to make things are up-to-date.
        fieldSensorCB( this, null );

        // Connect the field sensors
        if (fieldSensor.getAttachedField() != rotation)
            fieldSensor.attach( rotation );
    }
    else {

        // We disconnect BEFORE base class.

        // Disconnect the field sensors.
        if (fieldSensor.getAttachedField() != null)
            fieldSensor.detach();

        super.setUpConnections( onOff, false );
    }

    return !(connectionsSetUp = onOff);
    }

    public void destructor() {
    	//TODO
    	super.destructor();
    }

  private
    //! Default geometry
    static final short[] geomBuffer = {
		  0x23,0x49,0x6e,0x76,0x65,0x6e,0x74,0x6f,0x72,0x20,0x56,0x32,0x2e,0x31,0x20,0x62,0x69,0x6e,0x61,0x72,0x79,0x20,0x20,0xa,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x23,0x52,0x4f,0x54,0x41,0x54,0x45,0x5f,0x53,0x50,0x48,0x45,0x52,0x49,0x43,0x41,0x4c,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x59,0x5f,0x43,0x49,0x52,0x43,0x4c,0x45,0x2b,0x30,0x0,0x0,0x0,0x0,0x5,0x47,0x72,0x6f,0x75,0x70,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x0,0x0,0x0,0xd,0x4e,0x6f,0x72,0x6d,0x61,0x6c,0x42,0x69,0x6e,0x64,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x50,0x45,0x52,0x5f,0x56,0x45,0x52,0x54,0x45,0x58,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf,0x4d,0x61,0x74,0x65,0x72,0x69,0x61,0x6c,0x42,0x69,0x6e,0x64,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x4f,0x56,0x45,0x52,0x41,0x4c,0x4c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb,0x43,0x6f,0x6f,0x72,0x64,0x69,0x6e,0x61,0x74,0x65,0x33,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x70,0x6f,0x69,0x6e,0x74,0x0,0x0,0x0,0x0,0x0,0x0,0x21,0x3f,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3f,0x7b,0x14,0xba,0x0,0x0,0x0,0x0,0x3e,0x47,0xc5,0xac,0x3f,0x6c,0x83,0x66,0x0,0x0,0x0,0x0,0x3e,0xc3,0xef,0x7,0x3f,0x54,0xdb,0x38,0x0,0x0,0x0,0x0,0x3f,0xe,0x39,0xd6,0x3f,0x35,0x4,0xf7,0x0,0x0,0x0,0x0,0x3f,0x35,0x4,0xf7,0x3f,0xe,0x39,0xd6,0x0,0x0,0x0,0x0,0x3f,0x54,0xdb,0x38,0x3e,0xc3,0xef,0x7,0x0,0x0,0x0,0x0,0x3f,0x6c,0x83,0x66,0x3e,0x47,0xc5,0xac,0x0,0x0,0x0,0x0,0x3f,0x7b,0x14,0xba,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3f,0x80,0x0,0x0,0xbe,0x47,0xc5,0xac,0x0,0x0,0x0,0x0,0x3f,0x7b,0x14,0xba,0xbe,0xc3,0xef,0x7,0x0,0x0,0x0,0x0,0x3f,0x6c,0x83,0x66,0xbf,0xe,0x39,0xd6,0x0,0x0,0x0,0x0,0x3f,0x54,0xdb,0x38,0xbf,0x35,0x4,0xf7,0x0,0x0,0x0,0x0,0x3f,0x35,0x4,0xf7,0xbf,0x54,0xdb,0x38,0x0,0x0,0x0,0x0,0x3f,0xe,0x39,0xd6,0xbf,0x6c,0x83,0x66,0x0,0x0,0x0,0x0,0x3e,0xc3,0xef,0x7,0xbf,0x7b,0x14,0xba,0x0,0x0,0x0,0x0,0x3e,0x47,0xc5,0xac,0xbf,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xbf,0x7b,0x14,0xba,0x0,0x0,0x0,0x0,0xbe,0x47,0xc5,0xac,0xbf,0x6c,0x83,0x66,0x0,0x0,0x0,0x0,0xbe,0xc3,0xef,0x7,0xbf,0x54,0xdb,0x38,0x0,0x0,0x0,0x0,0xbf,0xe,0x39,0xd6,0xbf,0x35,0x4,0xf7,0x0,0x0,0x0,0x0,0xbf,0x35,0x4,0xf7,0xbf,0xe,0x39,0xd6,0x0,0x0,0x0,0x0,0xbf,0x54,0xdb,0x38,0xbe,0xc3,0xef,0x7,0x0,0x0,0x0,0x0,0xbf,0x6c,0x83,0x66,0xbe,0x47,0xc5,0xac,0x0,0x0,0x0,0x0,0xbf,0x7b,0x14,0xba,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xbf,0x80,0x0,0x0,0x3e,0x47,0xc5,0xac,0x0,0x0,0x0,0x0,0xbf,0x7b,0x14,0xba,0x3e,0xc3,0xef,0x7,0x0,0x0,0x0,0x0,0xbf,0x6c,0x83,0x66,0x3f,0xe,0x39,0xd6,0x0,0x0,0x0,0x0,0xbf,0x54,0xdb,0x38,0x3f,0x35,0x4,0xf7,0x0,0x0,0x0,0x0,0xbf,0x35,0x4,0xf7,0x3f,0x54,0xdb,0x38,0x0,0x0,0x0,0x0,0xbf,0xe,0x39,0xd6,0x3f,0x6c,0x83,0x66,0x0,0x0,0x0,0x0,0xbe,0xc3,0xef,0x7,0x3f,0x7b,0x14,0xba,0x0,0x0,0x0,0x0,0xbe,0x47,0xc5,0xac,0x3f,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x4e,0x6f,0x72,0x6d,0x61,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x6,0x76,0x65,0x63,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x21,0x3f,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3f,0x7b,0x14,0xba,0x0,0x0,0x0,0x0,0x3e,0x47,0xc5,0xac,0x3f,0x6c,0x83,0x66,0x0,0x0,0x0,0x0,0x3e,0xc3,0xef,0x7,0x3f,0x54,0xdb,0x38,0x0,0x0,0x0,0x0,0x3f,0xe,0x39,0xd6,0x3f,0x35,0x4,0xf7,0x0,0x0,0x0,0x0,0x3f,0x35,0x4,0xf7,0x3f,0xe,0x39,0xd6,0x0,0x0,0x0,0x0,0x3f,0x54,0xdb,0x38,0x3e,0xc3,0xef,0x7,0x0,0x0,0x0,0x0,0x3f,0x6c,0x83,0x66,0x3e,0x47,0xc5,0xac,0x0,0x0,0x0,0x0,0x3f,0x7b,0x14,0xba,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3f,0x80,0x0,0x0,0xbe,0x47,0xc5,0xac,0x0,0x0,0x0,0x0,0x3f,0x7b,0x14,0xba,0xbe,0xc3,0xef,0x7,0x0,0x0,0x0,0x0,0x3f,0x6c,0x83,0x66,0xbf,0xe,0x39,0xd6,0x0,0x0,0x0,0x0,0x3f,0x54,0xdb,0x38,0xbf,0x35,0x4,0xf7,0x0,0x0,0x0,0x0,0x3f,0x35,0x4,0xf7,0xbf,0x54,0xdb,0x38,0x0,0x0,0x0,0x0,0x3f,0xe,0x39,0xd6,0xbf,0x6c,0x83,0x66,0x0,0x0,0x0,0x0,0x3e,0xc3,0xef,0x7,0xbf,0x7b,0x14,0xba,0x0,0x0,0x0,0x0,0x3e,0x47,0xc5,0xac,0xbf,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xbf,0x7b,0x14,0xba,0x0,0x0,0x0,0x0,0xbe,0x47,0xc5,0xac,0xbf,0x6c,0x83,0x66,0x0,0x0,0x0,0x0,0xbe,0xc3,0xef,0x7,0xbf,0x54,0xdb,0x38,0x0,0x0,0x0,0x0,0xbf,0xe,0x39,0xd6,0xbf,0x35,0x4,0xf7,0x0,0x0,0x0,0x0,0xbf,0x35,0x4,0xf7,0xbf,0xe,0x39,0xd6,0x0,0x0,0x0,0x0,0xbf,0x54,0xdb,0x38,0xbe,0xc3,0xef,0x7,0x0,0x0,0x0,0x0,0xbf,0x6c,0x83,0x66,0xbe,0x47,0xc5,0xac,0x0,0x0,0x0,0x0,0xbf,0x7b,0x14,0xba,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xbf,0x80,0x0,0x0,0x3e,0x47,0xc5,0xac,0x0,0x0,0x0,0x0,0xbf,0x7b,0x14,0xba,0x3e,0xc3,0xef,0x7,0x0,0x0,0x0,0x0,0xbf,0x6c,0x83,0x66,0x3f,0xe,0x39,0xd6,0x0,0x0,0x0,0x0,0xbf,0x54,0xdb,0x38,0x3f,0x35,0x4,0xf7,0x0,0x0,0x0,0x0,0xbf,0x35,0x4,0xf7,0x3f,0x54,0xdb,0x38,0x0,0x0,0x0,0x0,0xbf,0xe,0x39,0xd6,0x3f,0x6c,0x83,0x66,0x0,0x0,0x0,0x0,0xbe,0xc3,0xef,0x7,0x3f,0x7b,0x14,0xba,0x0,0x0,0x0,0x0,0xbe,0x47,0xc5,0xac,0x3f,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x4c,0x69,0x6e,0x65,0x53,0x65,0x74,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x22,0x52,0x4f,0x54,0x41,0x54,0x45,0x5f,0x53,0x50,0x48,0x45,0x52,0x49,0x43,0x41,0x4c,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x52,0x4f,0x54,0x41,0x54,0x4f,0x52,0x2b,0x31,0x0,0x0,0x0,0x0,0x0,0x5,0x47,0x72,0x6f,0x75,0x70,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x0,0x0,0x0,0x5,0x53,0x63,0x61,0x6c,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xb,0x73,0x63,0x61,0x6c,0x65,0x46,0x61,0x63,0x74,0x6f,0x72,0x0,0x3f,0xdd,0xb2,0x2d,0x3f,0xdd,0xb2,0x2d,0x3f,0xdd,0xb2,0x2d,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0xb,0x52,0x6f,0x74,0x61,0x74,0x69,0x6f,0x6e,0x58,0x59,0x5a,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x4,0x61,0x78,0x69,0x73,0x0,0x0,0x0,0x1,0x5a,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x61,0x6e,0x67,0x6c,0x65,0x0,0x0,0x0,0x3f,0xc9,0xf,0xa6,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x23,0x52,0x4f,0x54,0x41,0x54,0x45,0x5f,0x53,0x50,0x48,0x45,0x52,0x49,0x43,0x41,0x4c,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x59,0x5f,0x43,0x49,0x52,0x43,0x4c,0x45,0x2b,0x30,0x0,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x23,0x52,0x4f,0x54,0x41,0x54,0x45,0x5f,0x53,0x50,0x48,0x45,0x52,0x49,0x43,0x41,0x4c,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x59,0x5f,0x43,0x49,0x52,0x43,0x4c,0x45,0x2b,0x30,0x0,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0xb,0x52,0x6f,0x74,0x61,0x74,0x69,0x6f,0x6e,0x58,0x59,0x5a,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x4,0x61,0x78,0x69,0x73,0x0,0x0,0x0,0x1,0x58,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x61,0x6e,0x67,0x6c,0x65,0x0,0x0,0x0,0x3f,0xc9,0xf,0xa6,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x23,0x52,0x4f,0x54,0x41,0x54,0x45,0x5f,0x53,0x50,0x48,0x45,0x52,0x49,0x43,0x41,0x4c,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x59,0x5f,0x43,0x49,0x52,0x43,0x4c,0x45,0x2b,0x30,0x0,0x0,0x0,0x0,0x9,0x44,0x72,0x61,0x77,0x53,0x74,0x79,0x6c,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x73,0x74,0x79,0x6c,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x9,0x49,0x4e,0x56,0x49,0x53,0x49,0x42,0x4c,0x45,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0xa,0x43,0x6f,0x6d,0x70,0x6c,0x65,0x78,0x69,0x74,0x79,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x3e,0x99,0x99,0x9a,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x53,0x70,0x68,0x65,0x72,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x16,0x72,0x6f,0x74,0x61,0x74,0x65,0x53,0x70,0x68,0x65,0x72,0x69,0x63,0x61,0x6c,0x52,0x6f,0x74,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xd,0x72,0x65,0x6e,0x64,0x65,0x72,0x43,0x61,0x63,0x68,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x4f,0x4e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x0,0x0,0x0,0x8,0x4d,0x61,0x74,0x65,0x72,0x69,0x61,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0xc,0x64,0x69,0x66,0x66,0x75,0x73,0x65,0x43,0x6f,0x6c,0x6f,0x72,0x0,0x0,0x0,0x1,0x3f,0x0,0x0,0x0,0x3f,0x0,0x0,0x0,0x3f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xd,0x65,0x6d,0x69,0x73,0x73,0x69,0x76,0x65,0x43,0x6f,0x6c,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x3f,0x0,0x0,0x0,0x3f,0x0,0x0,0x0,0x3f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x9,0x44,0x72,0x61,0x77,0x53,0x74,0x79,0x6c,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x5,0x73,0x74,0x79,0x6c,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x4c,0x49,0x4e,0x45,0x53,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x9,0x6c,0x69,0x6e,0x65,0x57,0x69,0x64,0x74,0x68,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x4c,0x69,0x67,0x68,0x74,0x4d,0x6f,0x64,0x65,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x6d,0x6f,0x64,0x65,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x50,0x48,0x4f,0x4e,0x47,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x22,0x52,0x4f,0x54,0x41,0x54,0x45,0x5f,0x53,0x50,0x48,0x45,0x52,0x49,0x43,0x41,0x4c,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x52,0x4f,0x54,0x41,0x54,0x4f,0x52,0x2b,0x31,0x0,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x1c,0x72,0x6f,0x74,0x61,0x74,0x65,0x53,0x70,0x68,0x65,0x72,0x69,0x63,0x61,0x6c,0x52,0x6f,0x74,0x61,0x74,0x6f,0x72,0x41,0x63,0x74,0x69,0x76,0x65,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xd,0x72,0x65,0x6e,0x64,0x65,0x72,0x43,0x61,0x63,0x68,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x4f,0x4e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x0,0x0,0x0,0x8,0x4d,0x61,0x74,0x65,0x72,0x69,0x61,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0xc,0x64,0x69,0x66,0x66,0x75,0x73,0x65,0x43,0x6f,0x6c,0x6f,0x72,0x0,0x0,0x0,0x1,0x3f,0x0,0x0,0x0,0x3f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xd,0x65,0x6d,0x69,0x73,0x73,0x69,0x76,0x65,0x43,0x6f,0x6c,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x3f,0x0,0x0,0x0,0x3f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x9,0x44,0x72,0x61,0x77,0x53,0x74,0x79,0x6c,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x5,0x73,0x74,0x79,0x6c,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x4c,0x49,0x4e,0x45,0x53,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x9,0x6c,0x69,0x6e,0x65,0x57,0x69,0x64,0x74,0x68,0x0,0x0,0x0,0x40,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x4c,0x69,0x67,0x68,0x74,0x4d,0x6f,0x64,0x65,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x6d,0x6f,0x64,0x65,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x50,0x48,0x4f,0x4e,0x47,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x22,0x52,0x4f,0x54,0x41,0x54,0x45,0x5f,0x53,0x50,0x48,0x45,0x52,0x49,0x43,0x41,0x4c,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x52,0x4f,0x54,0x41,0x54,0x4f,0x52,0x2b,0x31,0x0,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x23,0x52,0x4f,0x54,0x41,0x54,0x45,0x5f,0x53,0x50,0x48,0x45,0x52,0x49,0x43,0x41,0x4c,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x46,0x45,0x45,0x44,0x42,0x41,0x43,0x4b,0x2b,0x32,0x0,0x0,0x0,0x0,0x5,0x47,0x72,0x6f,0x75,0x70,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x0,0x0,0xd,0x4e,0x6f,0x72,0x6d,0x61,0x6c,0x42,0x69,0x6e,0x64,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x12,0x50,0x45,0x52,0x5f,0x56,0x45,0x52,0x54,0x45,0x58,0x5f,0x49,0x4e,0x44,0x45,0x58,0x45,0x44,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf,0x4d,0x61,0x74,0x65,0x72,0x69,0x61,0x6c,0x42,0x69,0x6e,0x64,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x4f,0x56,0x45,0x52,0x41,0x4c,0x4c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb,0x43,0x6f,0x6f,0x72,0x64,0x69,0x6e,0x61,0x74,0x65,0x33,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x70,0x6f,0x69,0x6e,0x74,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0xbf,0xa0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3f,0xa0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x4c,0x69,0x6e,0x65,0x53,0x65,0x74,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb,0x43,0x6f,0x6f,0x72,0x64,0x69,0x6e,0x61,0x74,0x65,0x33,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x70,0x6f,0x69,0x6e,0x74,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0xbf,0xa0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3f,0xa0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x4c,0x69,0x6e,0x65,0x53,0x65,0x74,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb,0x43,0x6f,0x6f,0x72,0x64,0x69,0x6e,0x61,0x74,0x65,0x33,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x70,0x6f,0x69,0x6e,0x74,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xbf,0xa0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3f,0xa0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x4c,0x69,0x6e,0x65,0x53,0x65,0x74,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x17,0x72,0x6f,0x74,0x61,0x74,0x65,0x53,0x70,0x68,0x65,0x72,0x69,0x63,0x61,0x6c,0x46,0x65,0x65,0x64,0x62,0x61,0x63,0x6b,0x0,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xd,0x72,0x65,0x6e,0x64,0x65,0x72,0x43,0x61,0x63,0x68,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x4f,0x4e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x0,0x0,0x0,0x9,0x50,0x69,0x63,0x6b,0x53,0x74,0x79,0x6c,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x73,0x74,0x79,0x6c,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x55,0x4e,0x50,0x49,0x43,0x4b,0x41,0x42,0x4c,0x45,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x4d,0x61,0x74,0x65,0x72,0x69,0x61,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0xc,0x64,0x69,0x66,0x66,0x75,0x73,0x65,0x43,0x6f,0x6c,0x6f,0x72,0x0,0x0,0x0,0x1,0x3e,0x80,0x0,0x0,0x3d,0x4c,0xcc,0xcd,0x3e,0xb8,0x51,0xec,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xd,0x65,0x6d,0x69,0x73,0x73,0x69,0x76,0x65,0x43,0x6f,0x6c,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x3e,0x80,0x0,0x0,0x3d,0x4c,0xcc,0xcd,0x3e,0xb8,0x51,0xec,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x9,0x44,0x72,0x61,0x77,0x53,0x74,0x79,0x6c,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x9,0x6c,0x69,0x6e,0x65,0x57,0x69,0x64,0x74,0x68,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x4c,0x69,0x67,0x68,0x74,0x4d,0x6f,0x64,0x65,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x6d,0x6f,0x64,0x65,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x50,0x48,0x4f,0x4e,0x47,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x23,0x52,0x4f,0x54,0x41,0x54,0x45,0x5f,0x53,0x50,0x48,0x45,0x52,0x49,0x43,0x41,0x4c,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x46,0x45,0x45,0x44,0x42,0x41,0x43,0x4b,0x2b,0x32,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x1d,0x72,0x6f,0x74,0x61,0x74,0x65,0x53,0x70,0x68,0x65,0x72,0x69,0x63,0x61,0x6c,0x46,0x65,0x65,0x64,0x62,0x61,0x63,0x6b,0x41,0x63,0x74,0x69,0x76,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xd,0x72,0x65,0x6e,0x64,0x65,0x72,0x43,0x61,0x63,0x68,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x4f,0x4e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x0,0x0,0x0,0x9,0x50,0x69,0x63,0x6b,0x53,0x74,0x79,0x6c,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x73,0x74,0x79,0x6c,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x55,0x4e,0x50,0x49,0x43,0x4b,0x41,0x42,0x4c,0x45,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x4d,0x61,0x74,0x65,0x72,0x69,0x61,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0xc,0x64,0x69,0x66,0x66,0x75,0x73,0x65,0x43,0x6f,0x6c,0x6f,0x72,0x0,0x0,0x0,0x1,0x3e,0xb8,0x51,0xec,0x3d,0x4c,0xcc,0xcd,0x3e,0xe1,0x47,0xae,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xd,0x65,0x6d,0x69,0x73,0x73,0x69,0x76,0x65,0x43,0x6f,0x6c,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x3e,0xb8,0x51,0xec,0x3d,0x4c,0xcc,0xcd,0x3e,0xe1,0x47,0xae,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x9,0x44,0x72,0x61,0x77,0x53,0x74,0x79,0x6c,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x9,0x6c,0x69,0x6e,0x65,0x57,0x69,0x64,0x74,0x68,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x4c,0x69,0x67,0x68,0x74,0x4d,0x6f,0x64,0x65,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x6d,0x6f,0x64,0x65,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x50,0x48,0x4f,0x4e,0x47,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x23,0x52,0x4f,0x54,0x41,0x54,0x45,0x5f,0x53,0x50,0x48,0x45,0x52,0x49,0x43,0x41,0x4c,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x46,0x45,0x45,0x44,0x42,0x41,0x43,0x4b,0x2b,0x32,0x0
		  };
};    


//#endif  /* _SO_ROTATE_SPHERICAL_DRAGGER_ */
