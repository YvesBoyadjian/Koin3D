/*
 *
 *  Copyright (C) 2000 Silicon Graphics, Inc.  All Rights Reserved. 
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  Further, this software is distributed without any warranty that it is
 *  free of the rightful claim of any third person regarding infringement
 *  or the like.  Any license provided herein, whether implied or
 *  otherwise, applies only to this software file.  Patent licenses, if
 *  any, provided herein do not apply to combinations of this program with
 *  other software, or any other product whatsoever.
 * 
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 *  Contact information: Silicon Graphics, Inc., 1600 Amphitheatre Pkwy,
 *  Mountain View, CA  94043, or:
 * 
 *  http://www.sgi.com 
 * 
 *  For further information regarding this notice, see: 
 * 
 *  http://oss.sgi.com/projects/GenInfo/NoticeExplan/
 *
 */


/*
 * Copyright (C) 1990,91,92   Silicon Graphics, Inc.
 *
 _______________________________________________________________________
 ______________  S I L I C O N   G R A P H I C S   I N C .  ____________
 |
 |   $Revision: 1.1.1.1 $
 |
 |   Description:
 |      This file defines the uniform scale dragger class.
 |      This is a simple dragger that allows an object to
 |      be scaled uniformly based on some given scaleCenter, and
 |      a line from that scaleCenter to the point on the object that was
 |      picked.
 |
 |      The mouse position is projected on to the closest
 |      point on that line, and the change in distance along
 |      that line is used to determine the scale factor.
 |
 | NOTE TO DEVELOPERS:
 |     For info about the structure of SoScaleUniformDragger:
 |     [1] compile: /usr/share/src/Inventor/samples/ivNodeKitStructure
 |     [2] type:    ivNodeKitStructure SoScaleUniformDragger.
 |     [3] The program prints a diagram of the scene graph and a table with 
 |         information about each part.
 |
 |  The following parts in this dragger are created at construction time.
 |  'ResourceName' corresponds to the name of the default geometry for the
 |  part. The dragger's constructor gets the scene graph for 'ResourceName'
 |  by querying the global dictionary ( SoDB::getByName("ResourceName"); ).  
 |
 |  Resource Name:                           Part Name:
 |
 |  scaleUniformScaler                     - scaler
 |  scaleUniformScalerActive               - scalerActive
 |  scaleUniformFeedback                   - feedback
 |  scaleUniformFeedbackActive             - feedbackActive
 |
 |   Author(s): Paul Isaacs, Howard Look
 |
 ______________  S I L I C O N   G R A P H I C S   I N C .  ____________
 _______________________________________________________________________
 */

package jscenegraph.interaction.inventor.draggers;

import jscenegraph.database.inventor.SbLine;
import jscenegraph.database.inventor.SbMatrix;
import jscenegraph.database.inventor.SbRotation;
import jscenegraph.database.inventor.SbVec3f;
import jscenegraph.database.inventor.SoType;
import jscenegraph.database.inventor.fields.SoFieldData;
import jscenegraph.database.inventor.fields.SoSFNode;
import jscenegraph.database.inventor.fields.SoSFVec3f;
import jscenegraph.database.inventor.nodes.SoSeparator;
import jscenegraph.database.inventor.nodes.SoSubNode;
import jscenegraph.database.inventor.nodes.SoSwitch;
import jscenegraph.database.inventor.projectors.SbLineProjector;
import jscenegraph.database.inventor.sensors.SoFieldSensor;
import jscenegraph.database.inventor.sensors.SoSensor;
import jscenegraph.nodekits.inventor.nodekits.SoNodekitCatalog;
import jscenegraph.nodekits.inventor.nodekits.SoSubKit;

/**
 * @author Yves Boyadjian
 *
 */

////////////////////////////////////////////////////////////////////////////////
//! Object you can scale uniformly in 3D by dragging with the mouse.
/*!
\class SoScaleUniformDragger
\ingroup Draggers
SoScaleUniformDragger 
is a simple dragger that scales
uniformly in all 3 dimensions when dragged with the mouse.
The local space is determined by its
location in the scene graph.
Transformation nodes placed before it will
affect both the dragger and the plane of motion.


This node has a \b scaleFactor  field
which always reflects
its size in local space.
If you set the field, the dragger will change accordingly.
You can also connect fields of other nodes or engines from
this one to make them follow the dragger's motion.


This dragger contains four parts, <em>scaler</em>, <em>scalerActive</em>,
<em>feedback</em>, and <em>feedbackActive</em>.


Each of these is set by default from a resource described in the Dragger
Resources section of the online reference page for this class.  You can
change the parts in any instance of this dragger using
setPart().


You can make your program use different default resources for the parts
by copying the file
\b /usr/share/data/draggerDefaults/scaleUniformDragger.iv 
into your own directory, editing the file, and then
setting the environment variable \b SO_DRAGGER_DIR  to be a path to that directory.

\par File Format/Default
\par
\code
ScaleUniformDragger {
  renderCaching AUTO
  boundingBoxCaching AUTO
  renderCulling AUTO
  pickCulling AUTO
  isActive FALSE
  scaleFactor 1 1 1
}
\endcode

\par See Also
\par
SoInteractionKit, SoDragger, SoCenterballDragger, SoDirectionalLightDragger, SoDragPointDragger, SoHandleBoxDragger, SoJackDragger, SoPointLightDragger, SoRotateCylindricalDragger, SoRotateDiscDragger, SoRotateSphericalDragger, SoScale1Dragger, SoScale2Dragger, SoScale2UniformDragger, SoSpotLightDragger, SoTabBoxDragger, SoTabPlaneDragger, SoTrackballDragger, SoTransformBoxDragger, SoTransformerDragger, SoTranslate1Dragger, SoTranslate2Dragger
*/
////////////////////////////////////////////////////////////////////////////////

public class SoScaleUniformDragger extends SoDragger {
	
    //SO_KIT_HEADER(SoScaleUniformDragger);
	private final SoSubKit kitHeader = SoSubKit.SO_KIT_HEADER(SoScaleUniformDragger.class,this);
	
	public                                                                     
    static SoType       getClassTypeId()        /* Returns class type id */   
                                    { return SoSubNode.getClassTypeId(SoScaleUniformDragger.class); }                   
    public SoType      getTypeId()       /* Returns type id      */
    {
		return kitHeader == null ? super.getTypeId() : kitHeader.getClassTypeId();		    	
    }
  public                                                                  
    SoFieldData   getFieldData() {
	  return kitHeader == null ? super.getFieldData() : kitHeader.getFieldData(); 
  }
  public  static SoFieldData[] getFieldDataPtr()                              
        { return SoSubNode.getFieldDataPtr(SoScaleUniformDragger.class); }              

	
    /* Returns an SoNodekitCatalog for the node */                            
    public SoNodekitCatalog getNodekitCatalog() {
    	if(kitHeader == null) {
    		return super.getNodekitCatalog();
    	}
    	return kitHeader.getNodekitCatalog();
    }
    
    protected final SoSFNode scalerSwitch = new SoSFNode();
    protected final SoSFNode scaler = new SoSFNode();
    protected final SoSFNode scalerActive = new SoSFNode();
    protected final SoSFNode feedbackSwitch = new SoSFNode();
    protected final SoSFNode feedback = new SoSFNode();
    protected final SoSFNode feedbackActive = new SoSFNode();    

    public final SoSFVec3f scaleFactor = new SoSFVec3f();

    protected SbLineProjector lineProj; //!< projector for linear scaling
    protected SoFieldSensor fieldSensor;

      private static short[] geomBuffer;
      
      static {
      	int[] geom1 = getGeom1();
      	int length1 = geom1.length;
      	int length = length1;
      	geomBuffer = new short[length];
      	for(int i=0; i<length; i++) {
  			geomBuffer[i] = (short)geom1[i];
      	}    	
      }
      
      private static int[] getGeom1() {
      	int[] geom1 = {
      			0x23,0x49,0x6e,0x76,0x65,0x6e,0x74,0x6f,0x72,0x20,0x56,0x32,0x2e,0x31,0x20,0x62,0x69,0x6e,0x61,0x72,0x79,0x20,0x20,0xa,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x26,0x53,0x43,0x41,0x4c,0x45,0x5f,0x55,0x4e,0x49,0x46,0x4f,0x52,0x4d,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x53,0x43,0x41,0x4c,0x49,0x4e,0x47,0x5f,0x4f,0x42,0x4a,0x45,0x43,0x54,0x2b,0x30,0x0,0x0,0x0,0x0,0x0,0x5,0x47,0x72,0x6f,0x75,0x70,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x11,0x0,0x0,0x0,0xa,0x43,0x6f,0x6d,0x70,0x6c,0x65,0x78,0x69,0x74,0x79,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x3c,0x23,0xd7,0xa,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb,0x54,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x69,0x6f,0x6e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xb,0x74,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x69,0x6f,0x6e,0x0,0xbf,0x8c,0xcc,0xcd,0x3f,0x8c,0xcc,0xcd,0x3f,0x8c,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x43,0x75,0x62,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x5,0x77,0x69,0x64,0x74,0x68,0x0,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x68,0x65,0x69,0x67,0x68,0x74,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x64,0x65,0x70,0x74,0x68,0x0,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb,0x54,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x69,0x6f,0x6e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xb,0x74,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x69,0x6f,0x6e,0x0,0x40,0xc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x43,0x75,0x62,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x5,0x77,0x69,0x64,0x74,0x68,0x0,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x68,0x65,0x69,0x67,0x68,0x74,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x64,0x65,0x70,0x74,0x68,0x0,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb,0x54,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x69,0x6f,0x6e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xb,0x74,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x69,0x6f,0x6e,0x0,0x0,0x0,0x0,0x0,0xc0,0xc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x43,0x75,0x62,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x5,0x77,0x69,0x64,0x74,0x68,0x0,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x68,0x65,0x69,0x67,0x68,0x74,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x64,0x65,0x70,0x74,0x68,0x0,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb,0x54,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x69,0x6f,0x6e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xb,0x74,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x69,0x6f,0x6e,0x0,0xc0,0xc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x43,0x75,0x62,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x5,0x77,0x69,0x64,0x74,0x68,0x0,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x68,0x65,0x69,0x67,0x68,0x74,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x64,0x65,0x70,0x74,0x68,0x0,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb,0x54,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x69,0x6f,0x6e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xb,0x74,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x69,0x6f,0x6e,0x0,0x0,0x0,0x0,0x0,0x40,0xc,0xcc,0xcd,0xc0,0xc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x43,0x75,0x62,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x5,0x77,0x69,0x64,0x74,0x68,0x0,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x68,0x65,0x69,0x67,0x68,0x74,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x64,0x65,0x70,0x74,0x68,0x0,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb,0x54,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x69,0x6f,0x6e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xb,0x74,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x69,0x6f,0x6e,0x0,0x40,0xc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x43,0x75,0x62,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x5,0x77,0x69,0x64,0x74,0x68,0x0,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x68,0x65,0x69,0x67,0x68,0x74,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x64,0x65,0x70,0x74,0x68,0x0,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb,0x54,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x69,0x6f,0x6e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xb,0x74,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x69,0x6f,0x6e,0x0,0x0,0x0,0x0,0x0,0xc0,0xc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x43,0x75,0x62,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x5,0x77,0x69,0x64,0x74,0x68,0x0,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x68,0x65,0x69,0x67,0x68,0x74,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x64,0x65,0x70,0x74,0x68,0x0,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb,0x54,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x69,0x6f,0x6e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xb,0x74,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x69,0x6f,0x6e,0x0,0xc0,0xc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x43,0x75,0x62,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x5,0x77,0x69,0x64,0x74,0x68,0x0,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x68,0x65,0x69,0x67,0x68,0x74,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x64,0x65,0x70,0x74,0x68,0x0,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x12,0x73,0x63,0x61,0x6c,0x65,0x55,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x53,0x63,0x61,0x6c,0x65,0x72,0x0,0x0,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xd,0x72,0x65,0x6e,0x64,0x65,0x72,0x43,0x61,0x63,0x68,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x4f,0x4e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x0,0x0,0x0,0x8,0x4d,0x61,0x74,0x65,0x72,0x69,0x61,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0xc,0x64,0x69,0x66,0x66,0x75,0x73,0x65,0x43,0x6f,0x6c,0x6f,0x72,0x0,0x0,0x0,0x1,0x3f,0x0,0x0,0x0,0x3f,0x0,0x0,0x0,0x3f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xd,0x65,0x6d,0x69,0x73,0x73,0x69,0x76,0x65,0x43,0x6f,0x6c,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x3f,0x0,0x0,0x0,0x3f,0x0,0x0,0x0,0x3f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x9,0x44,0x72,0x61,0x77,0x53,0x74,0x79,0x6c,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x9,0x6c,0x69,0x6e,0x65,0x57,0x69,0x64,0x74,0x68,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x4c,0x69,0x67,0x68,0x74,0x4d,0x6f,0x64,0x65,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x6d,0x6f,0x64,0x65,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x50,0x48,0x4f,0x4e,0x47,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x26,0x53,0x43,0x41,0x4c,0x45,0x5f,0x55,0x4e,0x49,0x46,0x4f,0x52,0x4d,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x53,0x43,0x41,0x4c,0x49,0x4e,0x47,0x5f,0x4f,0x42,0x4a,0x45,0x43,0x54,0x2b,0x30,0x0,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x18,0x73,0x63,0x61,0x6c,0x65,0x55,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x53,0x63,0x61,0x6c,0x65,0x72,0x41,0x63,0x74,0x69,0x76,0x65,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xd,0x72,0x65,0x6e,0x64,0x65,0x72,0x43,0x61,0x63,0x68,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x4f,0x4e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x0,0x0,0x8,0x4d,0x61,0x74,0x65,0x72,0x69,0x61,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0xc,0x64,0x69,0x66,0x66,0x75,0x73,0x65,0x43,0x6f,0x6c,0x6f,0x72,0x0,0x0,0x0,0x1,0x3f,0x0,0x0,0x0,0x3f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xd,0x65,0x6d,0x69,0x73,0x73,0x69,0x76,0x65,0x43,0x6f,0x6c,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x3f,0x0,0x0,0x0,0x3f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x4c,0x69,0x67,0x68,0x74,0x4d,0x6f,0x64,0x65,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x6d,0x6f,0x64,0x65,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x50,0x48,0x4f,0x4e,0x47,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x43,0x6f,0x6d,0x70,0x6c,0x65,0x78,0x69,0x74,0x79,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x3c,0x23,0xd7,0xa,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x9,0x44,0x72,0x61,0x77,0x53,0x74,0x79,0x6c,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x5,0x73,0x74,0x79,0x6c,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x4c,0x49,0x4e,0x45,0x53,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x9,0x6c,0x69,0x6e,0x65,0x57,0x69,0x64,0x74,0x68,0x0,0x0,0x0,0x3f,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x43,0x75,0x62,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x5,0x77,0x69,0x64,0x74,0x68,0x0,0x0,0x0,0x40,0xc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x68,0x65,0x69,0x67,0x68,0x74,0x0,0x0,0x40,0xc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x64,0x65,0x70,0x74,0x68,0x0,0x0,0x0,0x40,0xc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x9,0x44,0x72,0x61,0x77,0x53,0x74,0x79,0x6c,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x26,0x53,0x43,0x41,0x4c,0x45,0x5f,0x55,0x4e,0x49,0x46,0x4f,0x52,0x4d,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x53,0x43,0x41,0x4c,0x49,0x4e,0x47,0x5f,0x4f,0x42,0x4a,0x45,0x43,0x54,0x2b,0x30,0x0,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x20,0x53,0x43,0x41,0x4c,0x45,0x5f,0x55,0x4e,0x49,0x46,0x4f,0x52,0x4d,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x46,0x45,0x45,0x44,0x42,0x41,0x43,0x4b,0x2b,0x31,0x0,0x0,0x0,0x5,0x47,0x72,0x6f,0x75,0x70,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x0,0x0,0xd,0x4e,0x6f,0x72,0x6d,0x61,0x6c,0x42,0x69,0x6e,0x64,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x12,0x50,0x45,0x52,0x5f,0x56,0x45,0x52,0x54,0x45,0x58,0x5f,0x49,0x4e,0x44,0x45,0x58,0x45,0x44,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf,0x4d,0x61,0x74,0x65,0x72,0x69,0x61,0x6c,0x42,0x69,0x6e,0x64,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x4f,0x56,0x45,0x52,0x41,0x4c,0x4c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb,0x43,0x6f,0x6f,0x72,0x64,0x69,0x6e,0x61,0x74,0x65,0x33,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x70,0x6f,0x69,0x6e,0x74,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0xbf,0xa0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3f,0xa0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x4c,0x69,0x6e,0x65,0x53,0x65,0x74,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb,0x43,0x6f,0x6f,0x72,0x64,0x69,0x6e,0x61,0x74,0x65,0x33,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x70,0x6f,0x69,0x6e,0x74,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0xbf,0xa0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3f,0xa0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x4c,0x69,0x6e,0x65,0x53,0x65,0x74,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb,0x43,0x6f,0x6f,0x72,0x64,0x69,0x6e,0x61,0x74,0x65,0x33,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x70,0x6f,0x69,0x6e,0x74,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xbf,0xa0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3f,0xa0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x4c,0x69,0x6e,0x65,0x53,0x65,0x74,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x14,0x73,0x63,0x61,0x6c,0x65,0x55,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x46,0x65,0x65,0x64,0x62,0x61,0x63,0x6b,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xd,0x72,0x65,0x6e,0x64,0x65,0x72,0x43,0x61,0x63,0x68,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x4f,0x4e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x0,0x0,0x0,0x9,0x50,0x69,0x63,0x6b,0x53,0x74,0x79,0x6c,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x73,0x74,0x79,0x6c,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x55,0x4e,0x50,0x49,0x43,0x4b,0x41,0x42,0x4c,0x45,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x4d,0x61,0x74,0x65,0x72,0x69,0x61,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0xc,0x64,0x69,0x66,0x66,0x75,0x73,0x65,0x43,0x6f,0x6c,0x6f,0x72,0x0,0x0,0x0,0x1,0x3e,0x80,0x0,0x0,0x3d,0x4c,0xcc,0xcd,0x3e,0xb8,0x51,0xec,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xd,0x65,0x6d,0x69,0x73,0x73,0x69,0x76,0x65,0x43,0x6f,0x6c,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x3e,0x80,0x0,0x0,0x3d,0x4c,0xcc,0xcd,0x3e,0xb8,0x51,0xec,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x9,0x44,0x72,0x61,0x77,0x53,0x74,0x79,0x6c,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x9,0x6c,0x69,0x6e,0x65,0x57,0x69,0x64,0x74,0x68,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x4c,0x69,0x67,0x68,0x74,0x4d,0x6f,0x64,0x65,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x6d,0x6f,0x64,0x65,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x50,0x48,0x4f,0x4e,0x47,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x20,0x53,0x43,0x41,0x4c,0x45,0x5f,0x55,0x4e,0x49,0x46,0x4f,0x52,0x4d,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x46,0x45,0x45,0x44,0x42,0x41,0x43,0x4b,0x2b,0x31,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x1a,0x73,0x63,0x61,0x6c,0x65,0x55,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x46,0x65,0x65,0x64,0x62,0x61,0x63,0x6b,0x41,0x63,0x74,0x69,0x76,0x65,0x0,0x0,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xd,0x72,0x65,0x6e,0x64,0x65,0x72,0x43,0x61,0x63,0x68,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x4f,0x4e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x0,0x0,0x0,0x9,0x50,0x69,0x63,0x6b,0x53,0x74,0x79,0x6c,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x73,0x74,0x79,0x6c,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x55,0x4e,0x50,0x49,0x43,0x4b,0x41,0x42,0x4c,0x45,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x4d,0x61,0x74,0x65,0x72,0x69,0x61,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0xc,0x64,0x69,0x66,0x66,0x75,0x73,0x65,0x43,0x6f,0x6c,0x6f,0x72,0x0,0x0,0x0,0x1,0x3e,0xb8,0x51,0xec,0x3d,0x4c,0xcc,0xcd,0x3e,0xe1,0x47,0xae,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xd,0x65,0x6d,0x69,0x73,0x73,0x69,0x76,0x65,0x43,0x6f,0x6c,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x3e,0xb8,0x51,0xec,0x3d,0x4c,0xcc,0xcd,0x3e,0xe1,0x47,0xae,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x9,0x44,0x72,0x61,0x77,0x53,0x74,0x79,0x6c,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x9,0x6c,0x69,0x6e,0x65,0x57,0x69,0x64,0x74,0x68,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x4c,0x69,0x67,0x68,0x74,0x4d,0x6f,0x64,0x65,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x6d,0x6f,0x64,0x65,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x50,0x48,0x4f,0x4e,0x47,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x20,0x53,0x43,0x41,0x4c,0x45,0x5f,0x55,0x4e,0x49,0x46,0x4f,0x52,0x4d,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x46,0x45,0x45,0x44,0x42,0x41,0x43,0x4b,0x2b,0x31
    	};
    	return geom1;
    }
      
    
////////////////////////////////////////////////////////////////////////
//
// Description:
//    Constructor
//
public SoScaleUniformDragger()
//
////////////////////////////////////////////////////////////////////////
{
    kitHeader.SO_KIT_CONSTRUCTOR(SoScaleUniformDragger.class);

    isBuiltIn = true;

    // Put this stuff under the geomSeparator so it will draw more
    // efficiently.
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(scalerSwitch,"scalerSwitch", SoSwitch.class, true,
                                "geomSeparator","",false);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(scaler,"scaler", SoSeparator.class, true,
                                "scalerSwitch","",true);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(scalerActive,"scalerActive", SoSeparator.class, true,
                                "scalerSwitch","",true);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(feedbackSwitch,"feedbackSwitch", SoSwitch.class, true,
                                "geomSeparator","",false);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(feedback,"feedback", SoSeparator.class, true,
                                "feedbackSwitch","",true);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(feedbackActive,"feedbackActive", SoSeparator.class, true,
                                "feedbackSwitch","",true);

    // read geometry for shared parts
    if (kitHeader.SO_KIT_IS_FIRST_INSTANCE())
        readDefaultParts("scaleUniformDragger.iv", geomBuffer, geomBuffer.length );

    kitHeader.SO_KIT_ADD_FIELD(scaleFactor,"scaleFactor", new SbVec3f(1.0f, 1.0f, 1.0f));

    SO_KIT_INIT_INSTANCE();

    // create the parts...
    setPartAsDefault("scaler",         "scaleUniformScaler");
    setPartAsDefault("scalerActive",   "scaleUniformScalerActive");
    setPartAsDefault("feedback",       "scaleUniformFeedback");
    setPartAsDefault("feedbackActive", "scaleUniformFeedbackActive");

    // Set the switches to 0...
    setSwitchValue( scalerSwitch.getValue(), 0 );
    setSwitchValue( feedbackSwitch.getValue(), 0 );

    // Create the line projector
    lineProj = new SbLineProjector();

    // add the callbacks to perform the dragging
    addStartCallback(  SoScaleUniformDragger::startCB );
    addMotionCallback( SoScaleUniformDragger::motionCB );
    addFinishCallback(   SoScaleUniformDragger::finishCB );

    // Updates the scaleFactor field when the motionMatrix is set.
    addValueChangedCallback( SoScaleUniformDragger::valueChangedCB );

    // Updates the motionMatrix when the scaleFactor field is set.
    fieldSensor = new SoFieldSensor( SoScaleUniformDragger::fieldSensorCB, this);
    fieldSensor.setPriority( 0 );

    setUpConnections( true, true );
}

////////////////////////////////////////////////////////////////////////
//
// Description:
//    Destructor
//
public void destructor()
//
////////////////////////////////////////////////////////////////////////
{
    lineProj.destructor();
    if (fieldSensor != null)
        fieldSensor.destructor();
    super.destructor();
}

//    detach/attach any sensors, callbacks, and/or field connections.
//    Called by:            start/end of SoBaseKit::readInstance
//    and on new copy by:   start/end of SoBaseKit::copy.
//    Classes that redefine must call setUpConnections(true,true) 
//    at end of constructor.
//    Returns the state of the node when this was called.
public boolean
setUpConnections( boolean onOff, boolean doItAlways )
{
	if(kitHeader ==null) { //java port
		return super.setUpConnections(onOff, doItAlways);
	}
	
    if ( !doItAlways && connectionsSetUp == onOff)
        return onOff;

    if ( onOff ) {

        // We connect AFTER base class.
        super.setUpConnections( onOff, false );

        // Call the sensor CBs to make things are up-to-date.
        fieldSensorCB( this, null );

        // Connect the field sensors
        if (fieldSensor.getAttachedField() != scaleFactor)
            fieldSensor.attach( scaleFactor );
    }
    else {

        // We disconnect BEFORE base class.

        // Disconnect the field sensors.
        if (fieldSensor.getAttachedField() != null)
            fieldSensor.detach();

        super.setUpConnections( onOff, false );
    }

    return !(connectionsSetUp = onOff);
}

////////////////////////////////////////////////////////////////////////
//
// Description:
//    Set up the highlighting, projector, and the initial hit on
//    the dragger
//
// Use: private
//
private void
dragStart()
//
////////////////////////////////////////////////////////////////////////
{
    // Set the switches to 1...
    setSwitchValue( scalerSwitch.getValue(), 1 );
    setSwitchValue( feedbackSwitch.getValue(), 1 );

    // Establish the projector line in working space.
    // Working space is space at end of motion matrix.
    // Scaling line connects the origin to the startHitPt
        final SbVec3f startLocalHitPt = new SbVec3f(getLocalStartingPoint());
        lineProj.setLine( new SbLine( new SbVec3f(0,0,0), startLocalHitPt ) );
}

////////////////////////////////////////////////////////////////////////
//
// Description:
//    Stretch the dragger according to the motion along the line
//    projector
//
// Use: private
//
private void
drag()
//
////////////////////////////////////////////////////////////////////////
{
    // Set up the projector space and view.
    // Working space is space at end of motion matrix.
        lineProj.setViewVolume( getViewVolume() );    
        lineProj.setWorkingSpace( getLocalToWorldMatrix() );

    // Get newHitPt and startHitPt in workspace.
        final SbVec3f newHitPt = new SbVec3f(lineProj.project( getNormalizedLocaterPosition())); 
        final SbVec3f startHitPt = new SbVec3f(getLocalStartingPoint());

    // [1] Find the distance from the old and new projected points to origin.
    float oldDist = startHitPt.length();
    float newDist = newHitPt.length();

    // [2] Check if we've flipped to the other side of the origin. 
    if ( startHitPt.dot( newHitPt ) < 0.0 )
        newDist *= -1.0;

    // [3] Change in scale is the ratio of newDist to oldDist
final float TINY =0.0001f;
    float delta = ( Math.abs(oldDist) < TINY || Math.abs(newDist) < TINY) 
                    ? 1.0f : newDist / oldDist;
//#undef TINY

    // Constrain the scaling to be greater than getMinScale().
        if (delta < getMinScale() )
            delta = getMinScale();

    // Set the scaling (to be done relative to scale in startMotionMatrix).
        final SbVec3f scl = new SbVec3f( delta, delta, delta );

    // Append this to the startMotionMatrix, which we saved at the beginning
    // of the drag, to find the current motion matrix.
        setMotionMatrix( appendScale( getStartMotionMatrix(), scl, new SbVec3f(0,0,0)));
}

////////////////////////////////////////////////////////////////////////
//
// Description:
//
// Use: private
//
private void
dragFinish()
//
////////////////////////////////////////////////////////////////////////
{
    // Set the switches to 0...
    setSwitchValue( scalerSwitch.getValue(), 0 );
    setSwitchValue( feedbackSwitch.getValue(), 0 );
}    

////////////////////////////////////////////////////////////////////
//  Stubs for callbacks
////////////////////////////////////////////////////////////////////
public static void
startCB( Object object, SoDragger inDragger )
{
    SoScaleUniformDragger m = (SoScaleUniformDragger ) inDragger;
    m.dragStart();
}

public static void
motionCB( Object object, SoDragger inDragger )
{
    SoScaleUniformDragger m = (SoScaleUniformDragger ) inDragger;
    m.drag();
}

public static void
finishCB( Object object, SoDragger inDragger )
{
    SoScaleUniformDragger m = (SoScaleUniformDragger ) inDragger;
    m.dragFinish();
}

public static void
valueChangedCB( Object object, SoDragger inDragger )
{
    SoScaleUniformDragger m = (SoScaleUniformDragger ) inDragger;
    final SbMatrix motMat = new SbMatrix(m.getMotionMatrix());

    final SbVec3f    trans = new SbVec3f(), scale = new SbVec3f();
    final SbRotation rot = new SbRotation(), scaleOrient = new SbRotation();
    getTransformFast( motMat, trans, rot, scale, scaleOrient );

    // Disconnect the field sensor
    m.fieldSensor.detach();

    if ( m.scaleFactor.getValue().operator_not_equal( scale) )
        m.scaleFactor.setValue( scale);

    // Reconnect the field sensor
    m.fieldSensor.attach( (m.scaleFactor) );
}

public static void
fieldSensorCB( Object inDragger, SoSensor sensor )
{
    SoScaleUniformDragger dragger = (SoScaleUniformDragger ) inDragger;

    // Incorporate the new field value into the matrix...
    final SbMatrix motMat = new SbMatrix(dragger.getMotionMatrix());
    dragger.workFieldsIntoTransform( motMat );

    dragger.setMotionMatrix( motMat );
}
    
    

////////////////////////////////////////////////////////////////////////
//
// Description:
//    Initialize the dragger
//
// Use: public, internal
//
public static void
initClass()
//
////////////////////////////////////////////////////////////////////////
{
    SO__KIT_INIT_CLASS(SoScaleUniformDragger.class, "ScaleUniformDragger", SoDragger.class);
}

}
