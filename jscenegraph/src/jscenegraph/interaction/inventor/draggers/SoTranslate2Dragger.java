/*
 *
 *  Copyright (C) 2000 Silicon Graphics, Inc.  All Rights Reserved. 
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  Further, this software is distributed without any warranty that it is
 *  free of the rightful claim of any third person regarding infringement
 *  or the like.  Any license provided herein, whether implied or
 *  otherwise, applies only to this software file.  Patent licenses, if
 *  any, provided herein do not apply to combinations of this program with
 *  other software, or any other product whatsoever.
 * 
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 *  Contact information: Silicon Graphics, Inc., 1600 Amphitheatre Pkwy,
 *  Mountain View, CA  94043, or:
 * 
 *  http://www.sgi.com 
 * 
 *  For further information regarding this notice, see: 
 * 
 *  http://oss.sgi.com/projects/GenInfo/NoticeExplan/
 *
 */


/*
 * Copyright (C) 1990,91,92   Silicon Graphics, Inc.
 *
 _______________________________________________________________________
 ______________  S I L I C O N   G R A P H I C S   I N C .  ____________
 |
 |   $Revision: 1.1.1.1 $
 |
 |   Description:
 |      This file defines the two dimensional translate dragger class.
 |      This is a simple dragger that allows an object to
 |      be translated within a plane. (defined by the plane normal (default
 |      normal is (0,0,1) and by the point initially hit by the user).
 |
 |      If the user presses the SHIFT key while dragging, the motion will
 |      constrain to linear motion along one of the two main axes of motion.
 |      The axis selected will be the primary axis followed by the user's
 |      dragging gesture.
 |
 |      The amount moved in the plane determines the translation.
 |
 | NOTE TO DEVELOPERS:
 |     For info about the structure of SoTranslate2Dragger:
 |     [1] compile: /usr/share/src/Inventor/samples/ivNodeKitStructure
 |     [2] type:    ivNodeKitStructure SoTranslate2Dragger.
 |     [3] The program prints a diagram of the scene graph and a table with 
 |         information about each part.
 |
 |  The following parts in this dragger are created at construction time.
 |  'ResourceName' corresponds to the name of the default geometry for the
 |  part. The dragger's constructor gets the scene graph for 'ResourceName'
 |  by querying the global dictionary ( SoDB::getByName("ResourceName"); ).  
 |
 |  Resource Name:                           Part Name:
 |
 |  translate2Translator                   - translator
 |  translate2TranslatorActive             - translatorActive
 |  translate2Feedback                     - feedback
 |  translate2FeedbackActive               - feedbackActive
 |
 |  NOTE: These are only shown if dragger 
 |        is moving and the axis is a 
 |        permissable direction of motion.
 |        When pressing <shift>, motion is
 |        constrained, and only 1 is displayed.
 |  translate2XAxisFeedback                - xAxisFeedback
 |  translate2YAxisFeedback                - yAxisFeedback
 |
 |   Author(s): Paul Isaacs, Howard Look
 |
 ______________  S I L I C O N   G R A P H I C S   I N C .  ____________
 _______________________________________________________________________
 */

package jscenegraph.interaction.inventor.draggers;

import jscenegraph.database.inventor.SbMatrix;
import jscenegraph.database.inventor.SbPlane;
import jscenegraph.database.inventor.SbRotation;
import jscenegraph.database.inventor.SbVec3f;
import jscenegraph.database.inventor.SoType;
import jscenegraph.database.inventor.actions.SoHandleEventAction;
import jscenegraph.database.inventor.events.SoEvent;
import jscenegraph.database.inventor.events.SoKeyboardEvent;
import jscenegraph.database.inventor.fields.SoFieldData;
import jscenegraph.database.inventor.fields.SoSFNode;
import jscenegraph.database.inventor.fields.SoSFVec3f;
import jscenegraph.database.inventor.nodes.SoSeparator;
import jscenegraph.database.inventor.nodes.SoSubNode;
import jscenegraph.database.inventor.nodes.SoSwitch;
import jscenegraph.database.inventor.projectors.SbPlaneProjector;
import jscenegraph.database.inventor.sensors.SoFieldSensor;
import jscenegraph.database.inventor.sensors.SoSensor;
import jscenegraph.nodekits.inventor.nodekits.SoNodekitCatalog;
import jscenegraph.nodekits.inventor.nodekits.SoSubKit;

/**
 * 
 * @author Yves Boyadjian
 *
 */

////////////////////////////////////////////////////////////////////////////////
//! Object you can translate within a plane by dragging with the mouse.
/*!
\class SoTranslate2Dragger
\ingroup Draggers
SoTranslate2Dragger 
is a simple dragger that translates
in two dimensions when dragged with the mouse.
It moves within the x-y plane of its local space, determined by its
location in the scene graph.
Transformation nodes placed before it will
affect both the dragger and the direction of motion.


Pressing the <tt>&lt;Shift&gt;</tt> key allows you to constrain motion to either the
x axis or the y axis.  The direction is determined by your initial
mouse gesture after pressing the key.  Releasing the key removes the constraint.


This node has a \b translation  field
which always reflects
its position in local space.
If you set the field, the dragger will move accordingly.
You can also connect fields of other nodes or engines from
this one
to make them follow the dragger's motion.


This dragger contains six parts, <em>translator</em>, <em>translatorActive</em>,
<em>feedback</em>, <em>feedbackActive</em>, <em>xAxisFeedback</em>, and <em>yAxisFeedback</em>.
The last two parts are only displayed during motion, and only when their 
direction of motion is enabled.  (Pressing the <tt>&lt;Shift&gt;</tt> key and then 
dragging disables one of the two directions.)


Each of these is set by default from
a resource described in the <tt>Dragger Resources</tt> section of the online
reference page for this class.  You
can change the parts in any instance of this dragger using
setPart().


You can make your program use different default resources for the parts
by copying the file
\b /usr/share/data/draggerDefaults/translate2Dragger.iv 
into your own directory, editing the file, and then
setting the environment variable \b SO_DRAGGER_DIR  to be a path to that directory.

\par File Format/Default
\par
\code
Translate2Dragger {
  renderCaching AUTO
  boundingBoxCaching AUTO
  renderCulling AUTO
  pickCulling AUTO
  isActive false
  translation 0 0 0
}
\endcode

\par See Also
\par
SoInteractionKit, SoDragger, SoCenterballDragger, SoDirectionalLightDragger, SoDragPointDragger, SoHandleBoxDragger, SoJackDragger, SoPointLightDragger, SoRotateCylindricalDragger, SoRotateDiscDragger, SoRotateSphericalDragger, SoScale1Dragger, SoScale2Dragger, SoScale2UniformDragger, SoScaleUniformDragger, SoSpotLightDragger, SoTabBoxDragger, SoTabPlaneDragger, SoTrackballDragger, SoTransformBoxDragger, SoTransformerDragger, SoTranslate1Dragger
*/
////////////////////////////////////////////////////////////////////////////////

public class SoTranslate2Dragger extends SoDragger {

	private final SoSubKit kitHeader = SoSubKit.SO_KIT_HEADER(SoTranslate2Dragger.class,this);	
	
	public                                                                     
    static SoType       getClassTypeId()        /* Returns class type id */   
                                    { return SoSubNode.getClassTypeId(SoTranslate2Dragger.class); }                   
    public SoType      getTypeId()       /* Returns type id      */
    {
		return kitHeader == null ? super.getTypeId() : kitHeader.getClassTypeId();		    	
    }
  public                                                                  
    SoFieldData   getFieldData() {
	  return kitHeader == null ? super.getFieldData() : kitHeader.getFieldData(); 
  }
  public  static SoFieldData[] getFieldDataPtr()                              
        { return SoSubNode.getFieldDataPtr(SoTranslate2Dragger.class); }              


    /* Returns an SoNodekitCatalog for the node */                            
    public SoNodekitCatalog getNodekitCatalog() {
    	if(kitHeader == null) {
    		return super.getNodekitCatalog();
    	}
    	return kitHeader.getNodekitCatalog();
    }
    
    protected final SoSFNode translatorSwitch = new SoSFNode();
    protected final SoSFNode translator = new SoSFNode();
    protected final SoSFNode translatorActive = new SoSFNode();
    protected final SoSFNode feedbackSwitch = new SoSFNode();
    protected final SoSFNode feedback = new SoSFNode();
    protected final SoSFNode feedbackActive = new SoSFNode();
    protected final SoSFNode axisFeedbackSwitch = new SoSFNode();
    protected final SoSFNode xAxisFeedback = new SoSFNode();
    protected final SoSFNode yAxisFeedback = new SoSFNode();    

	public final SoSFVec3f translation = new SoSFVec3f();
	
    protected final SbVec3f         worldRestartPt = new SbVec3f(); //!< used if SHIFT key goes down to 
                                    //! initiate a new gesture.
    protected SbPlaneProjector planeProj; //!< projector for planar translation

    protected SoFieldSensor fieldSensor;
	
    private int     translateDir;   //!< Used for 1-D translation,
    private boolean    shftDown;  //!< used to keep track of shift modifier key

    private static final short[] geomBuffer;
    
    static {
    	int[] geom1 = getGeom1();
    	int length1 = geom1.length;
    	int length = length1;
    	geomBuffer = new short[length];
    	for(int i=0; i<length; i++) {
  			geomBuffer[i] = (short)geom1[i];
    	}    	
    }
    
    private static int[] getGeom1() {
    	int[] geom1 = {
0x23,0x49,0x6e,0x76,0x65,0x6e,0x74,0x6f,0x72,0x20,0x56,0x32,0x2e,0x31,0x20,0x62,0x69,0x6e,0x61,0x72,0x79,0x20,0x20,0xa,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x9,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x1d,0x54,0x52,0x41,0x4e,0x53,0x4c,0x41,0x54,0x45,0x5f,0x32,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x58,0x5f,0x41,0x52,0x52,0x4f,0x57,0x2b,0x30,0x0,0x0,0x0,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x9,0x0,0x0,0x0,0x5,0x53,0x63,0x61,0x6c,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xb,0x73,0x63,0x61,0x6c,0x65,0x46,0x61,0x63,0x74,0x6f,0x72,0x0,0x3f,0x8c,0xcc,0xcd,0x3f,0x8c,0xcc,0xcd,0x3f,0x8c,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x43,0x6f,0x6d,0x70,0x6c,0x65,0x78,0x69,0x74,0x79,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x3c,0x23,0xd7,0xa,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x43,0x75,0x62,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x5,0x77,0x69,0x64,0x74,0x68,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x68,0x65,0x69,0x67,0x68,0x74,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x64,0x65,0x70,0x74,0x68,0x0,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x43,0x6f,0x6d,0x70,0x6c,0x65,0x78,0x69,0x74,0x79,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x3e,0x99,0x99,0x9a,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0xb,0x54,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x69,0x6f,0x6e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xb,0x74,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x69,0x6f,0x6e,0x0,0xbf,0xa0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb,0x52,0x6f,0x74,0x61,0x74,0x69,0x6f,0x6e,0x58,0x59,0x5a,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x4,0x61,0x78,0x69,0x73,0x0,0x0,0x0,0x1,0x5a,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x61,0x6e,0x67,0x6c,0x65,0x0,0x0,0x0,0x3f,0xc9,0xf,0xa6,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x43,0x6f,0x6e,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0xc,0x62,0x6f,0x74,0x74,0x6f,0x6d,0x52,0x61,0x64,0x69,0x75,0x73,0x3e,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x68,0x65,0x69,0x67,0x68,0x74,0x0,0x0,0x3f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0xb,0x54,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x69,0x6f,0x6e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xb,0x74,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x69,0x6f,0x6e,0x0,0x3f,0xa0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb,0x52,0x6f,0x74,0x61,0x74,0x69,0x6f,0x6e,0x58,0x59,0x5a,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x4,0x61,0x78,0x69,0x73,0x0,0x0,0x0,0x1,0x5a,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x61,0x6e,0x67,0x6c,0x65,0x0,0x0,0x0,0xbf,0xc9,0xf,0xa6,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x43,0x6f,0x6e,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0xc,0x62,0x6f,0x74,0x74,0x6f,0x6d,0x52,0x61,0x64,0x69,0x75,0x73,0x3e,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x68,0x65,0x69,0x67,0x68,0x74,0x0,0x0,0x3f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x9,0x44,0x72,0x61,0x77,0x53,0x74,0x79,0x6c,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x73,0x74,0x79,0x6c,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x9,0x49,0x4e,0x56,0x49,0x53,0x49,0x42,0x4c,0x45,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x43,0x6f,0x6d,0x70,0x6c,0x65,0x78,0x69,0x74,0x79,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x3c,0x23,0xd7,0xa,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x43,0x75,0x62,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x5,0x77,0x69,0x64,0x74,0x68,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x68,0x65,0x69,0x67,0x68,0x74,0x0,0x0,0x3f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x64,0x65,0x70,0x74,0x68,0x0,0x0,0x0,0x3f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x1d,0x54,0x52,0x41,0x4e,0x53,0x4c,0x41,0x54,0x45,0x5f,0x32,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x59,0x5f,0x41,0x52,0x52,0x4f,0x57,0x2b,0x31,0x0,0x0,0x0,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x9,0x0,0x0,0x0,0x5,0x53,0x63,0x61,0x6c,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xb,0x73,0x63,0x61,0x6c,0x65,0x46,0x61,0x63,0x74,0x6f,0x72,0x0,0x3f,0x8c,0xcc,0xcd,0x3f,0x8c,0xcc,0xcd,0x3f,0x8c,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x43,0x6f,0x6d,0x70,0x6c,0x65,0x78,0x69,0x74,0x79,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x3c,0x23,0xd7,0xa,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x43,0x75,0x62,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x5,0x77,0x69,0x64,0x74,0x68,0x0,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x68,0x65,0x69,0x67,0x68,0x74,0x0,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x64,0x65,0x70,0x74,0x68,0x0,0x0,0x0,0x3d,0xcc,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x43,0x6f,0x6d,0x70,0x6c,0x65,0x78,0x69,0x74,0x79,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x3e,0x99,0x99,0x9a,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0xb,0x54,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x69,0x6f,0x6e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xb,0x74,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x69,0x6f,0x6e,0x0,0x0,0x0,0x0,0x0,0x3f,0xa0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x43,0x6f,0x6e,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0xc,0x62,0x6f,0x74,0x74,0x6f,0x6d,0x52,0x61,0x64,0x69,0x75,0x73,0x3e,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x68,0x65,0x69,0x67,0x68,0x74,0x0,0x0,0x3f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0xb,0x54,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x69,0x6f,0x6e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xb,0x74,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x69,0x6f,0x6e,0x0,0x0,0x0,0x0,0x0,0xbf,0xa0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb,0x52,0x6f,0x74,0x61,0x74,0x69,0x6f,0x6e,0x58,0x59,0x5a,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x4,0x61,0x78,0x69,0x73,0x0,0x0,0x0,0x1,0x5a,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x61,0x6e,0x67,0x6c,0x65,0x0,0x0,0x0,0x40,0x49,0xf,0xd0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x43,0x6f,0x6e,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0xc,0x62,0x6f,0x74,0x74,0x6f,0x6d,0x52,0x61,0x64,0x69,0x75,0x73,0x3e,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x68,0x65,0x69,0x67,0x68,0x74,0x0,0x0,0x3f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x9,0x44,0x72,0x61,0x77,0x53,0x74,0x79,0x6c,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x73,0x74,0x79,0x6c,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x9,0x49,0x4e,0x56,0x49,0x53,0x49,0x42,0x4c,0x45,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x43,0x6f,0x6d,0x70,0x6c,0x65,0x78,0x69,0x74,0x79,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x3c,0x23,0xd7,0xa,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x43,0x75,0x62,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x5,0x77,0x69,0x64,0x74,0x68,0x0,0x0,0x0,0x3f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x68,0x65,0x69,0x67,0x68,0x74,0x0,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x64,0x65,0x70,0x74,0x68,0x0,0x0,0x0,0x3f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x14,0x74,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x65,0x32,0x54,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x0,0x0,0x0,0x8,0x4d,0x61,0x74,0x65,0x72,0x69,0x61,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0xc,0x64,0x69,0x66,0x66,0x75,0x73,0x65,0x43,0x6f,0x6c,0x6f,0x72,0x0,0x0,0x0,0x1,0x3f,0x0,0x0,0x0,0x3f,0x0,0x0,0x0,0x3f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xd,0x65,0x6d,0x69,0x73,0x73,0x69,0x76,0x65,0x43,0x6f,0x6c,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x3f,0x0,0x0,0x0,0x3f,0x0,0x0,0x0,0x3f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x9,0x44,0x72,0x61,0x77,0x53,0x74,0x79,0x6c,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x9,0x6c,0x69,0x6e,0x65,0x57,0x69,0x64,0x74,0x68,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x4c,0x69,0x67,0x68,0x74,0x4d,0x6f,0x64,0x65,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x6d,0x6f,0x64,0x65,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x50,0x48,0x4f,0x4e,0x47,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x43,0x6f,0x6d,0x70,0x6c,0x65,0x78,0x69,0x74,0x79,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x3e,0x4c,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x1d,0x54,0x52,0x41,0x4e,0x53,0x4c,0x41,0x54,0x45,0x5f,0x32,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x58,0x5f,0x41,0x52,0x52,0x4f,0x57,0x2b,0x30,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x1d,0x54,0x52,0x41,0x4e,0x53,0x4c,0x41,0x54,0x45,0x5f,0x32,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x59,0x5f,0x41,0x52,0x52,0x4f,0x57,0x2b,0x31,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x1a,0x74,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x65,0x32,0x54,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x6f,0x72,0x41,0x63,0x74,0x69,0x76,0x65,0x0,0x0,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x0,0x0,0x0,0x8,0x4d,0x61,0x74,0x65,0x72,0x69,0x61,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0xc,0x64,0x69,0x66,0x66,0x75,0x73,0x65,0x43,0x6f,0x6c,0x6f,0x72,0x0,0x0,0x0,0x1,0x3f,0x0,0x0,0x0,0x3f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xd,0x65,0x6d,0x69,0x73,0x73,0x69,0x76,0x65,0x43,0x6f,0x6c,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x3f,0x0,0x0,0x0,0x3f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x9,0x44,0x72,0x61,0x77,0x53,0x74,0x79,0x6c,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x9,0x6c,0x69,0x6e,0x65,0x57,0x69,0x64,0x74,0x68,0x0,0x0,0x0,0x40,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x4c,0x69,0x67,0x68,0x74,0x4d,0x6f,0x64,0x65,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x6d,0x6f,0x64,0x65,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x50,0x48,0x4f,0x4e,0x47,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x43,0x6f,0x6d,0x70,0x6c,0x65,0x78,0x69,0x74,0x79,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x3e,0x4c,0xcc,0xcd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x1d,0x54,0x52,0x41,0x4e,0x53,0x4c,0x41,0x54,0x45,0x5f,0x32,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x58,0x5f,0x41,0x52,0x52,0x4f,0x57,0x2b,0x30,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x1d,0x54,0x52,0x41,0x4e,0x53,0x4c,0x41,0x54,0x45,0x5f,0x32,0x5f,0x44,0x52,0x41,0x47,0x47,0x45,0x52,0x5f,0x59,0x5f,0x41,0x52,0x52,0x4f,0x57,0x2b,0x31,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x12,0x74,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x65,0x32,0x46,0x65,0x65,0x64,0x62,0x61,0x63,0x6b,0x0,0x0,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x18,0x74,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x65,0x32,0x46,0x65,0x65,0x64,0x62,0x61,0x63,0x6b,0x41,0x63,0x74,0x69,0x76,0x65,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x21,0x54,0x52,0x41,0x4e,0x53,0x4c,0x41,0x54,0x45,0x5f,0x32,0x5f,0x41,0x58,0x49,0x53,0x5f,0x46,0x45,0x45,0x44,0x42,0x41,0x43,0x4b,0x5f,0x53,0x54,0x59,0x4c,0x45,0x2b,0x32,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x47,0x72,0x6f,0x75,0x70,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x0,0x0,0x0,0x8,0x4d,0x61,0x74,0x65,0x72,0x69,0x61,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0xc,0x64,0x69,0x66,0x66,0x75,0x73,0x65,0x43,0x6f,0x6c,0x6f,0x72,0x0,0x0,0x0,0x1,0x3e,0xb8,0x51,0xec,0x3d,0x4c,0xcc,0xcd,0x3e,0xe1,0x47,0xae,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xd,0x65,0x6d,0x69,0x73,0x73,0x69,0x76,0x65,0x43,0x6f,0x6c,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x3e,0xb8,0x51,0xec,0x3d,0x4c,0xcc,0xcd,0x3e,0xe1,0x47,0xae,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x9,0x44,0x72,0x61,0x77,0x53,0x74,0x79,0x6c,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x9,0x6c,0x69,0x6e,0x65,0x57,0x69,0x64,0x74,0x68,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x4c,0x69,0x67,0x68,0x74,0x4d,0x6f,0x64,0x65,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x6d,0x6f,0x64,0x65,0x6c,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x50,0x48,0x4f,0x4e,0x47,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xd,0x4e,0x6f,0x72,0x6d,0x61,0x6c,0x42,0x69,0x6e,0x64,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x12,0x50,0x45,0x52,0x5f,0x56,0x45,0x52,0x54,0x45,0x58,0x5f,0x49,0x4e,0x44,0x45,0x58,0x45,0x44,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf,0x4d,0x61,0x74,0x65,0x72,0x69,0x61,0x6c,0x42,0x69,0x6e,0x64,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x76,0x61,0x6c,0x75,0x65,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x4f,0x56,0x45,0x52,0x41,0x4c,0x4c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x17,0x74,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x65,0x32,0x58,0x41,0x78,0x69,0x73,0x46,0x65,0x65,0x64,0x62,0x61,0x63,0x6b,0x0,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xd,0x72,0x65,0x6e,0x64,0x65,0x72,0x43,0x61,0x63,0x68,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x4f,0x4e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x21,0x54,0x52,0x41,0x4e,0x53,0x4c,0x41,0x54,0x45,0x5f,0x32,0x5f,0x41,0x58,0x49,0x53,0x5f,0x46,0x45,0x45,0x44,0x42,0x41,0x43,0x4b,0x5f,0x53,0x54,0x59,0x4c,0x45,0x2b,0x32,0x0,0x0,0x0,0x0,0x0,0x0,0xb,0x43,0x6f,0x6f,0x72,0x64,0x69,0x6e,0x61,0x74,0x65,0x33,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x70,0x6f,0x69,0x6e,0x74,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0xc0,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x4c,0x69,0x6e,0x65,0x53,0x65,0x74,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x44,0x45,0x46,0x0,0x0,0x0,0x0,0x17,0x74,0x72,0x61,0x6e,0x73,0x6c,0x61,0x74,0x65,0x32,0x59,0x41,0x78,0x69,0x73,0x46,0x65,0x65,0x64,0x62,0x61,0x63,0x6b,0x0,0x0,0x0,0x0,0x9,0x53,0x65,0x70,0x61,0x72,0x61,0x74,0x6f,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xd,0x72,0x65,0x6e,0x64,0x65,0x72,0x43,0x61,0x63,0x68,0x69,0x6e,0x67,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x4f,0x4e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x3,0x55,0x53,0x45,0x0,0x0,0x0,0x0,0x21,0x54,0x52,0x41,0x4e,0x53,0x4c,0x41,0x54,0x45,0x5f,0x32,0x5f,0x41,0x58,0x49,0x53,0x5f,0x46,0x45,0x45,0x44,0x42,0x41,0x43,0x4b,0x5f,0x53,0x54,0x59,0x4c,0x45,0x2b,0x32,0x0,0x0,0x0,0x0,0x0,0x0,0xb,0x43,0x6f,0x6f,0x72,0x64,0x69,0x6e,0x61,0x74,0x65,0x33,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5,0x70,0x6f,0x69,0x6e,0x74,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0xc0,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x4c,0x69,0x6e,0x65,0x53,0x65,0x74,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
    	};
    	return geom1;
    }
    
  
////////////////////////////////////////////////////////////////////////
//
// Description:
//    Constructor
//
public SoTranslate2Dragger()
//
////////////////////////////////////////////////////////////////////////
{
    kitHeader.SO_KIT_CONSTRUCTOR(SoTranslate2Dragger.class);

    isBuiltIn = true;

    // Put this stuff under the geomSeparator so it will draw more
    // efficiently.
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(translatorSwitch,"translatorSwitch", SoSwitch.class, true,
                                "geomSeparator","",false);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(translator,"translator", SoSeparator.class, true,
                                "translatorSwitch","",true);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(translatorActive,"translatorActive", SoSeparator.class, true,
                                "translatorSwitch","",true);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(feedbackSwitch,"feedbackSwitch", SoSwitch.class, true,
                                "geomSeparator","",false);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(feedback,"feedback", SoSeparator.class, true,
                                "feedbackSwitch","",true);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(feedbackActive,"feedbackActive", SoSeparator.class, true,
                                "feedbackSwitch","",true);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(axisFeedbackSwitch,"axisFeedbackSwitch", SoSwitch.class, true,
                                "geomSeparator","",false);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(xAxisFeedback,"xAxisFeedback", SoSeparator.class, true,
                                "axisFeedbackSwitch","",true);
    kitHeader.SO_KIT_ADD_CATALOG_ENTRY(yAxisFeedback,"yAxisFeedback", SoSeparator.class, true,
                                "axisFeedbackSwitch","",true);

    // read geometry for shared parts
    if (kitHeader.SO_KIT_IS_FIRST_INSTANCE())
        readDefaultParts("translate2Dragger.iv", geomBuffer, geomBuffer.length );

    kitHeader.SO_KIT_ADD_FIELD(translation,"translation", new SbVec3f(0.0f, 0.0f, 0.0f));

    SO_KIT_INIT_INSTANCE();

    // create the parts...
   setPartAsDefault("translator",      "translate2Translator");
   setPartAsDefault("translatorActive","translate2TranslatorActive");
   setPartAsDefault("feedback",        "translate2Feedback");
   setPartAsDefault("feedbackActive",  "translate2FeedbackActive");
   setPartAsDefault("xAxisFeedback",  "translate2XAxisFeedback");
   setPartAsDefault("yAxisFeedback",  "translate2YAxisFeedback");

    // Set the switches to 0...
    setSwitchValue( translatorSwitch.getValue(), 0 );
    setSwitchValue( feedbackSwitch.getValue(), 0 );

    // Set the axis feedback switch to SO_SWITCH_NONE
    // They're only displayed while dragging
    setSwitchValue( axisFeedbackSwitch.getValue(), SoSwitch.SO_SWITCH_NONE );

    // Create the line projector
    planeProj = new SbPlaneProjector();

    // add the callbacks to perform the dragging
    addStartCallback(  SoTranslate2Dragger::startCB );
    addMotionCallback( SoTranslate2Dragger::motionCB );
    addFinishCallback(   SoTranslate2Dragger::finishCB );

    // add callback to respond to the shift key, for constraining motion
    // to a line within the plane.
    addOtherEventCallback( SoTranslate2Dragger::metaKeyChangeCB );

    // Updates the translation field when the motionMatrix is set.
    addValueChangedCallback( SoTranslate2Dragger::valueChangedCB );

    // Updates the motionMatrix when the translation field is set.
    fieldSensor = new SoFieldSensor( SoTranslate2Dragger::fieldSensorCB, this);
    fieldSensor.setPriority( 0 );

    setUpConnections( true, true );
}

////////////////////////////////////////////////////////////////////////
//
// Description:
//    Destructor
//
public void destructor()
//
////////////////////////////////////////////////////////////////////////
{
    planeProj.destructor();
    if (fieldSensor != null)
        fieldSensor.destructor();
    super.destructor();
}

//    detach/attach any sensors, callbacks, and/or field connections.
//    Called by:            start/end of SoBaseKit::readInstance
//    and on new copy by:   start/end of SoBaseKit::copy.
//    Classes that redefine must call setUpConnections(true,true) 
//    at end of constructor.
//    Returns the state of the node when this was called.
public boolean
setUpConnections( boolean onOff, boolean doItAlways )
{
	if(kitHeader == null) { // java port
		return super.setUpConnections(onOff, doItAlways);
	}
	
    if ( !doItAlways && connectionsSetUp == onOff)
        return onOff;

    if ( onOff ) {

        // We connect AFTER base class.
        super.setUpConnections( onOff, false );

        // Call the sensor CBs to make things are up-to-date.
        fieldSensorCB( this, null );

        // Connect the field sensors
        if (fieldSensor.getAttachedField() != translation)
            fieldSensor.attach( translation );
    }
    else {

        // We disconnect BEFORE base class.

        // Disconnect the field sensors.
        if (fieldSensor.getAttachedField() != null)
            fieldSensor.detach();

        super.setUpConnections( onOff, false );
    }

    return !(connectionsSetUp = onOff);
}

////////////////////////////////////////////////////////////////////////
//
// Description:
//    Set up the highlighting, projector, and the initial hit on
//    the dragger
//
// Use: private
//
public void
dragStart()
//
////////////////////////////////////////////////////////////////////////
{
    // Set the switches to 1...
    setSwitchValue( translatorSwitch.getValue(), 1 );
    setSwitchValue( feedbackSwitch.getValue(), 1 );

    // Set the axis feedback switch to display both.
    // They're displayed while dragging
    setSwitchValue( axisFeedbackSwitch.getValue(), SoSwitch.SO_SWITCH_ALL );

    // There is no constrained direction...
    translateDir = -1;

    // Make a note of which modifier keys are down.
    shftDown = getEvent().wasShiftDown();

    // This is the point we'll use if a metaKey callback makes us re-start.
    worldRestartPt.copyFrom( getWorldStartingPoint());

    // Establish the projector plane in working space.
    initPlaneProjector();
}

////////////////////////////////////////////////////////////////////////
//
// Description:
//    Setup the projector at start of the translation. 
//    Sets the z-axis as plane normal per default but might be changed in derived classes!
//
// Use: protected
//
protected void 
initPlaneProjector()
//
////////////////////////////////////////////////////////////////////////
{
    // Establish the projector plane in working space.
    // Working space is space at end of motion matrix.
    // Plane normal is defined relative to the translatorPart, so 
    // use z-axis to construct the projector plane.
    final SbVec3f startLocalHitPt = new SbVec3f(getLocalStartingPoint());
    planeProj.setPlane(new SbPlane(new SbVec3f(0, 0, 1), startLocalHitPt));
}

////////////////////////////////////////////////////////////////////////
//
// Description:
//    Stretch the dragger according to the motion along the plane
//    projector
//
// Use: private
//
private void
drag()
//
////////////////////////////////////////////////////////////////////////
{
    // Set up the projector space and view.
    // Working space is space at end of motion matrix.
        planeProj.setViewVolume( getViewVolume() );    
        planeProj.setWorkingSpace( getLocalToWorldMatrix() );

    // Get newHitPt and startHitPt in workspace.
        final SbVec3f newHitPt = new SbVec3f(planeProj.project( getNormalizedLocaterPosition())); 
        final SbVec3f startHitPt = new SbVec3f(getLocalStartingPoint());

    // Convert newHitPt to world space and save this as our new worldRestartPt
        getLocalToWorldMatrix().multVecMatrix( newHitPt, worldRestartPt );

    // Figure out the translation relative to start position.
        final SbVec3f motion = newHitPt.operator_minus( startHitPt);

    // Maybe we need to constrain the motion...
    if ( !shftDown )
        translateDir = -1;
    else {
        // The shift key is pressed. This means 1-D translation.
        if ( translateDir == -1 ) {
            // The 1-D direction is not defined. Calculate it based on which
            // direction got the maximum locater motion.
            if ( isAdequateConstraintMotion() ) {
                if ( Math.abs( motion.getValueRead()[0]) > Math.abs( motion.getValueRead()[1]))
                    translateDir = 0;
                else 
                    translateDir = 1;

                // Set the axis feedback switch to the given direction.
                setSwitchValue( axisFeedbackSwitch.getValue(), translateDir );
            }
            else {
                // Not ready to pick a direction yet. Don't move.
                return;
            }
        }
        // get the projection of 'motion' onto the preferred axis.
        final SbVec3f constrainedMotion = new SbVec3f(0,0,0);
        constrainedMotion.setValue(translateDir, motion.getValueRead()[translateDir]);
        motion.copyFrom( constrainedMotion);
    }

    // Append this to the startMotionMatrix, which we saved at the beginning
    // of the drag, to find the current motion matrix.
        setMotionMatrix( appendTranslation( getStartMotionMatrix(), motion ) );
}

////////////////////////////////////////////////////////////////////////
//
// Description:
//
// Use: private
//
private void
dragFinish()
//
////////////////////////////////////////////////////////////////////////
{
    // Set the switches to 0...
    setSwitchValue( translatorSwitch.getValue(), 0 );
    setSwitchValue( feedbackSwitch.getValue(), 0 );

    // Set the axis feedback switch to SO_SWITCH_NONE
    // They're only displayed while dragging
    setSwitchValue( axisFeedbackSwitch.getValue(), SoSwitch.SO_SWITCH_NONE );
}

//
////////////////////////////////////////////////////////////////////////
// keypress/release callback functions
//
// These assure that the proper changes to the highlights, 
// currentState, and projectors are made
//
////////////////////////////////////////////////////////////////////////
//

public static void
metaKeyChangeCB( Object object, SoDragger inDragger)
{
    SoTranslate2Dragger d = (SoTranslate2Dragger ) inDragger;
    SoHandleEventAction ha = d.getHandleEventAction();

    // [1] Only do this if we are grabbing
    if (ha.getGrabber() != d )
        return;

    // [2] We only want key press or release events.
    final  SoEvent event = d.getEvent();
    if ( !SoKeyboardEvent.SO_KEY_PRESS_EVENT(event, SoKeyboardEvent.Key.ANY) && !SoKeyboardEvent.SO_KEY_RELEASE_EVENT(event, SoKeyboardEvent.Key.ANY))
        return;

    // [3] Is the key the shift key?
    final SoKeyboardEvent ke = ( SoKeyboardEvent ) event;
    SoKeyboardEvent.Key key = ke.getKey();

    if ( key == SoKeyboardEvent.Key.LEFT_SHIFT ||
         key == SoKeyboardEvent.Key.RIGHT_SHIFT ) {

        // We want to end the old gesture and start a new one.

        // [A] Release the grabber. This ends the gesture and calls all 
        //     finishCallbacks (on parent dragger, too, if we're registered)
            ha.releaseGrabber();

        // [B] Set the starting point to be our saved worldRestartPoint
            d.setStartingPoint( d.worldRestartPt );

        // [C] Become the grabber again. This begins a new gesture and calls all
        //     startCallbacks (parent dragger, too).  Info like viewVolume, 
        //     viewportRegion, handleEventAction, and 
        //     tempPathToThis is still valid.
            ha.setGrabber(d);

        // [D] set handled
            ha.setHandled();
    }
}

////////////////////////////////////////////////////////////////////
//  Stubs for callbacks
////////////////////////////////////////////////////////////////////
public static void
startCB( Object object, SoDragger inDragger )
{
    SoTranslate2Dragger m = (SoTranslate2Dragger ) inDragger;
    m.dragStart();
}

public static void
motionCB( Object object, SoDragger inDragger )
{
    SoTranslate2Dragger m = (SoTranslate2Dragger ) inDragger;
    m.drag();
}

public static void
finishCB( Object object, SoDragger inDragger )
{
    SoTranslate2Dragger m = (SoTranslate2Dragger ) inDragger;
    m.dragFinish();
}

public static void
valueChangedCB( Object object, SoDragger inDragger )
{
    SoTranslate2Dragger m = (SoTranslate2Dragger ) inDragger;
    final SbMatrix motMat = new SbMatrix(m.getMotionMatrix());

    final SbVec3f    trans = new SbVec3f(), scale = new SbVec3f();
    final SbRotation rot = new SbRotation(), scaleOrient = new SbRotation();
    getTransformFast( motMat, trans, rot, scale, scaleOrient );

    // Disconnect the field sensor
    m.fieldSensor.detach();

    if ( m.translation.getValue().operator_not_equal( trans) )
        m.translation.setValue(trans);

    // Reconnect the field sensor
    m.fieldSensor.attach( (m.translation) );
}

public static void
fieldSensorCB( Object inDragger, SoSensor sensor)
{
    SoTranslate2Dragger dragger = (SoTranslate2Dragger ) inDragger;

    // Incorporate the new field value into the matrix...
    final SbMatrix motMat = new SbMatrix(dragger.getMotionMatrix());
    dragger.workFieldsIntoTransform( motMat );

    dragger.setMotionMatrix( motMat );
}
    

////////////////////////////////////////////////////////////////////////
//
//Description:
//Initialize the dragger
//
//Use: public, internal
//
public static void initClass()
//
////////////////////////////////////////////////////////////////////////
{
	SO__KIT_INIT_CLASS(SoTranslate2Dragger.class, "Translate2Dragger", SoDragger.class);
}

}
